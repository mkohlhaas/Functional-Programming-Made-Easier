// Generated by purs bundle 0.14.5
var PS = {};
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var semigroupoidFn = {
      compose: function (f) {
          return function (g) {
              return function (x) {
                  return f(g(x));
              };
          };
      }
  };
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = {
      identity: function (x) {
          return x;
      },
      Semigroupoid0: function () {
          return Control_Semigroupoid.semigroupoidFn;
      }
  };
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var apply = function (f) {
      return function (x) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["apply"] = apply;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var functorFn = {
      map: Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)
  };
  var functorArray = {
      map: $foreign.arrayMap
  };
  exports["map"] = map;
  exports["void"] = $$void;
  exports["voidLeft"] = voidLeft;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var applyFn = {
      apply: function (f) {
          return function (g) {
              return function (x) {
                  return f(x)(g(x));
              };
          };
      },
      Functor0: function () {
          return Data_Functor.functorFn;
      }
  };
  var applyArray = {
      apply: $foreign.arrayApply,
      Functor0: function () {
          return Data_Functor.functorArray;
      }
  };
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
  exports["applyFn"] = applyFn;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];          
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  var applicativeArray = {
      pure: function (x) {
          return [ x ];
      },
      Apply0: function () {
          return Control_Apply.applyArray;
      }
  };
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["applicativeArray"] = applicativeArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];                
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = {
      map: function (f) {
          return function (m) {
              if (m instanceof Left) {
                  return new Left(m.value0);
              };
              if (m instanceof Right) {
                  return new Right(f(m.value0));
              };
              throw new Error("Failed pattern match at Data.Either (line 31, column 1 - line 31, column 52): " + [ m.constructor.name ]);
          };
      }
  };
  var fromRight$prime = function (v) {
      return function (v1) {
          if (v1 instanceof Right) {
              return v1.value0;
          };
          return v(Data_Unit.unit);
      };
  };
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var applyEither = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Left) {
                  return new Left(v.value0);
              };
              if (v instanceof Right) {
                  return Data_Functor.map(functorEither)(v.value0)(v1);
              };
              throw new Error("Failed pattern match at Data.Either (line 70, column 1 - line 72, column 30): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorEither;
      }
  };
  var bindEither = {
      bind: either(function (e) {
          return function (v) {
              return new Left(e);
          };
      })(function (a) {
          return function (f) {
              return f(a);
          };
      }),
      Apply0: function () {
          return applyEither;
      }
  };
  var applicativeEither = {
      pure: Right.create,
      Apply0: function () {
          return applyEither;
      }
  };
  var monadEither = {
      Applicative0: function () {
          return applicativeEither;
      },
      Bind1: function () {
          return bindEither;
      }
  };
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["fromRight'"] = fromRight$prime;
  exports["applicativeEither"] = applicativeEither;
  exports["monadEither"] = monadEither;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];          
  var discard = function (dict) {
      return dict.discard;
  };
  var bindFn = {
      bind: function (m) {
          return function (f) {
              return function (x) {
                  return f(m(x))(x);
              };
          };
      },
      Apply0: function () {
          return Control_Apply.applyFn;
      }
  };
  var bindArray = {
      bind: $foreign.arrayBind,
      Apply0: function () {
          return Control_Apply.applyArray;
      }
  };
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var discardUnit = {
      discard: function (dictBind) {
          return bind(dictBind);
      }
  };
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["discard"] = discard;
  exports["bindFn"] = bindFn;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad = $PS["Control.Monad"];                  
  var monadEffect = {
      Applicative0: function () {
          return applicativeEffect;
      },
      Bind1: function () {
          return bindEffect;
      }
  };
  var bindEffect = {
      bind: $foreign.bindE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var applyEffect = {
      apply: Control_Monad.ap(monadEffect),
      Functor0: function () {
          return functorEffect;
      }
  };
  var applicativeEffect = {
      pure: $foreign.pureE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var functorEffect = {
      map: Control_Applicative.liftA1(applicativeEffect)
  };
  exports["functorEffect"] = functorEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  exports["throwException"] = $foreign.throwException;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Effect_Exception = $PS["Effect.Exception"];                
  var throwError = function (dict) {
      return dict.throwError;
  };
  var monadThrowEither = {
      throwError: Data_Either.Left.create,
      Monad0: function () {
          return Data_Either.monadEither;
      }
  };
  var monadThrowEffect = {
      throwError: Effect_Exception.throwException,
      Monad0: function () {
          return Effect.monadEffect;
      }
  };
  var catchError = function (dict) {
      return dict.catchError;
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))((function () {
              var $19 = Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0());
              return function ($20) {
                  return $19(Data_Either.Left.create($20));
              };
          })());
      };
  };
  exports["throwError"] = throwError;
  exports["try"] = $$try;
  exports["monadThrowEither"] = monadThrowEither;
  exports["monadThrowEffect"] = monadThrowEffect;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */
  "use strict";

  function id(x) {
    return x;
  }                       
  exports.fromString = id;
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Argonaut.Core"] = $PS["Data.Argonaut.Core"] || {};
  var exports = $PS["Data.Argonaut.Core"];
  var $foreign = $PS["Data.Argonaut.Core"];
  exports["fromString"] = $foreign.fromString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Argonaut.Decode.Error"] = $PS["Data.Argonaut.Decode.Error"] || {};
  var exports = $PS["Data.Argonaut.Decode.Error"];
  var UnexpectedValue = (function () {
      function UnexpectedValue(value0) {
          this.value0 = value0;
      };
      UnexpectedValue.create = function (value0) {
          return new UnexpectedValue(value0);
      };
      return UnexpectedValue;
  })();
  exports["UnexpectedValue"] = UnexpectedValue;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unconsImpl = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.partition = function (f) {
    return function (xs) {
      var yes = [];
      var no  = [];
      for (var i = 0; i < xs.length; i++) {
        var x = xs[i];
        if (f(x))
          yes.push(x);
        else
          no.push(x);
      }
      return { yes: yes, no: no };
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortByImpl = (function () {
    function mergeFromTo(compare, fromOrdering, xs1, xs2, from, to) {
      var mid;
      var i;
      var j;
      var k;
      var x;
      var y;
      var c;

      mid = from + ((to - from) >> 1);
      if (mid - from > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, from, mid);
      if (to - mid > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, mid, to);

      i = from;
      j = mid;
      k = from;
      while (i < mid && j < to) {
        x = xs2[i];
        y = xs2[j];
        c = fromOrdering(compare(x)(y));
        if (c > 0) {
          xs1[k++] = y;
          ++j;
        }
        else {
          xs1[k++] = x;
          ++i;
        }
      }
      while (i < mid) {
        xs1[k++] = xs2[i++];
      }
      while (j < to) {
        xs1[k++] = xs2[j++];
      }
    }

    return function (compare) {
      return function (fromOrdering) {
        return function (xs) {
          var out;

          if (xs.length < 2) return xs;

          out = xs.slice(0);
          mergeFromTo(compare, fromOrdering, out, xs.slice(0), 0, xs.length);

          return out;
        };
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };

  exports.all = function (p) {
    return function (xs) {
      var len = xs.length;
      for (var i = 0; i < len; i++) {
        if (!p(xs[i])) return false;
      }
      return true;
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (a) {
    return function (ref) {
      return function () {
        return ref.value = a; // eslint-disable-line no-return-assign
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"]; 
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var functorST = {
      map: $foreign.map_
  };
  exports["modify"] = modify;
  exports["functorST"] = functorST;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return [];
  };

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.unsafeFreeze = function (xs) {
    return function () {
      return xs;
    };
  };

  function copyImpl(xs) {
    return function () {
      return xs.slice();
    };
  }                         

  exports.thaw = copyImpl;
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Array.ST"] = $PS["Data.Array.ST"] || {};
  var exports = $PS["Data.Array.ST"];
  var $foreign = $PS["Data.Array.ST"];                     
  var withArray = function (f) {
      return function (xs) {
          return function __do() {
              var result = $foreign.thaw(xs)();
              f(result)();
              return $foreign.unsafeFreeze(result)();
          };
      };
  };
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };
  exports["withArray"] = withArray;
  exports["push"] = push;
  exports["new"] = $foreign["new"];
  exports["unsafeFreeze"] = $foreign.unsafeFreeze;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var not = function (dict) {
      return dict.not;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = {
      ff: false,
      tt: true,
      implies: function (a) {
          return function (b) {
              return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
          };
      },
      conj: $foreign.boolConj,
      disj: $foreign.boolDisj,
      not: $foreign.boolNot
  };
  exports["ff"] = ff;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq;
  exports.eqNumberImpl = refEq;
  exports.eqCharImpl = refEq;
  exports.eqStringImpl = refEq;

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var eqString = {
      eq: $foreign.eqStringImpl
  };
  var eqNumber = {
      eq: $foreign.eqNumberImpl
  };
  var eqInt = {
      eq: $foreign.eqIntImpl
  };
  var eqChar = {
      eq: $foreign.eqCharImpl
  };
  var eqBoolean = {
      eq: $foreign.eqBooleanImpl
  };
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return {
          eq: $foreign.eqArrayImpl(eq(dictEq))
      };
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["eqArray"] = eqArray;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };

  exports.ordBooleanImpl = unsafeCompareImpl;
  exports.ordIntImpl = unsafeCompareImpl;
  exports.ordNumberImpl = unsafeCompareImpl;
  exports.ordStringImpl = unsafeCompareImpl;
  exports.ordCharImpl = unsafeCompareImpl;

  exports.ordArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        var i = 0;
        var xlen = xs.length;
        var ylen = ys.length;
        while (i < xlen && i < ylen) {
          var x = xs[i];
          var y = ys[i];
          var o = f(x)(y);
          if (o !== 0) {
            return o;
          }
          i++;
        }
        if (xlen === ylen) {
          return 0;
        } else if (xlen > ylen) {
          return -1;
        } else {
          return 1;
        }
      };
    };
  };
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var ordString = {
      compare: $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqString;
      }
  };
  var ordNumber = {
      compare: $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqNumber;
      }
  };
  var ordInt = {
      compare: $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqInt;
      }
  };
  var ordChar = {
      compare: $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqChar;
      }
  };
  var ordBoolean = {
      compare: $foreign.ordBooleanImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqBoolean;
      }
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var comparing = function (dictOrd) {
      return function (f) {
          return function (x) {
              return function (y) {
                  return compare(dictOrd)(f(x))(f(y));
              };
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 176, column 3 - line 179, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var ordArray = function (dictOrd) {
      return {
          compare: (function () {
              var toDelta = function (x) {
                  return function (y) {
                      var v = compare(dictOrd)(x)(y);
                      if (v instanceof Data_Ordering.EQ) {
                          return 0;
                      };
                      if (v instanceof Data_Ordering.LT) {
                          return 1;
                      };
                      if (v instanceof Data_Ordering.GT) {
                          return -1 | 0;
                      };
                      throw new Error("Failed pattern match at Data.Ord (line 74, column 7 - line 77, column 17): " + [ v.constructor.name ]);
                  };
              };
              return function (xs) {
                  return function (ys) {
                      return compare(ordInt)(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));
                  };
              };
          })(),
          Eq0: function () {
              return Data_Eq.eqArray(dictOrd.Eq0());
          }
      };
  };
  exports["compare"] = compare;
  exports["comparing"] = comparing;
  exports["min"] = min;
  exports["max"] = max;
  exports["ordBoolean"] = ordBoolean;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
  exports["ordArray"] = ordArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = {
      map: function (v) {
          return function (v1) {
              if (v1 instanceof Just) {
                  return new Just(v(v1.value0));
              };
              return Nothing.value;
          };
      }
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  };
  var eqMaybe = function (dictEq) {
      return {
          eq: function (x) {
              return function (y) {
                  if (x instanceof Nothing && y instanceof Nothing) {
                      return true;
                  };
                  if (x instanceof Just && y instanceof Just) {
                      return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                  };
                  return false;
              };
          }
      };
  };
  var ordMaybe = function (dictOrd) {
      return {
          compare: function (x) {
              return function (y) {
                  if (x instanceof Nothing && y instanceof Nothing) {
                      return Data_Ordering.EQ.value;
                  };
                  if (x instanceof Nothing) {
                      return Data_Ordering.LT.value;
                  };
                  if (y instanceof Nothing) {
                      return Data_Ordering.GT.value;
                  };
                  if (x instanceof Just && y instanceof Just) {
                      return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                  };
                  throw new Error("Failed pattern match at Data.Maybe (line 205, column 1 - line 205, column 51): " + [ x.constructor.name, y.constructor.name ]);
              };
          },
          Eq0: function () {
              return eqMaybe(dictOrd.Eq0());
          }
      };
  };
  var applyMaybe = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Just) {
                  return Data_Functor.map(functorMaybe)(v.value0)(v1);
              };
              if (v instanceof Nothing) {
                  return Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorMaybe;
      }
  };
  var bindMaybe = {
      bind: function (v) {
          return function (v1) {
              if (v instanceof Just) {
                  return v1(v.value0);
              };
              if (v instanceof Nothing) {
                  return Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Maybe (line 126, column 1 - line 128, column 28): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Apply0: function () {
          return applyMaybe;
      }
  };
  var applicativeMaybe = {
      pure: Just.create,
      Apply0: function () {
          return applyMaybe;
      }
  };
  var altMaybe = {
      alt: function (v) {
          return function (v1) {
              if (v instanceof Nothing) {
                  return v1;
              };
              return v;
          };
      },
      Functor0: function () {
          return functorMaybe;
      }
  };
  var plusMaybe = {
      empty: Nothing.value,
      Alt0: function () {
          return altMaybe;
      }
  };
  var alternativeMaybe = {
      Applicative0: function () {
          return applicativeMaybe;
      },
      Plus1: function () {
          return plusMaybe;
      }
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["alternativeMaybe"] = alternativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["eqMaybe"] = eqMaybe;
  exports["ordMaybe"] = ordMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Array.ST.Iterator"] = $PS["Data.Array.ST.Iterator"] || {};
  var exports = $PS["Data.Array.ST.Iterator"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var Iterator = (function () {
      function Iterator(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Iterator.create = function (value0) {
          return function (value1) {
              return new Iterator(value0, value1);
          };
      };
      return Iterator;
  })();
  var next = function (v) {
      return function __do() {
          var i = Control_Monad_ST_Internal.read(v.value1)();
          Control_Monad_ST_Internal.modify(function (v1) {
              return v1 + 1 | 0;
          })(v.value1)();
          return v.value0(i);
      };
  };                                                    
  var iterator = function (f) {
      return Data_Functor.map(Control_Monad_ST_Internal.functorST)(Iterator.create(f))(Control_Monad_ST_Internal["new"](0));
  };
  var iterate = function (iter) {
      return function (f) {
          return function __do() {
              var $$break = Control_Monad_ST_Internal["new"](false)();
              while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
                  (function __do() {
                      var mx = next(iter)();
                      if (mx instanceof Data_Maybe.Just) {
                          return f(mx.value0)();
                      };
                      if (mx instanceof Data_Maybe.Nothing) {
                          return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
                      };
                      throw new Error("Failed pattern match at Data.Array.ST.Iterator (line 42, column 5 - line 44, column 47): " + [ mx.constructor.name ]);
                  })();
              };
              return {};
          };
      };
  };
  exports["iterator"] = iterator;
  exports["iterate"] = iterate;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var semiringInt = {
      add: $foreign.intAdd,
      zero: 0,
      mul: $foreign.intMul,
      one: 1
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["add"] = add;
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var ringInt = {
      sub: $foreign.intSub,
      Semiring0: function () {
          return Data_Semiring.semiringInt;
      }
  };
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var commutativeRingInt = {
      Ring0: function () {
          return Data_Ring.ringInt;
      }
  };
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var mod = function (dict) {
      return dict.mod;
  };
  var euclideanRingInt = {
      degree: $foreign.intDegree,
      div: $foreign.intDiv,
      mod: $foreign.intMod,
      CommutativeRing0: function () {
          return Data_CommutativeRing.commutativeRingInt;
      }
  };
  var div = function (dict) {
      return dict.div;
  };
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["reflectSymbol"] = reflectSymbol;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };

  exports.unsafeSet = function (label) {
    return function (value) {
      return function (rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label] = value;
        return copy;
      };
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
  exports["unsafeSet"] = $foreign.unsafeSet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];
  var semigroupString = {
      append: $foreign.concatString
  };
  var semigroupRecordNil = {
      appendRecord: function (v) {
          return function (v1) {
              return function (v2) {
                  return {};
              };
          };
      }
  };
  var semigroupArray = {
      append: $foreign.concatArray
  };
  var appendRecord = function (dict) {
      return dict.appendRecord;
  };
  var semigroupRecord = function (dictRowToList) {
      return function (dictSemigroupRecord) {
          return {
              append: appendRecord(dictSemigroupRecord)(Type_Proxy["Proxy"].value)
          };
      };
  };
  var append = function (dict) {
      return dict.append;
  };
  var semigroupRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictSemigroupRecord) {
              return function (dictSemigroup) {
                  return {
                      appendRecord: function (v) {
                          return function (ra) {
                              return function (rb) {
                                  var tail = appendRecord(dictSemigroupRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                                  var insert = Record_Unsafe.unsafeSet(key);
                                  var get = Record_Unsafe.unsafeGet(key);
                                  return insert(append(dictSemigroup)(get(ra))(get(rb)))(tail);
                              };
                          };
                      }
                  };
              };
          };
      };
  };
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
  exports["semigroupRecord"] = semigroupRecord;
  exports["semigroupRecordNil"] = semigroupRecordNil;
  exports["semigroupRecordCons"] = semigroupRecordCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];
  var monoidString = {
      mempty: "",
      Semigroup0: function () {
          return Data_Semigroup.semigroupString;
      }
  };
  var monoidRecordNil = {
      memptyRecord: function (v) {
          return {};
      },
      SemigroupRecord0: function () {
          return Data_Semigroup.semigroupRecordNil;
      }
  };
  var monoidArray = {
      mempty: [  ],
      Semigroup0: function () {
          return Data_Semigroup.semigroupArray;
      }
  };
  var memptyRecord = function (dict) {
      return dict.memptyRecord;
  };
  var monoidRecord = function (dictRowToList) {
      return function (dictMonoidRecord) {
          return {
              mempty: memptyRecord(dictMonoidRecord)(Type_Proxy["Proxy"].value),
              Semigroup0: function () {
                  return Data_Semigroup.semigroupRecord()(dictMonoidRecord.SemigroupRecord0());
              }
          };
      };
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidRecordCons = function (dictIsSymbol) {
      return function (dictMonoid) {
          return function (dictCons) {
              return function (dictMonoidRecord) {
                  return {
                      memptyRecord: function (v) {
                          var tail = memptyRecord(dictMonoidRecord)(Type_Proxy["Proxy"].value);
                          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                          var insert = Record_Unsafe.unsafeSet(key);
                          return insert(mempty(dictMonoid))(tail);
                      },
                      SemigroupRecord0: function () {
                          return Data_Semigroup.semigroupRecordCons(dictIsSymbol)()(dictMonoidRecord.SemigroupRecord0())(dictMonoid.Semigroup0());
                      }
                  };
              };
          };
      };
  };
  var power = function (dictMonoid) {
      return function (x) {
          var go = function (p) {
              if (p <= 0) {
                  return mempty(dictMonoid);
              };
              if (p === 1) {
                  return x;
              };
              if (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(p)(2) === 0) {
                  var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x$prime);
              };
              if (Data_Boolean.otherwise) {
                  var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x));
              };
              throw new Error("Failed pattern match at Data.Monoid (line 86, column 3 - line 86, column 17): " + [ p.constructor.name ]);
          };
          return go;
      };
  };
  var guard = function (dictMonoid) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return mempty(dictMonoid);
              };
              throw new Error("Failed pattern match at Data.Monoid (line 94, column 1 - line 94, column 49): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  exports["mempty"] = mempty;
  exports["power"] = power;
  exports["guard"] = guard;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
  exports["monoidRecord"] = monoidRecord;
  exports["monoidRecordNil"] = monoidRecordNil;
  exports["monoidRecordCons"] = monoidRecordCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return {
          append: function (v) {
              return function (v1) {
                  return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
              };
          }
      };
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return {
          mempty: Data_HeytingAlgebra.ff(dictHeytingAlgebra),
          Semigroup0: function () {
              return semigroupDisj(dictHeytingAlgebra);
          }
      };
  };
  exports["Disj"] = Disj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function (dictCoercible) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var unwrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  var un = function (dictNewtype) {
      return function (v) {
          return unwrap();
      };
  };
  var alaF = function (dictCoercible) {
      return function (dictCoercible1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return Safe_Coerce.coerce();
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["un"] = un;
  exports["alaF"] = alaF;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  };
  var foldableMaybe = {
      foldr: function (v) {
          return function (z) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return z;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(v1.value0)(z);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
              };
          };
      },
      foldl: function (v) {
          return function (z) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return z;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(z)(v1.value0);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (v) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Data_Monoid.mempty(dictMonoid);
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(v1.value0);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      }
  };
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = {
      foldr: $foreign.foldrArray,
      foldl: $foreign.foldlArray,
      foldMap: function (dictMonoid) {
          return foldMapDefaultR(foldableArray)(dictMonoid);
      }
  };
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF()()()()(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          var $326 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
          var $327 = Data_Eq.eq(dictEq);
          return function ($328) {
              return $326($327($328));
          };
      };
  };
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["fold"] = fold;
  exports["intercalate"] = intercalate;
  exports["elem"] = elem;
  exports["find"] = find;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };
  var fst = function (v) {
      return v.value0;
  };
  var eqTuple = function (dictEq) {
      return function (dictEq1) {
          return {
              eq: function (x) {
                  return function (y) {
                      return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
                  };
              }
          };
      };
  };
  var ordTuple = function (dictOrd) {
      return function (dictOrd1) {
          return {
              compare: function (x) {
                  return function (y) {
                      var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                      if (v instanceof Data_Ordering.LT) {
                          return Data_Ordering.LT.value;
                      };
                      if (v instanceof Data_Ordering.GT) {
                          return Data_Ordering.GT.value;
                      };
                      return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
                  };
              },
              Eq0: function () {
                  return eqTuple(dictOrd.Eq0())(dictOrd1.Eq0());
              }
          };
      };
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
  exports["ordTuple"] = ordTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = $PS["Data.Array.ST.Iterator"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var uncons = $foreign.unconsImpl(Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var tail = $foreign.unconsImpl(Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var sortBy = function (comp) {
      return $foreign.sortByImpl(comp)(function (v) {
          if (v instanceof Data_Ordering.GT) {
              return 1;
          };
          if (v instanceof Data_Ordering.EQ) {
              return 0;
          };
          if (v instanceof Data_Ordering.LT) {
              return -1 | 0;
          };
          throw new Error("Failed pattern match at Data.Array (line 831, column 31 - line 834, column 11): " + [ v.constructor.name ]);
      });
  };
  var sortWith = function (dictOrd) {
      return function (f) {
          return sortBy(Data_Ord.comparing(dictOrd)(f));
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var snoc = function (xs) {
      return function (x) {
          return Data_Array_ST.withArray(Data_Array_ST.push(x))(xs)();
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var intercalate = function (dictMonoid) {
      return Data_Foldable.intercalate(Data_Foldable.foldableArray)(dictMonoid);
  };                                                                                     
  var init = function (xs) {
      if ($$null(xs)) {
          return Data_Maybe.Nothing.value;
      };
      if (Data_Boolean.otherwise) {
          return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
      };
      throw new Error("Failed pattern match at Data.Array (line 340, column 1 - line 340, column 45): " + [ xs.constructor.name ]);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var unsnoc = function (xs) {
      return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return function (v1) {
              return {
                  init: v,
                  last: v1
              };
          };
      })(init(xs)))(last(xs));
  };
  var unzip = function (xs) {
      return (function __do() {
          var fsts = Data_Array_ST["new"]();
          var snds = Data_Array_ST["new"]();
          var iter = Data_Array_ST_Iterator.iterator(function (v) {
              return index(xs)(v);
          })();
          Data_Array_ST_Iterator.iterate(iter)(function (v) {
              return function __do() {
                  Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v.value0)(fsts))();
                  return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v.value1)(snds))();
              };
          })();
          var fsts$prime = Data_Array_ST.unsafeFreeze(fsts)();
          var snds$prime = Data_Array_ST.unsafeFreeze(snds)();
          return new Data_Tuple.Tuple(fsts$prime, snds$prime);
      })();
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var foldr = Data_Foldable.foldr(Data_Foldable.foldableArray);
  var cons = function (x) {
      return function (xs) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ x ])(xs);
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap((function () {
          var $109 = Data_Maybe.maybe([  ])(singleton);
          return function ($110) {
              return $109(f($110));
          };
      })());
  };
  exports["singleton"] = singleton;
  exports["null"] = $$null;
  exports["cons"] = cons;
  exports["snoc"] = snoc;
  exports["head"] = head;
  exports["tail"] = tail;
  exports["uncons"] = uncons;
  exports["unsnoc"] = unsnoc;
  exports["mapMaybe"] = mapMaybe;
  exports["foldr"] = foldr;
  exports["intercalate"] = intercalate;
  exports["sort"] = sort;
  exports["sortWith"] = sortWith;
  exports["zip"] = zip;
  exports["unzip"] = unzip;
  exports["length"] = $foreign.length;
  exports["partition"] = $foreign.partition;
  exports["all"] = $foreign.all;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Array.NonEmpty.Internal"] = $PS["Data.Array.NonEmpty.Internal"] || {};
  var exports = $PS["Data.Array.NonEmpty.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];                    
  var NonEmptyArray = function (x) {
      return x;
  };
  var semigroupNonEmptyArray = Data_Semigroup.semigroupArray;                     
  var functorNonEmptyArray = Data_Functor.functorArray;                              
  var foldableNonEmptyArray = Data_Foldable.foldableArray;
  var applicativeNonEmptyArray = Control_Applicative.applicativeArray;
  exports["NonEmptyArray"] = NonEmptyArray;
  exports["semigroupNonEmptyArray"] = semigroupNonEmptyArray;
  exports["functorNonEmptyArray"] = functorNonEmptyArray;
  exports["foldableNonEmptyArray"] = foldableNonEmptyArray;
  exports["applicativeNonEmptyArray"] = applicativeNonEmptyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Bifunctor"] = $PS["Data.Bifunctor"] || {};
  var exports = $PS["Data.Bifunctor"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var bimap = function (dict) {
      return dict.bimap;
  };
  var bifunctorTuple = {
      bimap: function (f) {
          return function (g) {
              return function (v) {
                  return new Data_Tuple.Tuple(f(v.value0), g(v.value1));
              };
          };
      }
  };
  exports["bimap"] = bimap;
  exports["bifunctorTuple"] = bifunctorTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Array.NonEmpty"] = $PS["Data.Array.NonEmpty"] || {};
  var exports = $PS["Data.Array.NonEmpty"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Maybe = $PS["Data.Maybe"];               
  var unsafeFromArray = Data_Array_NonEmpty_Internal.NonEmptyArray;
  var toArray = function (v) {
      return v;
  };
  var unzip = (function () {
      var $54 = Data_Bifunctor.bimap(Data_Bifunctor.bifunctorTuple)(unsafeFromArray)(unsafeFromArray);
      return function ($55) {
          return $54(Data_Array.unzip(toArray($55)));
      };
  })();
  var snoc$prime = function (xs) {
      return function (x) {
          return unsafeFromArray(Data_Array.snoc(xs)(x));
      };
  };
  var snoc = function (xs) {
      return function (x) {
          return unsafeFromArray(Data_Array.snoc(toArray(xs))(x));
      };
  };
  var singleton = function ($60) {
      return unsafeFromArray(Data_Array.singleton($60));
  };
  var fromArray = function (xs) {
      if (Data_Array.length(xs) > 0) {
          return new Data_Maybe.Just(unsafeFromArray(xs));
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Array.NonEmpty (line 159, column 1 - line 159, column 58): " + [ xs.constructor.name ]);
  };
  var cons$prime = function (x) {
      return function (xs) {
          return unsafeFromArray(Data_Array.cons(x)(xs));
      };
  };
  var adaptMaybe = function (f) {
      var $75 = Data_Maybe.fromJust();
      return function ($76) {
          return $75(f(toArray($76)));
      };
  };
  var head = adaptMaybe(Data_Array.head);
  var tail = adaptMaybe(Data_Array.tail);
  var unsnoc = adaptMaybe(Data_Array.unsnoc);
  var adaptAny = function (f) {
      return function ($78) {
          return f(toArray($78));
      };
  };                                     
  var length = adaptAny(Data_Array.length);
  var unsafeAdapt = function (f) {
      var $79 = adaptAny(f);
      return function ($80) {
          return unsafeFromArray($79($80));
      };
  };
  var cons = function (x) {
      return unsafeAdapt(Data_Array.cons(x));
  };
  var sortWith = function (dictOrd) {
      return function (f) {
          return unsafeAdapt(Data_Array.sortWith(dictOrd)(f));
      };
  };
  exports["fromArray"] = fromArray;
  exports["toArray"] = toArray;
  exports["singleton"] = singleton;
  exports["length"] = length;
  exports["cons'"] = cons$prime;
  exports["snoc"] = snoc;
  exports["snoc'"] = snoc$prime;
  exports["head"] = head;
  exports["tail"] = tail;
  exports["unsnoc"] = unsnoc;
  exports["sortWith"] = sortWith;
  exports["unzip"] = unzip;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];
  var top = function (dict) {
      return dict.top;
  };
  var boundedInt = {
      top: $foreign.topInt,
      bottom: $foreign.bottomInt,
      Ord0: function () {
          return Data_Ord.ordInt;
      }
  };
  var boundedChar = {
      top: $foreign.topChar,
      bottom: $foreign.bottomChar,
      Ord0: function () {
          return Data_Ord.ordChar;
      }
  };
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];
  var empty = function (dict) {
      return dict.empty;
  };
  exports["empty"] = empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Semigroup = $PS["Data.Semigroup"];                  
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var foldableNonEmpty = function (dictFoldable) {
      return {
          foldMap: function (dictMonoid) {
              return function (f) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
                  };
              };
          },
          foldl: function (f) {
              return function (b) {
                  return function (v) {
                      return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
                  };
              };
          },
          foldr: function (f) {
              return function (b) {
                  return function (v) {
                      return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
                  };
              };
          }
      };
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["foldableNonEmpty"] = foldableNonEmpty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Semigroup = $PS["Data.Semigroup"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done1 = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done1 = true;
                              return acc;
                          };
                          while (!$tco_done1) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = {
      map: listMap
  };                                                                   
  var foldableList = {
      foldr: function (f) {
          return function (b) {
              var rev = (function () {
                  var go = function ($copy_acc) {
                      return function ($copy_v) {
                          var $tco_var_acc = $copy_acc;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(acc, v) {
                              if (v instanceof Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v instanceof Cons) {
                                  $tco_var_acc = new Cons(v.value0, acc);
                                  $copy_v = v.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_acc, $copy_v);
                          };
                          return $tco_result;
                      };
                  };
                  return go(Nil.value);
              })();
              var $205 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
              return function ($206) {
                  return $205(rev($206));
              };
          };
      },
      foldl: function (f) {
          var go = function ($copy_b) {
              return function ($copy_v) {
                  var $tco_var_b = $copy_b;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(b, v) {
                      if (v instanceof Nil) {
                          $tco_done1 = true;
                          return b;
                      };
                      if (v instanceof Cons) {
                          $tco_var_b = f(b)(v.value0);
                          $copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_b, $copy_v);
                  };
                  return $tco_result;
              };
          };
          return go;
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return Data_Foldable.foldl(foldableList)(function (acc) {
                  var $207 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
                  return function ($208) {
                      return $207(f($208));
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      }
  };
  var foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
  var semigroupList = {
      append: function (xs) {
          return function (ys) {
              return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
          };
      }
  };
  var unfoldable1List = {
      unfoldr1: function (f) {
          return function (b) {
              var go = function ($copy_source) {
                  return function ($copy_memo) {
                      var $tco_var_source = $copy_source;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(source, memo) {
                          var v = f(source);
                          if (v.value1 instanceof Data_Maybe.Just) {
                              $tco_var_source = v.value1.value0;
                              $copy_memo = new Cons(v.value0, memo);
                              return;
                          };
                          if (v.value1 instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 136, column 22 - line 138, column 61): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_source, $copy_memo);
                      };
                      return $tco_result;
                  };
              };
              return go(b)(Nil.value);
          };
      }
  };
  var unfoldableList = {
      unfoldr: function (f) {
          return function (b) {
              var go = function ($copy_source) {
                  return function ($copy_memo) {
                      var $tco_var_source = $copy_source;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(source, memo) {
                          var v = f(source);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_source = v.value0.value1;
                              $copy_memo = new Cons(v.value0.value0, memo);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 143, column 22 - line 145, column 52): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_source, $copy_memo);
                      };
                      return $tco_result;
                  };
              };
              return go(b)(Nil.value);
          };
      },
      Unfoldable10: function () {
          return unfoldable1List;
      }
  };
  var applyList = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
              };
              throw new Error("Failed pattern match at Data.List.Types (line 158, column 1 - line 160, column 48): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorList;
      }
  };
  var applicativeList = {
      pure: function (a) {
          return new Cons(a, Nil.value);
      },
      Apply0: function () {
          return applyList;
      }
  };
  var altList = {
      alt: Data_Semigroup.append(semigroupList),
      Functor0: function () {
          return functorList;
      }
  };
  var plusList = {
      empty: Nil.value,
      Alt0: function () {
          return altList;
      }
  };
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["applicativeList"] = applicativeList;
  exports["plusList"] = plusList;
  exports["foldableNonEmptyList"] = foldableNonEmptyList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var singleton = (function () {
      var $172 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function ($173) {
          return Data_List_Types.NonEmptyList($172($173));
      };
  })();
  var cons = function (y) {
      return function (v) {
          return new Data_NonEmpty.NonEmpty(y, new Data_List_Types.Cons(v.value0, v.value1));
      };
  };
  exports["singleton"] = singleton;
  exports["cons"] = cons;
})(PS);
(function(exports) {
  "use strict";

  exports.defer = function (thunk) {
    var v = null;
    return function() {
      if (thunk === undefined) return v;

      v = thunk();
      thunk = undefined; // eslint-disable-line no-param-reassign
      return v;
    };
  };

  exports.force = function (l) {
    return l();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Lazy"] = $PS["Data.Lazy"] || {};
  var exports = $PS["Data.Lazy"];
  var $foreign = $PS["Data.Lazy"];
  var functorLazy = {
      map: function (f) {
          return function (l) {
              return $foreign.defer(function (v) {
                  return f($foreign.force(l));
              });
          };
      }
  };
  exports["functorLazy"] = functorLazy;
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Lazy"] = $PS["Control.Lazy"] || {};
  var exports = $PS["Control.Lazy"];
  var defer = function (dict) {
      return dict.defer;
  };
  exports["defer"] = defer;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.List.Lazy.Types"] = $PS["Data.List.Lazy.Types"] || {};
  var exports = $PS["Data.List.Lazy.Types"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];                    
  var List = function (x) {
      return x;
  };
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var nil = List(Data_Lazy.defer(function (v) {
      return Nil.value;
  }));
  var step = (function () {
      var $225 = Data_Newtype.unwrap();
      return function ($226) {
          return Data_Lazy.force($225($226));
      };
  })();
  var lazyList = {
      defer: function (f) {
          return List(Data_Lazy.defer(function ($227) {
              return step(f($227));
          }));
      }
  };
  var cons = function (x) {
      return function (xs) {
          return List(Data_Lazy.defer(function (v) {
              return new Cons(x, xs);
          }));
      };
  };
  var foldableList = {
      foldr: function (op) {
          return function (z) {
              return function (xs) {
                  var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(cons))(nil);
                  return Data_Foldable.foldl(foldableList)(Data_Function.flip(op))(z)(rev(xs));
              };
          };
      },
      foldl: function (op) {
          var go = function ($copy_b) {
              return function ($copy_xs) {
                  var $tco_var_b = $copy_b;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(b, xs) {
                      var v = step(xs);
                      if (v instanceof Nil) {
                          $tco_done = true;
                          return b;
                      };
                      if (v instanceof Cons) {
                          $tco_var_b = op(b)(v.value0);
                          $copy_xs = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy.Types (line 128, column 7 - line 130, column 40): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_b, $copy_xs);
                  };
                  return $tco_result;
              };
          };
          return go;
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return Data_Foldable.foldl(foldableList)(function (b) {
                  return function (a) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(b)(f(a));
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      }
  };
  var unfoldable1List = {
      unfoldr1: (function () {
          var go = function (f) {
              return function (b) {
                  return Control_Lazy.defer(lazyList)(function (v) {
                      var v1 = f(b);
                      if (v1.value1 instanceof Data_Maybe.Just) {
                          return cons(v1.value0)(go(f)(v1.value1.value0));
                      };
                      if (v1.value1 instanceof Data_Maybe.Nothing) {
                          return cons(v1.value0)(nil);
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy.Types (line 152, column 28 - line 154, column 33): " + [ v1.constructor.name ]);
                  });
              };
          };
          return go;
      })()
  };
  var unfoldableList = {
      unfoldr: (function () {
          var go = function (f) {
              return function (b) {
                  return Control_Lazy.defer(lazyList)(function (v) {
                      var v1 = f(b);
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return nil;
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          return cons(v1.value0.value0)(go(f)(v1.value0.value1));
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy.Types (line 158, column 28 - line 160, column 39): " + [ v1.constructor.name ]);
                  });
              };
          };
          return go;
      })(),
      Unfoldable10: function () {
          return unfoldable1List;
      }
  };
  exports["List"] = List;
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["step"] = step;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.List.Lazy"] = $PS["Data.List.Lazy"] || {};
  var exports = $PS["Data.List.Lazy"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_List_Lazy_Types = $PS["Data.List.Lazy.Types"];
  var Data_Newtype = $PS["Data.Newtype"];
  var filter = function (p) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Lazy_Types.Nil) {
                  $tco_done = true;
                  return Data_List_Lazy_Types.Nil.value;
              };
              if (v instanceof Data_List_Lazy_Types.Cons) {
                  if (p(v.value0)) {
                      $tco_done = true;
                      return new Data_List_Lazy_Types.Cons(v.value0, filter(p)(v.value1));
                  };
                  if (Data_Boolean.otherwise) {
                      $copy_v = Data_List_Lazy_Types.step(v.value1);
                      return;
                  };
              };
              throw new Error("Failed pattern match at Data.List.Lazy (line 416, column 3 - line 416, column 15): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      var $268 = Data_Functor.map(Data_Lazy.functorLazy)(go);
      var $269 = Data_Newtype.unwrap();
      return function ($270) {
          return Data_List_Lazy_Types.List($268($269($270)));
      };
  };
  exports["filter"] = filter;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var unfoldable1Array = {
      unfoldr1: $foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd)
  };
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = {
      unfoldr: $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd),
      Unfoldable10: function () {
          return Data_Unfoldable1.unfoldable1Array;
      }
  };
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_List_Lazy = $PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = $PS["Data.List.Lazy.Types"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 591, column 18 - line 600, column 71): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 590, column 3 - line 590, column 19): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 211, column 5 - line 211, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var member = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
          };
      };
  };
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 432, column 3 - line 437, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 429, column 1 - line 429, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 468, column 5 - line 473, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 465, column 3 - line 465, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done1 = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 448, column 3 - line 448, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function ($copy_ctxs) {
              return function ($copy_tree) {
                  var $tco_var_ctxs = $copy_ctxs;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctxs, tree) {
                      if (ctxs instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return tree;
                      };
                      if (ctxs instanceof Data_List_Types.Cons) {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 525, column 9 - line 542, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 522, column 5 - line 542, column 136): " + [ ctxs.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                  };
                  return $tco_result;
              };
          };
          var removeMaxNode = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          $tco_done1 = true;
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          $tco_done1 = true;
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 554, column 5 - line 558, column 107): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          var maxNode = function ($copy_m) {
              var $tco_done2 = false;
              var $tco_result;
              function $tco_loop(m) {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      $tco_done2 = true;
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      $copy_m = m.value3;
                      return;
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      $tco_done2 = true;
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      $copy_m = m.value6;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 545, column 33 - line 549, column 45): " + [ m.constructor.name ]);
              };
              while (!$tco_done2) {
                  $tco_result = $tco_loop($copy_m);
              };
              return $tco_result;
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done3 = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done3 = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 495, column 34 - line 518, column 80): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done3) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  var filterWithKey = function (dictOrd) {
      return function (predicate) {
          var $764 = fromFoldable(dictOrd)(Data_List_Lazy_Types.foldableList);
          var $765 = Data_List_Lazy.filter(Data_Tuple.uncurry(predicate));
          var $766 = toUnfoldable(Data_List_Lazy_Types.unfoldableList);
          return function ($767) {
              return $764($765($766($767)));
          };
      };
  };
  var filter = function (dictOrd) {
      return function (predicate) {
          return filterWithKey(dictOrd)(Data_Function["const"](predicate));
      };
  };
  var filterKeys = function (dictOrd) {
      return function (predicate) {
          return filterWithKey(dictOrd)(function ($768) {
              return Data_Function["const"](predicate($768));
          });
      };
  };
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var v = f(lookup(dictOrd)(k)(m));
                  if (v instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)(v.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 563, column 15 - line 565, column 25): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var unionWith = function (dictOrd) {
      return function (f) {
          return function (m1) {
              return function (m2) {
                  var go = function (m) {
                      return function (v) {
                          return alter(dictOrd)((function () {
                              var $777 = Data_Maybe.maybe(v.value1)(f(v.value1));
                              return function ($778) {
                                  return Data_Maybe.Just.create($777($778));
                              };
                          })())(v.value0)(m);
                      };
                  };
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toUnfoldable(Data_List_Types.unfoldableList)(m1));
              };
          };
      };
  };
  var union = function (dictOrd) {
      return unionWith(dictOrd)(Data_Function["const"]);
  };
  exports["empty"] = empty;
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["member"] = member;
  exports["alter"] = alter;
  exports["union"] = union;
  exports["filterKeys"] = filterKeys;
})(PS);
(function(exports) {
  "use strict";

  exports.singleton = function (c) {
    return c;
  };

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._indexOfStartingAt = function (just) {
    return function (nothing) {
      return function (x) {
        return function (startAt) {
          return function (s) {
            if (startAt < 0 || startAt > s.length) return nothing;
            var i = s.indexOf(x, startAt);
            return i === -1 ? nothing : just(i);
          };
        };
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports.splitAt = function (i) {
    return function (s) {
      return { before: s.substring(0, i), after: s.substring(i) };
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];
  var stripPrefix = function (v) {
      return function (str) {
          var v1 = $foreign.splitAt($foreign.length(v))(str);
          var $15 = v1.before === v;
          if ($15) {
              return new Data_Maybe.Just(v1.after);
          };
          return Data_Maybe.Nothing.value;
      };
  };                                                                                           
  var indexOf$prime = $foreign["_indexOfStartingAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var dropRight = function (i) {
      return function (s) {
          return $foreign.take($foreign.length(s) - i | 0)(s);
      };
  };
  var charAt = $foreign["_charAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["stripPrefix"] = stripPrefix;
  exports["charAt"] = charAt;
  exports["indexOf'"] = indexOf$prime;
  exports["dropRight"] = dropRight;
  exports["singleton"] = $foreign.singleton;
  exports["length"] = $foreign.length;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Void"] = $PS["Data.Void"] || {};
  var exports = $PS["Data.Void"];
  var absurd = function (a) {
      var spin = function ($copy_v) {
          var $tco_result;
          function $tco_loop(v) {
              $copy_v = v;
              return;
          };
          while (!false) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return spin(a);
  };
  exports["absurd"] = absurd;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";               

  exports.isFinite = isFinite;

  exports.fromStringImpl = function(str, isFinite, just, nothing) {
    var num = parseFloat(str);
    if (isFinite(num)) {
      return just(num);
    } else {
      return nothing;
    }
  };
})(PS["Data.Number"] = PS["Data.Number"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Number"] = $PS["Data.Number"] || {};
  var exports = $PS["Data.Number"];
  var $foreign = $PS["Data.Number"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var fromString = function (str) {
      return $foreign.fromStringImpl(str, $foreign["isFinite"], Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["fromString"] = fromString;
  exports["isFinite"] = $foreign["isFinite"];
})(PS);
(function(exports) {
  "use strict";

  exports.ceil = Math.ceil;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["ceil"] = $foreign.ceil;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Number = $PS["Data.Number"];
  var $$Math = $PS["Math"];
  var hexadecimal = 16;
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (!Data_Number["isFinite"](x)) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var ceil = function ($25) {
      return unsafeClamp($$Math.ceil($25));
  };
  exports["ceil"] = ceil;
  exports["fromString"] = fromString;
  exports["hexadecimal"] = hexadecimal;
  exports["fromStringAs"] = fromStringAs;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._countPrefix = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasStringIterator) {
        return function (pred) {
          return function (str) {
            var iter = str[Symbol.iterator]();
            for (var cpCount = 0; ; ++cpCount) {
              var o = iter.next();
              if (o.done) return cpCount;
              var cp = unsafeCodePointAt0(o.value);
              if (!pred(cp)) return cpCount;
            }
          };
        };
      }
      return fallback;
    };
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $55 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($55) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = {
      succ: defaultSucc(charToEnum)($foreign.toCharCode),
      pred: defaultPred(charToEnum)($foreign.toCharCode),
      Ord0: function () {
          return Data_Ord.ordChar;
      }
  };
  var boundedEnumChar = {
      cardinality: $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0,
      toEnum: charToEnum,
      fromEnum: $foreign.toCharCode,
      Bounded0: function () {
          return Data_Bounded.boundedChar;
      },
      Enum1: function () {
          return enumChar;
      }
  };
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var CodePoint = function (x) {
      return x;
  };
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  };
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var fromCharCode = (function () {
      var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
      return function ($54) {
          return Data_String_CodeUnits.singleton($53($54));
      };
  })();
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };                                                                          
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var eqCodePoint = {
      eq: function (x) {
          return function (y) {
              return x === y;
          };
      }
  };
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  var countTail = function ($copy_p) {
      return function ($copy_s) {
          return function ($copy_accum) {
              var $tco_var_p = $copy_p;
              var $tco_var_s = $copy_s;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(p, s, accum) {
                  var v = uncons(s);
                  if (v instanceof Data_Maybe.Just) {
                      var $39 = p(v.value0.head);
                      if ($39) {
                          $tco_var_p = p;
                          $tco_var_s = v.value0.tail;
                          $copy_accum = accum + 1 | 0;
                          return;
                      };
                      $tco_done = true;
                      return accum;
                  };
                  $tco_done = true;
                  return accum;
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_p, $tco_var_s, $copy_accum);
              };
              return $tco_result;
          };
      };
  };
  var countFallback = function (p) {
      return function (s) {
          return countTail(p)(s)(0);
      };
  };
  var countPrefix = $foreign["_countPrefix"](countFallback)(unsafeCodePointAt0);
  var takeWhile = function (p) {
      return function (s) {
          return take(countPrefix(p)(s))(s);
      };
  };
  var codePointFromChar = (function () {
      var $55 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
      return function ($56) {
          return CodePoint($55($56));
      };
  })();
  exports["codePointFromChar"] = codePointFromChar;
  exports["length"] = length;
  exports["take"] = take;
  exports["takeWhile"] = takeWhile;
  exports["eqCodePoint"] = eqCodePoint;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Dodo.Internal"] = $PS["Dodo.Internal"] || {};
  var exports = $PS["Dodo.Internal"];                    
  var Append = (function () {
      function Append(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Append.create = function (value0) {
          return function (value1) {
              return new Append(value0, value1);
          };
      };
      return Append;
  })();
  var Indent = (function () {
      function Indent(value0) {
          this.value0 = value0;
      };
      Indent.create = function (value0) {
          return new Indent(value0);
      };
      return Indent;
  })();
  var Align = (function () {
      function Align(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Align.create = function (value0) {
          return function (value1) {
              return new Align(value0, value1);
          };
      };
      return Align;
  })();
  var Annotate = (function () {
      function Annotate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Annotate.create = function (value0) {
          return function (value1) {
              return new Annotate(value0, value1);
          };
      };
      return Annotate;
  })();
  var FlexSelect = (function () {
      function FlexSelect(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FlexSelect.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FlexSelect(value0, value1, value2);
              };
          };
      };
      return FlexSelect;
  })();
  var FlexAlt = (function () {
      function FlexAlt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FlexAlt.create = function (value0) {
          return function (value1) {
              return new FlexAlt(value0, value1);
          };
      };
      return FlexAlt;
  })();
  var WithPosition = (function () {
      function WithPosition(value0) {
          this.value0 = value0;
      };
      WithPosition.create = function (value0) {
          return new WithPosition(value0);
      };
      return WithPosition;
  })();
  var Local = (function () {
      function Local(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Local.create = function (value0) {
          return function (value1) {
              return new Local(value0, value1);
          };
      };
      return Local;
  })();
  var Text = (function () {
      function Text(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Text.create = function (value0) {
          return function (value1) {
              return new Text(value0, value1);
          };
      };
      return Text;
  })();
  var Break = (function () {
      function Break() {

      };
      Break.value = new Break();
      return Break;
  })();
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var notEmpty = function (f) {
      return function (v) {
          if (v instanceof Empty) {
              return Empty.value;
          };
          return f(v);
      };
  };
  var isEmpty = function (v) {
      if (v instanceof Empty) {
          return true;
      };
      return false;
  };
  var bothNotEmpty = function (f) {
      return function (v) {
          return function (v1) {
              if (v instanceof Empty) {
                  return v1;
              };
              if (v1 instanceof Empty) {
                  return v;
              };
              return f(v)(v1);
          };
      };
  };
  var semigroupDoc = {
      append: bothNotEmpty(function (v) {
          return function (v1) {
              if (v instanceof Text && v1 instanceof Text) {
                  return new Text(v.value0 + v1.value0 | 0, v.value1 + v1.value1);
              };
              return new Append(v, v1);
          };
      })
  };
  var monoidDoc = {
      mempty: Empty.value,
      Semigroup0: function () {
          return semigroupDoc;
      }
  };
  exports["Append"] = Append;
  exports["Indent"] = Indent;
  exports["Align"] = Align;
  exports["Annotate"] = Annotate;
  exports["FlexSelect"] = FlexSelect;
  exports["FlexAlt"] = FlexAlt;
  exports["WithPosition"] = WithPosition;
  exports["Local"] = Local;
  exports["Text"] = Text;
  exports["Break"] = Break;
  exports["Empty"] = Empty;
  exports["bothNotEmpty"] = bothNotEmpty;
  exports["notEmpty"] = notEmpty;
  exports["isEmpty"] = isEmpty;
  exports["semigroupDoc"] = semigroupDoc;
  exports["monoidDoc"] = monoidDoc;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Dodo.Internal.Buffer"] = $PS["Dodo.Internal.Buffer"] || {};
  var exports = $PS["Dodo.Internal.Buffer"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_List_Types = $PS["Data.List.Types"];
  var $$new = function (buffer) {
      return {
          buffer: buffer,
          queue: Data_List_Types.Nil.value
      };
  };
  var modify = function (f) {
      return function (v) {
          if (v.queue instanceof Data_List_Types.Cons) {
              return {
                  buffer: v.buffer,
                  queue: new Data_List_Types.Cons(new Data_List_Types.Cons(f, v.queue.value0), v.queue.value1)
              };
          };
          return {
              buffer: f(v.buffer),
              queue: v.queue
          };
      };
  };
  var commit = function (v) {
      return {
          buffer: Data_Foldable.foldr(Data_List_Types.foldableList)(Data_Function.flip(Data_Foldable.foldr(Data_List_Types.foldableList)(Data_Function.apply)))(v.buffer)(v.queue),
          queue: Data_List_Types.Nil.value
      };
  };
  var get = function ($20) {
      return (function (v) {
          return v.buffer;
      })(commit($20));
  };
  var branch = function (v) {
      return {
          buffer: v.buffer,
          queue: new Data_List_Types.Cons(Data_List_Types.Nil.value, v.queue)
      };
  };
  exports["branch"] = branch;
  exports["commit"] = commit;
  exports["modify"] = modify;
  exports["get"] = get;
  exports["new"] = $$new;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Dodo"] = $PS["Dodo"] || {};
  var exports = $PS["Dodo"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Int = $PS["Data.Int"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Dodo_Internal = $PS["Dodo.Internal"];
  var Dodo_Internal_Buffer = $PS["Dodo.Internal.Buffer"];
  var Doc = (function () {
      function Doc(value0) {
          this.value0 = value0;
      };
      Doc.create = function (value0) {
          return new Doc(value0);
      };
      return Doc;
  })();
  var Dedent = (function () {
      function Dedent(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Dedent.create = function (value0) {
          return function (value1) {
              return new Dedent(value0, value1);
          };
      };
      return Dedent;
  })();
  var LeaveAnnotation = (function () {
      function LeaveAnnotation(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      LeaveAnnotation.create = function (value0) {
          return function (value1) {
              return new LeaveAnnotation(value0, value1);
          };
      };
      return LeaveAnnotation;
  })();
  var LeaveFlexGroup = (function () {
      function LeaveFlexGroup(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      LeaveFlexGroup.create = function (value0) {
          return function (value1) {
              return new LeaveFlexGroup(value0, value1);
          };
      };
      return LeaveFlexGroup;
  })();
  var LeaveLocal = (function () {
      function LeaveLocal(value0) {
          this.value0 = value0;
      };
      LeaveLocal.create = function (value0) {
          return new LeaveLocal(value0);
      };
      return LeaveLocal;
  })();
  var NoFlexGroup = (function () {
      function NoFlexGroup() {

      };
      NoFlexGroup.value = new NoFlexGroup();
      return NoFlexGroup;
  })();
  var FlexGroupPending = (function () {
      function FlexGroupPending() {

      };
      FlexGroupPending.value = new FlexGroupPending();
      return FlexGroupPending;
  })();
  var FlexGroupReset = (function () {
      function FlexGroupReset(value0) {
          this.value0 = value0;
      };
      FlexGroupReset.create = function (value0) {
          return new FlexGroupReset(value0);
      };
      return FlexGroupReset;
  })();
  var withPosition = Dodo_Internal.WithPosition.create;
  var text = function (v) {
      if (v === "") {
          return Dodo_Internal.Empty.value;
      };
      return new Dodo_Internal.Text(Data_String_CodePoints.length(v), v);
  };
  var storeState = function (stack) {
      return function (v) {
          return {
              position: v.position,
              buffer: v.buffer,
              annotations: v.annotations,
              indentSpaces: v.indentSpaces,
              stack: stack,
              options: v.options
          };
      };
  };
  var space = text(" ");
  var resetState = function (v) {
      return {
          position: v.position,
          buffer: v.buffer,
          annotations: v.annotations,
          indentSpaces: v.indentSpaces,
          flexGroup: NoFlexGroup.value,
          options: v.options
      };
  };
  var plainText = {
      emptyBuffer: "",
      writeText: function (v) {
          return function (str) {
              return function (buff) {
                  return buff + str;
              };
          };
      },
      writeIndent: function (v) {
          return function (str) {
              return function (buff) {
                  return buff + str;
              };
          };
      },
      writeBreak: function (buff) {
          return buff + "\x0a";
      },
      enterAnnotation: function (v) {
          return function (v1) {
              return function (buff) {
                  return buff;
              };
          };
      },
      leaveAnnotation: function (v) {
          return function (v1) {
              return function (buff) {
                  return buff;
              };
          };
      },
      flushBuffer: function (buff) {
          return buff;
      }
  };
  var locally = Dodo_Internal.Local.create;
  var indent = Dodo_Internal.notEmpty(Dodo_Internal.Indent.create);
  var flexSelect = function (doc1) {
      return function (doc2) {
          return function (doc3) {
              if (Dodo_Internal.isEmpty(doc1)) {
                  return doc2;
              };
              if (Data_Boolean.otherwise) {
                  return new Dodo_Internal.FlexSelect(doc1, doc2, doc3);
              };
              throw new Error("Failed pattern match at Dodo (line 87, column 1 - line 87, column 57): " + [ doc1.constructor.name, doc2.constructor.name, doc3.constructor.name ]);
          };
      };
  };
  var flexGroup = Dodo_Internal.notEmpty(function (v) {
      if (v instanceof Dodo_Internal.FlexSelect && (Dodo_Internal.isEmpty(v.value1) && Dodo_Internal.isEmpty(v.value2))) {
          return v;
      };
      return new Dodo_Internal.FlexSelect(v, Dodo_Internal.Empty.value, Dodo_Internal.Empty.value);
  });
  var flexAlt = Dodo_Internal.FlexAlt.create;
  var calcRibbonWidth = function (v) {
      return function (n) {
          return Data_Ord.max(Data_Ord.ordInt)(0)(Data_Int.ceil(v.ribbonRatio * Data_Int.toNumber(v.pageWidth - n | 0)));
      };
  };
  var storeOptions = function (prevIndent) {
      return function (localOptions) {
          return function (state) {
              var newOptions = {
                  indentUnit: localOptions.indentUnit,
                  indentWidth: localOptions.indentWidth,
                  pageWidth: localOptions.pageWidth,
                  ribbonRatio: localOptions.ribbonRatio
              };
              return {
                  position: {
                      line: state.position.line,
                      column: state.position.column,
                      indent: state.position.indent,
                      nextIndent: localOptions.indent,
                      pageWidth: newOptions.pageWidth,
                      ribbonWidth: calcRibbonWidth(newOptions)(prevIndent)
                  },
                  buffer: state.buffer,
                  annotations: state.annotations,
                  indentSpaces: localOptions.indentSpaces,
                  flexGroup: state.flexGroup,
                  options: newOptions
              };
          };
      };
  };
  var print = function (v) {
      return function (opts) {
          var initOptions = {
              pageWidth: opts.pageWidth,
              ribbonRatio: Data_Ord.max(Data_Ord.ordNumber)(0.0)(Data_Ord.min(Data_Ord.ordNumber)(1.0)(opts.ribbonRatio)),
              indentUnit: opts.indentUnit,
              indentWidth: opts.indentWidth
          };
          var initState = {
              position: {
                  line: 0,
                  column: 0,
                  indent: 0,
                  nextIndent: 0,
                  pageWidth: initOptions.pageWidth,
                  ribbonWidth: calcRibbonWidth(initOptions)(0)
              },
              buffer: Dodo_Internal_Buffer["new"](v.emptyBuffer),
              annotations: Data_List_Types.Nil.value,
              indentSpaces: "",
              flexGroup: NoFlexGroup.value,
              options: initOptions
          };
          var go = function ($copy_stack) {
              return function ($copy_state) {
                  var $tco_var_stack = $copy_stack;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(stack, state) {
                      if (stack instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return v.flushBuffer(Dodo_Internal_Buffer.get(state.buffer));
                      };
                      if (stack instanceof Data_List_Types.Cons) {
                          if (stack.value0 instanceof Doc) {
                              if (stack.value0.value0 instanceof Dodo_Internal.Append) {
                                  $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value0), new Data_List_Types.Cons(new Doc(stack.value0.value0.value1), stack.value1));
                                  $copy_state = state;
                                  return;
                              };
                              if (stack.value0.value0 instanceof Dodo_Internal.Text) {
                                  if (state.position.column === 0 && state.position.indent > 0) {
                                      $tco_var_stack = stack;
                                      $copy_state = {
                                          position: {
                                              line: state.position.line,
                                              column: state.position.indent,
                                              indent: state.position.indent,
                                              nextIndent: state.position.nextIndent,
                                              pageWidth: state.position.pageWidth,
                                              ribbonWidth: state.position.ribbonWidth
                                          },
                                          buffer: Dodo_Internal_Buffer.modify(v.writeIndent(state.position.indent)(state.indentSpaces))(state.buffer),
                                          annotations: state.annotations,
                                          indentSpaces: state.indentSpaces,
                                          flexGroup: state.flexGroup,
                                          options: state.options
                                      };
                                      return;
                                  };
                                  if ((state.position.column + stack.value0.value0.value0 | 0) <= (state.position.indent + state.position.ribbonWidth | 0)) {
                                      $tco_var_stack = stack.value1;
                                      $copy_state = {
                                          position: {
                                              line: state.position.line,
                                              column: state.position.column + stack.value0.value0.value0 | 0,
                                              indent: state.position.indent,
                                              nextIndent: state.position.nextIndent,
                                              pageWidth: state.position.pageWidth,
                                              ribbonWidth: state.position.ribbonWidth
                                          },
                                          buffer: Dodo_Internal_Buffer.modify(v.writeText(stack.value0.value0.value0)(stack.value0.value0.value1))(state.buffer),
                                          annotations: state.annotations,
                                          indentSpaces: state.indentSpaces,
                                          flexGroup: state.flexGroup,
                                          options: state.options
                                      };
                                      return;
                                  };
                                  if (Data_Boolean.otherwise) {
                                      if (state.flexGroup instanceof FlexGroupReset) {
                                          $tco_var_stack = state.flexGroup.value0.stack;
                                          $copy_state = resetState(state.flexGroup.value0);
                                          return;
                                      };
                                      $tco_var_stack = stack.value1;
                                      $copy_state = {
                                          position: {
                                              line: state.position.line,
                                              column: state.position.column + stack.value0.value0.value0 | 0,
                                              indent: state.position.indent,
                                              nextIndent: state.position.nextIndent,
                                              pageWidth: state.position.pageWidth,
                                              ribbonWidth: state.position.ribbonWidth
                                          },
                                          buffer: Dodo_Internal_Buffer.modify(v.writeText(stack.value0.value0.value0)(stack.value0.value0.value1))(state.buffer),
                                          annotations: state.annotations,
                                          indentSpaces: state.indentSpaces,
                                          flexGroup: NoFlexGroup.value,
                                          options: state.options
                                      };
                                      return;
                                  };
                              };
                              if (stack.value0.value0 instanceof Dodo_Internal.Break) {
                                  if (state.flexGroup instanceof FlexGroupReset) {
                                      $tco_var_stack = state.flexGroup.value0.stack;
                                      $copy_state = resetState(state.flexGroup.value0);
                                      return;
                                  };
                                  $tco_var_stack = stack.value1;
                                  $copy_state = {
                                      position: {
                                          line: state.position.line + 1 | 0,
                                          column: 0,
                                          indent: state.position.nextIndent,
                                          nextIndent: state.position.nextIndent,
                                          pageWidth: state.position.pageWidth,
                                          ribbonWidth: calcRibbonWidth(state.options)(state.position.nextIndent)
                                      },
                                      buffer: Dodo_Internal_Buffer.modify(v.writeBreak)(state.buffer),
                                      annotations: state.annotations,
                                      indentSpaces: state.indentSpaces,
                                      flexGroup: NoFlexGroup.value,
                                      options: state.options
                                  };
                                  return;
                              };
                              if (stack.value0.value0 instanceof Dodo_Internal.Indent) {
                                  if (state.position.column === 0) {
                                      $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value0), new Data_List_Types.Cons(new Dedent(state.indentSpaces, state.position.nextIndent), stack.value1));
                                      $copy_state = {
                                          position: {
                                              line: state.position.line,
                                              column: state.position.column,
                                              indent: state.position.nextIndent + opts.indentWidth | 0,
                                              nextIndent: state.position.nextIndent + opts.indentWidth | 0,
                                              pageWidth: state.position.pageWidth,
                                              ribbonWidth: calcRibbonWidth(state.options)(state.position.nextIndent + opts.indentWidth | 0)
                                          },
                                          buffer: state.buffer,
                                          annotations: state.annotations,
                                          indentSpaces: state.indentSpaces + opts.indentUnit,
                                          flexGroup: state.flexGroup,
                                          options: state.options
                                      };
                                      return;
                                  };
                                  if (Data_Boolean.otherwise) {
                                      $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value0), new Data_List_Types.Cons(new Dedent(state.indentSpaces, state.position.nextIndent), stack.value1));
                                      $copy_state = {
                                          position: {
                                              line: state.position.line,
                                              column: state.position.column,
                                              indent: state.position.indent,
                                              nextIndent: state.position.nextIndent + opts.indentWidth | 0,
                                              pageWidth: state.position.pageWidth,
                                              ribbonWidth: state.position.ribbonWidth
                                          },
                                          buffer: state.buffer,
                                          annotations: state.annotations,
                                          indentSpaces: state.indentSpaces + opts.indentUnit,
                                          flexGroup: state.flexGroup,
                                          options: state.options
                                      };
                                      return;
                                  };
                              };
                              if (stack.value0.value0 instanceof Dodo_Internal.Align) {
                                  if (state.position.column === 0) {
                                      $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value1), new Data_List_Types.Cons(new Dedent(state.indentSpaces, state.position.nextIndent), stack.value1));
                                      $copy_state = {
                                          position: {
                                              line: state.position.line,
                                              column: state.position.column,
                                              indent: state.position.nextIndent + stack.value0.value0.value0 | 0,
                                              nextIndent: state.position.nextIndent + stack.value0.value0.value0 | 0,
                                              pageWidth: state.position.pageWidth,
                                              ribbonWidth: calcRibbonWidth(state.options)(state.position.nextIndent + stack.value0.value0.value0 | 0)
                                          },
                                          buffer: state.buffer,
                                          annotations: state.annotations,
                                          indentSpaces: state.indentSpaces + Data_Monoid.power(Data_Monoid.monoidString)(" ")(stack.value0.value0.value0),
                                          flexGroup: state.flexGroup,
                                          options: state.options
                                      };
                                      return;
                                  };
                                  if (Data_Boolean.otherwise) {
                                      $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value1), new Data_List_Types.Cons(new Dedent(state.indentSpaces, state.position.nextIndent), stack.value1));
                                      $copy_state = {
                                          position: {
                                              line: state.position.line,
                                              column: state.position.column,
                                              indent: state.position.indent,
                                              nextIndent: state.position.nextIndent + stack.value0.value0.value0 | 0,
                                              pageWidth: state.position.pageWidth,
                                              ribbonWidth: state.position.ribbonWidth
                                          },
                                          buffer: state.buffer,
                                          annotations: state.annotations,
                                          indentSpaces: state.indentSpaces + Data_Monoid.power(Data_Monoid.monoidString)(" ")(stack.value0.value0.value0),
                                          flexGroup: state.flexGroup,
                                          options: state.options
                                      };
                                      return;
                                  };
                              };
                              if (stack.value0.value0 instanceof Dodo_Internal.FlexSelect) {
                                  if (state.flexGroup instanceof NoFlexGroup) {
                                      $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value0), new Data_List_Types.Cons(new LeaveFlexGroup(stack.value0.value0.value1, stack.value0.value0.value2), stack.value1));
                                      $copy_state = {
                                          position: state.position,
                                          buffer: state.buffer,
                                          annotations: state.annotations,
                                          indentSpaces: state.indentSpaces,
                                          flexGroup: FlexGroupPending.value,
                                          options: state.options
                                      };
                                      return;
                                  };
                                  if (state.flexGroup instanceof FlexGroupPending && state.position.ribbonWidth > 0) {
                                      $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value0), new Data_List_Types.Cons(new Doc(stack.value0.value0.value1), stack.value1));
                                      $copy_state = {
                                          position: state.position,
                                          buffer: Dodo_Internal_Buffer.branch(state.buffer),
                                          annotations: state.annotations,
                                          indentSpaces: state.indentSpaces,
                                          flexGroup: FlexGroupReset.create(storeState(stack)(state)),
                                          options: state.options
                                      };
                                      return;
                                  };
                                  $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value0), new Data_List_Types.Cons(new Doc(stack.value0.value0.value1), stack.value1));
                                  $copy_state = state;
                                  return;
                              };
                              if (stack.value0.value0 instanceof Dodo_Internal.FlexAlt) {
                                  if (state.flexGroup instanceof FlexGroupReset) {
                                      $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value0), stack.value1);
                                      $copy_state = state;
                                      return;
                                  };
                                  if (state.flexGroup instanceof FlexGroupPending && state.position.ribbonWidth > 0) {
                                      $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value0), stack.value1);
                                      $copy_state = {
                                          position: state.position,
                                          buffer: Dodo_Internal_Buffer.branch(state.buffer),
                                          annotations: state.annotations,
                                          indentSpaces: state.indentSpaces,
                                          flexGroup: FlexGroupReset.create(storeState(new Data_List_Types.Cons(new Doc(stack.value0.value0.value1), stack.value1))(state)),
                                          options: state.options
                                      };
                                      return;
                                  };
                                  $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value1), stack.value1);
                                  $copy_state = state;
                                  return;
                              };
                              if (stack.value0.value0 instanceof Dodo_Internal.WithPosition) {
                                  if (state.position.column === 0 && state.position.nextIndent > 0) {
                                      $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value0({
                                          line: state.position.line,
                                          column: state.position.nextIndent,
                                          indent: state.position.indent,
                                          nextIndent: state.position.nextIndent,
                                          pageWidth: state.position.pageWidth,
                                          ribbonWidth: state.position.ribbonWidth
                                      })), stack.value1);
                                      $copy_state = state;
                                      return;
                                  };
                                  if (Data_Boolean.otherwise) {
                                      $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value0(state.position)), stack.value1);
                                      $copy_state = state;
                                      return;
                                  };
                              };
                              if (stack.value0.value0 instanceof Dodo_Internal.Annotate) {
                                  $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value1), new Data_List_Types.Cons(new LeaveAnnotation(stack.value0.value0.value0, state.annotations), stack.value1));
                                  $copy_state = {
                                      position: state.position,
                                      buffer: Dodo_Internal_Buffer.modify(v.enterAnnotation(stack.value0.value0.value0)(state.annotations))(state.buffer),
                                      annotations: new Data_List_Types.Cons(stack.value0.value0.value0, state.annotations),
                                      indentSpaces: state.indentSpaces,
                                      flexGroup: state.flexGroup,
                                      options: state.options
                                  };
                                  return;
                              };
                              if (stack.value0.value0 instanceof Dodo_Internal.Local) {
                                  var prevOptions = {
                                      indent: state.position.indent,
                                      indentSpaces: state.indentSpaces,
                                      indentUnit: state.options.indentUnit,
                                      indentWidth: state.options.indentWidth,
                                      pageWidth: state.options.pageWidth,
                                      ribbonRatio: state.options.ribbonRatio
                                  };
                                  var localOptions = stack.value0.value0.value0(prevOptions);
                                  $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value1), new Data_List_Types.Cons(new LeaveLocal(prevOptions), stack.value1));
                                  $copy_state = storeOptions(state.position.indent)(localOptions)(state);
                                  return;
                              };
                              if (stack.value0.value0 instanceof Dodo_Internal.Empty) {
                                  $tco_var_stack = stack.value1;
                                  $copy_state = state;
                                  return;
                              };
                              throw new Error("Failed pattern match at Dodo (line 357, column 18 - line 469, column 23): " + [ stack.value0.value0.constructor.name ]);
                          };
                          if (stack.value0 instanceof LeaveFlexGroup) {
                              if (state.flexGroup instanceof NoFlexGroup) {
                                  $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value1), stack.value1);
                                  $copy_state = {
                                      position: state.position,
                                      buffer: Dodo_Internal_Buffer.commit(state.buffer),
                                      annotations: state.annotations,
                                      indentSpaces: state.indentSpaces,
                                      flexGroup: state.flexGroup,
                                      options: state.options
                                  };
                                  return;
                              };
                              $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0), stack.value1);
                              $copy_state = {
                                  position: state.position,
                                  buffer: Dodo_Internal_Buffer.commit(state.buffer),
                                  annotations: state.annotations,
                                  indentSpaces: state.indentSpaces,
                                  flexGroup: NoFlexGroup.value,
                                  options: state.options
                              };
                              return;
                          };
                          if (stack.value0 instanceof Dedent) {
                              $tco_var_stack = stack.value1;
                              $copy_state = {
                                  position: {
                                      line: state.position.line,
                                      column: state.position.column,
                                      indent: state.position.indent,
                                      nextIndent: stack.value0.value1,
                                      pageWidth: state.position.pageWidth,
                                      ribbonWidth: state.position.ribbonWidth
                                  },
                                  buffer: state.buffer,
                                  annotations: state.annotations,
                                  indentSpaces: stack.value0.value0,
                                  flexGroup: state.flexGroup,
                                  options: state.options
                              };
                              return;
                          };
                          if (stack.value0 instanceof LeaveAnnotation) {
                              $tco_var_stack = stack.value1;
                              $copy_state = {
                                  position: state.position,
                                  buffer: Dodo_Internal_Buffer.modify(v.leaveAnnotation(stack.value0.value0)(stack.value0.value1))(state.buffer),
                                  annotations: stack.value0.value1,
                                  indentSpaces: state.indentSpaces,
                                  flexGroup: state.flexGroup,
                                  options: state.options
                              };
                              return;
                          };
                          if (stack.value0 instanceof LeaveLocal) {
                              $tco_var_stack = stack.value1;
                              $copy_state = storeOptions(state.position.indent)(stack.value0.value0)(state);
                              return;
                          };
                          throw new Error("Failed pattern match at Dodo (line 356, column 18 - line 491, column 70): " + [ stack.value0.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Dodo (line 353, column 20 - line 491, column 70): " + [ stack.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_stack, $copy_state);
                  };
                  return $tco_result;
              };
          };
          var $108 = Data_Function.flip(go)(initState);
          var $109 = Control_Applicative.pure(Data_List_Types.applicativeList);
          return function ($110) {
              return $108($109(Doc.create($110)));
          };
      };
  };
  var $$break = Dodo_Internal.Break.value;
  var softBreak = flexAlt(Data_Monoid.mempty(Dodo_Internal.monoidDoc))($$break);
  var spaceBreak = flexAlt(space)($$break);
  var appendBreak = Dodo_Internal.bothNotEmpty(function (a) {
      return function (b) {
          return Data_Semigroup.append(Dodo_Internal.semigroupDoc)(a)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)($$break)(b));
      };
  });
  var lines = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(appendBreak)(Dodo_Internal.Empty.value);
  };
  var align = function (n) {
      return function (doc) {
          if (n > 0) {
              return Dodo_Internal.notEmpty(Dodo_Internal.Align.create(n))(doc);
          };
          if (Data_Boolean.otherwise) {
              return doc;
          };
          throw new Error("Failed pattern match at Dodo (line 62, column 1 - line 62, column 41): " + [ n.constructor.name, doc.constructor.name ]);
      };
  };
  var alignCurrentColumn = Dodo_Internal.notEmpty(function (doc) {
      return withPosition(function (pos) {
          return align(pos.column - pos.nextIndent | 0)(doc);
      });
  });
  exports["indent"] = indent;
  exports["align"] = align;
  exports["alignCurrentColumn"] = alignCurrentColumn;
  exports["withPosition"] = withPosition;
  exports["text"] = text;
  exports["break"] = $$break;
  exports["spaceBreak"] = spaceBreak;
  exports["softBreak"] = softBreak;
  exports["space"] = space;
  exports["lines"] = lines;
  exports["flexAlt"] = flexAlt;
  exports["flexGroup"] = flexGroup;
  exports["flexSelect"] = flexSelect;
  exports["locally"] = locally;
  exports["print"] = print;
  exports["plainText"] = plainText;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function (dictPartial) {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["PureScript.CST.Types"] = $PS["PureScript.CST.Types"] || {};
  var exports = $PS["PureScript.CST.Types"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ord = $PS["Data.Ord"];                
  var ASCII = (function () {
      function ASCII() {

      };
      ASCII.value = new ASCII();
      return ASCII;
  })();
  var Unicode = (function () {
      function Unicode() {

      };
      Unicode.value = new Unicode();
      return Unicode;
  })();
  var Nominal = (function () {
      function Nominal() {

      };
      Nominal.value = new Nominal();
      return Nominal;
  })();
  var Representational = (function () {
      function Representational() {

      };
      Representational.value = new Representational();
      return Representational;
  })();
  var Phantom = (function () {
      function Phantom() {

      };
      Phantom.value = new Phantom();
      return Phantom;
  })();
  var ModuleName = function (x) {
      return x;
  };
  var LF = (function () {
      function LF() {

      };
      LF.value = new LF();
      return LF;
  })();
  var CRLF = (function () {
      function CRLF() {

      };
      CRLF.value = new CRLF();
      return CRLF;
  })();
  var SmallInt = (function () {
      function SmallInt(value0) {
          this.value0 = value0;
      };
      SmallInt.create = function (value0) {
          return new SmallInt(value0);
      };
      return SmallInt;
  })();
  var BigInt = (function () {
      function BigInt(value0) {
          this.value0 = value0;
      };
      BigInt.create = function (value0) {
          return new BigInt(value0);
      };
      return BigInt;
  })();
  var BigHex = (function () {
      function BigHex(value0) {
          this.value0 = value0;
      };
      BigHex.create = function (value0) {
          return new BigHex(value0);
      };
      return BigHex;
  })();
  var TokLeftParen = (function () {
      function TokLeftParen() {

      };
      TokLeftParen.value = new TokLeftParen();
      return TokLeftParen;
  })();
  var TokRightParen = (function () {
      function TokRightParen() {

      };
      TokRightParen.value = new TokRightParen();
      return TokRightParen;
  })();
  var TokLeftBrace = (function () {
      function TokLeftBrace() {

      };
      TokLeftBrace.value = new TokLeftBrace();
      return TokLeftBrace;
  })();
  var TokRightBrace = (function () {
      function TokRightBrace() {

      };
      TokRightBrace.value = new TokRightBrace();
      return TokRightBrace;
  })();
  var TokLeftSquare = (function () {
      function TokLeftSquare() {

      };
      TokLeftSquare.value = new TokLeftSquare();
      return TokLeftSquare;
  })();
  var TokRightSquare = (function () {
      function TokRightSquare() {

      };
      TokRightSquare.value = new TokRightSquare();
      return TokRightSquare;
  })();
  var TokLeftArrow = (function () {
      function TokLeftArrow(value0) {
          this.value0 = value0;
      };
      TokLeftArrow.create = function (value0) {
          return new TokLeftArrow(value0);
      };
      return TokLeftArrow;
  })();
  var TokRightArrow = (function () {
      function TokRightArrow(value0) {
          this.value0 = value0;
      };
      TokRightArrow.create = function (value0) {
          return new TokRightArrow(value0);
      };
      return TokRightArrow;
  })();
  var TokRightFatArrow = (function () {
      function TokRightFatArrow(value0) {
          this.value0 = value0;
      };
      TokRightFatArrow.create = function (value0) {
          return new TokRightFatArrow(value0);
      };
      return TokRightFatArrow;
  })();
  var TokDoubleColon = (function () {
      function TokDoubleColon(value0) {
          this.value0 = value0;
      };
      TokDoubleColon.create = function (value0) {
          return new TokDoubleColon(value0);
      };
      return TokDoubleColon;
  })();
  var TokForall = (function () {
      function TokForall(value0) {
          this.value0 = value0;
      };
      TokForall.create = function (value0) {
          return new TokForall(value0);
      };
      return TokForall;
  })();
  var TokEquals = (function () {
      function TokEquals() {

      };
      TokEquals.value = new TokEquals();
      return TokEquals;
  })();
  var TokPipe = (function () {
      function TokPipe() {

      };
      TokPipe.value = new TokPipe();
      return TokPipe;
  })();
  var TokTick = (function () {
      function TokTick() {

      };
      TokTick.value = new TokTick();
      return TokTick;
  })();
  var TokDot = (function () {
      function TokDot() {

      };
      TokDot.value = new TokDot();
      return TokDot;
  })();
  var TokComma = (function () {
      function TokComma() {

      };
      TokComma.value = new TokComma();
      return TokComma;
  })();
  var TokUnderscore = (function () {
      function TokUnderscore() {

      };
      TokUnderscore.value = new TokUnderscore();
      return TokUnderscore;
  })();
  var TokBackslash = (function () {
      function TokBackslash() {

      };
      TokBackslash.value = new TokBackslash();
      return TokBackslash;
  })();
  var TokAt = (function () {
      function TokAt() {

      };
      TokAt.value = new TokAt();
      return TokAt;
  })();
  var TokLowerName = (function () {
      function TokLowerName(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokLowerName.create = function (value0) {
          return function (value1) {
              return new TokLowerName(value0, value1);
          };
      };
      return TokLowerName;
  })();
  var TokUpperName = (function () {
      function TokUpperName(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokUpperName.create = function (value0) {
          return function (value1) {
              return new TokUpperName(value0, value1);
          };
      };
      return TokUpperName;
  })();
  var TokOperator = (function () {
      function TokOperator(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokOperator.create = function (value0) {
          return function (value1) {
              return new TokOperator(value0, value1);
          };
      };
      return TokOperator;
  })();
  var TokSymbolName = (function () {
      function TokSymbolName(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokSymbolName.create = function (value0) {
          return function (value1) {
              return new TokSymbolName(value0, value1);
          };
      };
      return TokSymbolName;
  })();
  var TokSymbolArrow = (function () {
      function TokSymbolArrow(value0) {
          this.value0 = value0;
      };
      TokSymbolArrow.create = function (value0) {
          return new TokSymbolArrow(value0);
      };
      return TokSymbolArrow;
  })();
  var TokHole = (function () {
      function TokHole(value0) {
          this.value0 = value0;
      };
      TokHole.create = function (value0) {
          return new TokHole(value0);
      };
      return TokHole;
  })();
  var TokChar = (function () {
      function TokChar(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokChar.create = function (value0) {
          return function (value1) {
              return new TokChar(value0, value1);
          };
      };
      return TokChar;
  })();
  var TokString = (function () {
      function TokString(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokString.create = function (value0) {
          return function (value1) {
              return new TokString(value0, value1);
          };
      };
      return TokString;
  })();
  var TokRawString = (function () {
      function TokRawString(value0) {
          this.value0 = value0;
      };
      TokRawString.create = function (value0) {
          return new TokRawString(value0);
      };
      return TokRawString;
  })();
  var TokInt = (function () {
      function TokInt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokInt.create = function (value0) {
          return function (value1) {
              return new TokInt(value0, value1);
          };
      };
      return TokInt;
  })();
  var TokNumber = (function () {
      function TokNumber(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokNumber.create = function (value0) {
          return function (value1) {
              return new TokNumber(value0, value1);
          };
      };
      return TokNumber;
  })();
  var TokLayoutStart = (function () {
      function TokLayoutStart(value0) {
          this.value0 = value0;
      };
      TokLayoutStart.create = function (value0) {
          return new TokLayoutStart(value0);
      };
      return TokLayoutStart;
  })();
  var TokLayoutSep = (function () {
      function TokLayoutSep(value0) {
          this.value0 = value0;
      };
      TokLayoutSep.create = function (value0) {
          return new TokLayoutSep(value0);
      };
      return TokLayoutSep;
  })();
  var TokLayoutEnd = (function () {
      function TokLayoutEnd(value0) {
          this.value0 = value0;
      };
      TokLayoutEnd.create = function (value0) {
          return new TokLayoutEnd(value0);
      };
      return TokLayoutEnd;
  })();
  var Infix = (function () {
      function Infix() {

      };
      Infix.value = new Infix();
      return Infix;
  })();
  var Infixl = (function () {
      function Infixl() {

      };
      Infixl.value = new Infixl();
      return Infixl;
  })();
  var Infixr = (function () {
      function Infixr() {

      };
      Infixr.value = new Infixr();
      return Infixr;
  })();
  var Comment = (function () {
      function Comment(value0) {
          this.value0 = value0;
      };
      Comment.create = function (value0) {
          return new Comment(value0);
      };
      return Comment;
  })();
  var Space = (function () {
      function Space(value0) {
          this.value0 = value0;
      };
      Space.create = function (value0) {
          return new Space(value0);
      };
      return Space;
  })();
  var Line = (function () {
      function Line(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Line.create = function (value0) {
          return function (value1) {
              return new Line(value0, value1);
          };
      };
      return Line;
  })();
  var Name = function (x) {
      return x;
  };
  var FixityValue = (function () {
      function FixityValue(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FixityValue.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FixityValue(value0, value1, value2);
              };
          };
      };
      return FixityValue;
  })();
  var FixityType = (function () {
      function FixityType(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      FixityType.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new FixityType(value0, value1, value2, value3);
                  };
              };
          };
      };
      return FixityType;
  })();
  var RecordPun = (function () {
      function RecordPun(value0) {
          this.value0 = value0;
      };
      RecordPun.create = function (value0) {
          return new RecordPun(value0);
      };
      return RecordPun;
  })();
  var RecordField = (function () {
      function RecordField(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      RecordField.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new RecordField(value0, value1, value2);
              };
          };
      };
      return RecordField;
  })();
  var DataAll = (function () {
      function DataAll(value0) {
          this.value0 = value0;
      };
      DataAll.create = function (value0) {
          return new DataAll(value0);
      };
      return DataAll;
  })();
  var DataEnumerated = (function () {
      function DataEnumerated(value0) {
          this.value0 = value0;
      };
      DataEnumerated.create = function (value0) {
          return new DataEnumerated(value0);
      };
      return DataEnumerated;
  })();
  var ExportValue = (function () {
      function ExportValue(value0) {
          this.value0 = value0;
      };
      ExportValue.create = function (value0) {
          return new ExportValue(value0);
      };
      return ExportValue;
  })();
  var ExportOp = (function () {
      function ExportOp(value0) {
          this.value0 = value0;
      };
      ExportOp.create = function (value0) {
          return new ExportOp(value0);
      };
      return ExportOp;
  })();
  var ExportType = (function () {
      function ExportType(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExportType.create = function (value0) {
          return function (value1) {
              return new ExportType(value0, value1);
          };
      };
      return ExportType;
  })();
  var ExportTypeOp = (function () {
      function ExportTypeOp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExportTypeOp.create = function (value0) {
          return function (value1) {
              return new ExportTypeOp(value0, value1);
          };
      };
      return ExportTypeOp;
  })();
  var ExportClass = (function () {
      function ExportClass(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExportClass.create = function (value0) {
          return function (value1) {
              return new ExportClass(value0, value1);
          };
      };
      return ExportClass;
  })();
  var ExportKind = (function () {
      function ExportKind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExportKind.create = function (value0) {
          return function (value1) {
              return new ExportKind(value0, value1);
          };
      };
      return ExportKind;
  })();
  var ExportModule = (function () {
      function ExportModule(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExportModule.create = function (value0) {
          return function (value1) {
              return new ExportModule(value0, value1);
          };
      };
      return ExportModule;
  })();
  var ExportError = (function () {
      function ExportError(value0) {
          this.value0 = value0;
      };
      ExportError.create = function (value0) {
          return new ExportError(value0);
      };
      return ExportError;
  })();
  var ImportValue = (function () {
      function ImportValue(value0) {
          this.value0 = value0;
      };
      ImportValue.create = function (value0) {
          return new ImportValue(value0);
      };
      return ImportValue;
  })();
  var ImportOp = (function () {
      function ImportOp(value0) {
          this.value0 = value0;
      };
      ImportOp.create = function (value0) {
          return new ImportOp(value0);
      };
      return ImportOp;
  })();
  var ImportType = (function () {
      function ImportType(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ImportType.create = function (value0) {
          return function (value1) {
              return new ImportType(value0, value1);
          };
      };
      return ImportType;
  })();
  var ImportTypeOp = (function () {
      function ImportTypeOp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ImportTypeOp.create = function (value0) {
          return function (value1) {
              return new ImportTypeOp(value0, value1);
          };
      };
      return ImportTypeOp;
  })();
  var ImportClass = (function () {
      function ImportClass(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ImportClass.create = function (value0) {
          return function (value1) {
              return new ImportClass(value0, value1);
          };
      };
      return ImportClass;
  })();
  var ImportKind = (function () {
      function ImportKind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ImportKind.create = function (value0) {
          return function (value1) {
              return new ImportKind(value0, value1);
          };
      };
      return ImportKind;
  })();
  var ImportError = (function () {
      function ImportError(value0) {
          this.value0 = value0;
      };
      ImportError.create = function (value0) {
          return new ImportError(value0);
      };
      return ImportError;
  })();
  var One = (function () {
      function One(value0) {
          this.value0 = value0;
      };
      One.create = function (value0) {
          return new One(value0);
      };
      return One;
  })();
  var Many = (function () {
      function Many(value0) {
          this.value0 = value0;
      };
      Many.create = function (value0) {
          return new Many(value0);
      };
      return Many;
  })();
  var TypeVarKinded = (function () {
      function TypeVarKinded(value0) {
          this.value0 = value0;
      };
      TypeVarKinded.create = function (value0) {
          return new TypeVarKinded(value0);
      };
      return TypeVarKinded;
  })();
  var TypeVarName = (function () {
      function TypeVarName(value0) {
          this.value0 = value0;
      };
      TypeVarName.create = function (value0) {
          return new TypeVarName(value0);
      };
      return TypeVarName;
  })();
  var TypeVar = (function () {
      function TypeVar(value0) {
          this.value0 = value0;
      };
      TypeVar.create = function (value0) {
          return new TypeVar(value0);
      };
      return TypeVar;
  })();
  var TypeConstructor = (function () {
      function TypeConstructor(value0) {
          this.value0 = value0;
      };
      TypeConstructor.create = function (value0) {
          return new TypeConstructor(value0);
      };
      return TypeConstructor;
  })();
  var TypeWildcard = (function () {
      function TypeWildcard(value0) {
          this.value0 = value0;
      };
      TypeWildcard.create = function (value0) {
          return new TypeWildcard(value0);
      };
      return TypeWildcard;
  })();
  var TypeHole = (function () {
      function TypeHole(value0) {
          this.value0 = value0;
      };
      TypeHole.create = function (value0) {
          return new TypeHole(value0);
      };
      return TypeHole;
  })();
  var TypeString = (function () {
      function TypeString(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeString.create = function (value0) {
          return function (value1) {
              return new TypeString(value0, value1);
          };
      };
      return TypeString;
  })();
  var TypeRow = (function () {
      function TypeRow(value0) {
          this.value0 = value0;
      };
      TypeRow.create = function (value0) {
          return new TypeRow(value0);
      };
      return TypeRow;
  })();
  var TypeRecord = (function () {
      function TypeRecord(value0) {
          this.value0 = value0;
      };
      TypeRecord.create = function (value0) {
          return new TypeRecord(value0);
      };
      return TypeRecord;
  })();
  var TypeForall = (function () {
      function TypeForall(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      TypeForall.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new TypeForall(value0, value1, value2, value3);
                  };
              };
          };
      };
      return TypeForall;
  })();
  var TypeKinded = (function () {
      function TypeKinded(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TypeKinded.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TypeKinded(value0, value1, value2);
              };
          };
      };
      return TypeKinded;
  })();
  var TypeApp = (function () {
      function TypeApp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeApp.create = function (value0) {
          return function (value1) {
              return new TypeApp(value0, value1);
          };
      };
      return TypeApp;
  })();
  var TypeOp = (function () {
      function TypeOp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeOp.create = function (value0) {
          return function (value1) {
              return new TypeOp(value0, value1);
          };
      };
      return TypeOp;
  })();
  var TypeOpName = (function () {
      function TypeOpName(value0) {
          this.value0 = value0;
      };
      TypeOpName.create = function (value0) {
          return new TypeOpName(value0);
      };
      return TypeOpName;
  })();
  var TypeArrow = (function () {
      function TypeArrow(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TypeArrow.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TypeArrow(value0, value1, value2);
              };
          };
      };
      return TypeArrow;
  })();
  var TypeArrowName = (function () {
      function TypeArrowName(value0) {
          this.value0 = value0;
      };
      TypeArrowName.create = function (value0) {
          return new TypeArrowName(value0);
      };
      return TypeArrowName;
  })();
  var TypeConstrained = (function () {
      function TypeConstrained(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TypeConstrained.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TypeConstrained(value0, value1, value2);
              };
          };
      };
      return TypeConstrained;
  })();
  var TypeParens = (function () {
      function TypeParens(value0) {
          this.value0 = value0;
      };
      TypeParens.create = function (value0) {
          return new TypeParens(value0);
      };
      return TypeParens;
  })();
  var TypeUnaryRow = (function () {
      function TypeUnaryRow(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeUnaryRow.create = function (value0) {
          return function (value1) {
              return new TypeUnaryRow(value0, value1);
          };
      };
      return TypeUnaryRow;
  })();
  var $$TypeError = (function () {
      function $$TypeError(value0) {
          this.value0 = value0;
      };
      $$TypeError.create = function (value0) {
          return new $$TypeError(value0);
      };
      return $$TypeError;
  })();
  var ForeignValue = (function () {
      function ForeignValue(value0) {
          this.value0 = value0;
      };
      ForeignValue.create = function (value0) {
          return new ForeignValue(value0);
      };
      return ForeignValue;
  })();
  var ForeignData = (function () {
      function ForeignData(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ForeignData.create = function (value0) {
          return function (value1) {
              return new ForeignData(value0, value1);
          };
      };
      return ForeignData;
  })();
  var ForeignKind = (function () {
      function ForeignKind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ForeignKind.create = function (value0) {
          return function (value1) {
              return new ForeignKind(value0, value1);
          };
      };
      return ForeignKind;
  })();
  var FundepDetermined = (function () {
      function FundepDetermined(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FundepDetermined.create = function (value0) {
          return function (value1) {
              return new FundepDetermined(value0, value1);
          };
      };
      return FundepDetermined;
  })();
  var FundepDetermines = (function () {
      function FundepDetermines(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FundepDetermines.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FundepDetermines(value0, value1, value2);
              };
          };
      };
      return FundepDetermines;
  })();
  var BinderWildcard = (function () {
      function BinderWildcard(value0) {
          this.value0 = value0;
      };
      BinderWildcard.create = function (value0) {
          return new BinderWildcard(value0);
      };
      return BinderWildcard;
  })();
  var BinderVar = (function () {
      function BinderVar(value0) {
          this.value0 = value0;
      };
      BinderVar.create = function (value0) {
          return new BinderVar(value0);
      };
      return BinderVar;
  })();
  var BinderNamed = (function () {
      function BinderNamed(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      BinderNamed.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new BinderNamed(value0, value1, value2);
              };
          };
      };
      return BinderNamed;
  })();
  var BinderConstructor = (function () {
      function BinderConstructor(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BinderConstructor.create = function (value0) {
          return function (value1) {
              return new BinderConstructor(value0, value1);
          };
      };
      return BinderConstructor;
  })();
  var BinderBoolean = (function () {
      function BinderBoolean(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BinderBoolean.create = function (value0) {
          return function (value1) {
              return new BinderBoolean(value0, value1);
          };
      };
      return BinderBoolean;
  })();
  var BinderChar = (function () {
      function BinderChar(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BinderChar.create = function (value0) {
          return function (value1) {
              return new BinderChar(value0, value1);
          };
      };
      return BinderChar;
  })();
  var BinderString = (function () {
      function BinderString(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BinderString.create = function (value0) {
          return function (value1) {
              return new BinderString(value0, value1);
          };
      };
      return BinderString;
  })();
  var BinderInt = (function () {
      function BinderInt(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      BinderInt.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new BinderInt(value0, value1, value2);
              };
          };
      };
      return BinderInt;
  })();
  var BinderNumber = (function () {
      function BinderNumber(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      BinderNumber.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new BinderNumber(value0, value1, value2);
              };
          };
      };
      return BinderNumber;
  })();
  var BinderArray = (function () {
      function BinderArray(value0) {
          this.value0 = value0;
      };
      BinderArray.create = function (value0) {
          return new BinderArray(value0);
      };
      return BinderArray;
  })();
  var BinderRecord = (function () {
      function BinderRecord(value0) {
          this.value0 = value0;
      };
      BinderRecord.create = function (value0) {
          return new BinderRecord(value0);
      };
      return BinderRecord;
  })();
  var BinderParens = (function () {
      function BinderParens(value0) {
          this.value0 = value0;
      };
      BinderParens.create = function (value0) {
          return new BinderParens(value0);
      };
      return BinderParens;
  })();
  var BinderTyped = (function () {
      function BinderTyped(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      BinderTyped.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new BinderTyped(value0, value1, value2);
              };
          };
      };
      return BinderTyped;
  })();
  var BinderOp = (function () {
      function BinderOp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BinderOp.create = function (value0) {
          return function (value1) {
              return new BinderOp(value0, value1);
          };
      };
      return BinderOp;
  })();
  var BinderError = (function () {
      function BinderError(value0) {
          this.value0 = value0;
      };
      BinderError.create = function (value0) {
          return new BinderError(value0);
      };
      return BinderError;
  })();
  var DoLet = (function () {
      function DoLet(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DoLet.create = function (value0) {
          return function (value1) {
              return new DoLet(value0, value1);
          };
      };
      return DoLet;
  })();
  var DoDiscard = (function () {
      function DoDiscard(value0) {
          this.value0 = value0;
      };
      DoDiscard.create = function (value0) {
          return new DoDiscard(value0);
      };
      return DoDiscard;
  })();
  var DoBind = (function () {
      function DoBind(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      DoBind.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new DoBind(value0, value1, value2);
              };
          };
      };
      return DoBind;
  })();
  var DoError = (function () {
      function DoError(value0) {
          this.value0 = value0;
      };
      DoError.create = function (value0) {
          return new DoError(value0);
      };
      return DoError;
  })();
  var LetBindingSignature = (function () {
      function LetBindingSignature(value0) {
          this.value0 = value0;
      };
      LetBindingSignature.create = function (value0) {
          return new LetBindingSignature(value0);
      };
      return LetBindingSignature;
  })();
  var LetBindingName = (function () {
      function LetBindingName(value0) {
          this.value0 = value0;
      };
      LetBindingName.create = function (value0) {
          return new LetBindingName(value0);
      };
      return LetBindingName;
  })();
  var LetBindingPattern = (function () {
      function LetBindingPattern(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      LetBindingPattern.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new LetBindingPattern(value0, value1, value2);
              };
          };
      };
      return LetBindingPattern;
  })();
  var LetBindingError = (function () {
      function LetBindingError(value0) {
          this.value0 = value0;
      };
      LetBindingError.create = function (value0) {
          return new LetBindingError(value0);
      };
      return LetBindingError;
  })();
  var Unconditional = (function () {
      function Unconditional(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Unconditional.create = function (value0) {
          return function (value1) {
              return new Unconditional(value0, value1);
          };
      };
      return Unconditional;
  })();
  var Guarded = (function () {
      function Guarded(value0) {
          this.value0 = value0;
      };
      Guarded.create = function (value0) {
          return new Guarded(value0);
      };
      return Guarded;
  })();
  var ExprHole = (function () {
      function ExprHole(value0) {
          this.value0 = value0;
      };
      ExprHole.create = function (value0) {
          return new ExprHole(value0);
      };
      return ExprHole;
  })();
  var ExprSection = (function () {
      function ExprSection(value0) {
          this.value0 = value0;
      };
      ExprSection.create = function (value0) {
          return new ExprSection(value0);
      };
      return ExprSection;
  })();
  var ExprIdent = (function () {
      function ExprIdent(value0) {
          this.value0 = value0;
      };
      ExprIdent.create = function (value0) {
          return new ExprIdent(value0);
      };
      return ExprIdent;
  })();
  var ExprConstructor = (function () {
      function ExprConstructor(value0) {
          this.value0 = value0;
      };
      ExprConstructor.create = function (value0) {
          return new ExprConstructor(value0);
      };
      return ExprConstructor;
  })();
  var ExprBoolean = (function () {
      function ExprBoolean(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprBoolean.create = function (value0) {
          return function (value1) {
              return new ExprBoolean(value0, value1);
          };
      };
      return ExprBoolean;
  })();
  var ExprChar = (function () {
      function ExprChar(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprChar.create = function (value0) {
          return function (value1) {
              return new ExprChar(value0, value1);
          };
      };
      return ExprChar;
  })();
  var ExprString = (function () {
      function ExprString(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprString.create = function (value0) {
          return function (value1) {
              return new ExprString(value0, value1);
          };
      };
      return ExprString;
  })();
  var ExprInt = (function () {
      function ExprInt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprInt.create = function (value0) {
          return function (value1) {
              return new ExprInt(value0, value1);
          };
      };
      return ExprInt;
  })();
  var ExprNumber = (function () {
      function ExprNumber(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprNumber.create = function (value0) {
          return function (value1) {
              return new ExprNumber(value0, value1);
          };
      };
      return ExprNumber;
  })();
  var ExprArray = (function () {
      function ExprArray(value0) {
          this.value0 = value0;
      };
      ExprArray.create = function (value0) {
          return new ExprArray(value0);
      };
      return ExprArray;
  })();
  var ExprRecord = (function () {
      function ExprRecord(value0) {
          this.value0 = value0;
      };
      ExprRecord.create = function (value0) {
          return new ExprRecord(value0);
      };
      return ExprRecord;
  })();
  var ExprParens = (function () {
      function ExprParens(value0) {
          this.value0 = value0;
      };
      ExprParens.create = function (value0) {
          return new ExprParens(value0);
      };
      return ExprParens;
  })();
  var ExprTyped = (function () {
      function ExprTyped(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ExprTyped.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ExprTyped(value0, value1, value2);
              };
          };
      };
      return ExprTyped;
  })();
  var ExprInfix = (function () {
      function ExprInfix(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprInfix.create = function (value0) {
          return function (value1) {
              return new ExprInfix(value0, value1);
          };
      };
      return ExprInfix;
  })();
  var ExprOp = (function () {
      function ExprOp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprOp.create = function (value0) {
          return function (value1) {
              return new ExprOp(value0, value1);
          };
      };
      return ExprOp;
  })();
  var ExprOpName = (function () {
      function ExprOpName(value0) {
          this.value0 = value0;
      };
      ExprOpName.create = function (value0) {
          return new ExprOpName(value0);
      };
      return ExprOpName;
  })();
  var ExprNegate = (function () {
      function ExprNegate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprNegate.create = function (value0) {
          return function (value1) {
              return new ExprNegate(value0, value1);
          };
      };
      return ExprNegate;
  })();
  var ExprRecordAccessor = (function () {
      function ExprRecordAccessor(value0) {
          this.value0 = value0;
      };
      ExprRecordAccessor.create = function (value0) {
          return new ExprRecordAccessor(value0);
      };
      return ExprRecordAccessor;
  })();
  var ExprRecordUpdate = (function () {
      function ExprRecordUpdate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprRecordUpdate.create = function (value0) {
          return function (value1) {
              return new ExprRecordUpdate(value0, value1);
          };
      };
      return ExprRecordUpdate;
  })();
  var ExprApp = (function () {
      function ExprApp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprApp.create = function (value0) {
          return function (value1) {
              return new ExprApp(value0, value1);
          };
      };
      return ExprApp;
  })();
  var ExprLambda = (function () {
      function ExprLambda(value0) {
          this.value0 = value0;
      };
      ExprLambda.create = function (value0) {
          return new ExprLambda(value0);
      };
      return ExprLambda;
  })();
  var ExprIf = (function () {
      function ExprIf(value0) {
          this.value0 = value0;
      };
      ExprIf.create = function (value0) {
          return new ExprIf(value0);
      };
      return ExprIf;
  })();
  var ExprCase = (function () {
      function ExprCase(value0) {
          this.value0 = value0;
      };
      ExprCase.create = function (value0) {
          return new ExprCase(value0);
      };
      return ExprCase;
  })();
  var ExprLet = (function () {
      function ExprLet(value0) {
          this.value0 = value0;
      };
      ExprLet.create = function (value0) {
          return new ExprLet(value0);
      };
      return ExprLet;
  })();
  var ExprDo = (function () {
      function ExprDo(value0) {
          this.value0 = value0;
      };
      ExprDo.create = function (value0) {
          return new ExprDo(value0);
      };
      return ExprDo;
  })();
  var ExprAdo = (function () {
      function ExprAdo(value0) {
          this.value0 = value0;
      };
      ExprAdo.create = function (value0) {
          return new ExprAdo(value0);
      };
      return ExprAdo;
  })();
  var ExprError = (function () {
      function ExprError(value0) {
          this.value0 = value0;
      };
      ExprError.create = function (value0) {
          return new ExprError(value0);
      };
      return ExprError;
  })();
  var RecordUpdateLeaf = (function () {
      function RecordUpdateLeaf(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      RecordUpdateLeaf.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new RecordUpdateLeaf(value0, value1, value2);
              };
          };
      };
      return RecordUpdateLeaf;
  })();
  var RecordUpdateBranch = (function () {
      function RecordUpdateBranch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RecordUpdateBranch.create = function (value0) {
          return function (value1) {
              return new RecordUpdateBranch(value0, value1);
          };
      };
      return RecordUpdateBranch;
  })();
  var InstanceBindingSignature = (function () {
      function InstanceBindingSignature(value0) {
          this.value0 = value0;
      };
      InstanceBindingSignature.create = function (value0) {
          return new InstanceBindingSignature(value0);
      };
      return InstanceBindingSignature;
  })();
  var InstanceBindingName = (function () {
      function InstanceBindingName(value0) {
          this.value0 = value0;
      };
      InstanceBindingName.create = function (value0) {
          return new InstanceBindingName(value0);
      };
      return InstanceBindingName;
  })();
  var DeclData = (function () {
      function DeclData(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DeclData.create = function (value0) {
          return function (value1) {
              return new DeclData(value0, value1);
          };
      };
      return DeclData;
  })();
  var DeclType = (function () {
      function DeclType(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      DeclType.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new DeclType(value0, value1, value2);
              };
          };
      };
      return DeclType;
  })();
  var DeclNewtype = (function () {
      function DeclNewtype(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      DeclNewtype.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new DeclNewtype(value0, value1, value2, value3);
                  };
              };
          };
      };
      return DeclNewtype;
  })();
  var DeclClass = (function () {
      function DeclClass(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DeclClass.create = function (value0) {
          return function (value1) {
              return new DeclClass(value0, value1);
          };
      };
      return DeclClass;
  })();
  var DeclInstanceChain = (function () {
      function DeclInstanceChain(value0) {
          this.value0 = value0;
      };
      DeclInstanceChain.create = function (value0) {
          return new DeclInstanceChain(value0);
      };
      return DeclInstanceChain;
  })();
  var DeclDerive = (function () {
      function DeclDerive(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      DeclDerive.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new DeclDerive(value0, value1, value2);
              };
          };
      };
      return DeclDerive;
  })();
  var DeclKindSignature = (function () {
      function DeclKindSignature(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DeclKindSignature.create = function (value0) {
          return function (value1) {
              return new DeclKindSignature(value0, value1);
          };
      };
      return DeclKindSignature;
  })();
  var DeclSignature = (function () {
      function DeclSignature(value0) {
          this.value0 = value0;
      };
      DeclSignature.create = function (value0) {
          return new DeclSignature(value0);
      };
      return DeclSignature;
  })();
  var DeclValue = (function () {
      function DeclValue(value0) {
          this.value0 = value0;
      };
      DeclValue.create = function (value0) {
          return new DeclValue(value0);
      };
      return DeclValue;
  })();
  var DeclFixity = (function () {
      function DeclFixity(value0) {
          this.value0 = value0;
      };
      DeclFixity.create = function (value0) {
          return new DeclFixity(value0);
      };
      return DeclFixity;
  })();
  var DeclForeign = (function () {
      function DeclForeign(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      DeclForeign.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new DeclForeign(value0, value1, value2);
              };
          };
      };
      return DeclForeign;
  })();
  var DeclRole = (function () {
      function DeclRole(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      DeclRole.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new DeclRole(value0, value1, value2, value3);
                  };
              };
          };
      };
      return DeclRole;
  })();
  var DeclError = (function () {
      function DeclError(value0) {
          this.value0 = value0;
      };
      DeclError.create = function (value0) {
          return new DeclError(value0);
      };
      return DeclError;
  })();
  var ordProper = Data_Ord.ordString;
  var ordOperator = Data_Ord.ordString;
  var ordModuleName = Data_Ord.ordString;
  var ordIdent = Data_Ord.ordString;
  var eqProper = Data_Eq.eqString;
  var eqOperator = Data_Eq.eqString;
  var eqModuleName = Data_Eq.eqString;
  var eqIdent = Data_Eq.eqString;
  exports["ModuleName"] = ModuleName;
  exports["Comment"] = Comment;
  exports["Space"] = Space;
  exports["Line"] = Line;
  exports["LF"] = LF;
  exports["CRLF"] = CRLF;
  exports["ASCII"] = ASCII;
  exports["Unicode"] = Unicode;
  exports["SmallInt"] = SmallInt;
  exports["BigInt"] = BigInt;
  exports["BigHex"] = BigHex;
  exports["TokLeftParen"] = TokLeftParen;
  exports["TokRightParen"] = TokRightParen;
  exports["TokLeftBrace"] = TokLeftBrace;
  exports["TokRightBrace"] = TokRightBrace;
  exports["TokLeftSquare"] = TokLeftSquare;
  exports["TokRightSquare"] = TokRightSquare;
  exports["TokLeftArrow"] = TokLeftArrow;
  exports["TokRightArrow"] = TokRightArrow;
  exports["TokRightFatArrow"] = TokRightFatArrow;
  exports["TokDoubleColon"] = TokDoubleColon;
  exports["TokForall"] = TokForall;
  exports["TokEquals"] = TokEquals;
  exports["TokPipe"] = TokPipe;
  exports["TokTick"] = TokTick;
  exports["TokDot"] = TokDot;
  exports["TokComma"] = TokComma;
  exports["TokUnderscore"] = TokUnderscore;
  exports["TokBackslash"] = TokBackslash;
  exports["TokAt"] = TokAt;
  exports["TokLowerName"] = TokLowerName;
  exports["TokUpperName"] = TokUpperName;
  exports["TokOperator"] = TokOperator;
  exports["TokSymbolName"] = TokSymbolName;
  exports["TokSymbolArrow"] = TokSymbolArrow;
  exports["TokHole"] = TokHole;
  exports["TokChar"] = TokChar;
  exports["TokString"] = TokString;
  exports["TokRawString"] = TokRawString;
  exports["TokInt"] = TokInt;
  exports["TokNumber"] = TokNumber;
  exports["TokLayoutStart"] = TokLayoutStart;
  exports["TokLayoutSep"] = TokLayoutSep;
  exports["TokLayoutEnd"] = TokLayoutEnd;
  exports["Name"] = Name;
  exports["One"] = One;
  exports["Many"] = Many;
  exports["TypeVar"] = TypeVar;
  exports["TypeConstructor"] = TypeConstructor;
  exports["TypeWildcard"] = TypeWildcard;
  exports["TypeHole"] = TypeHole;
  exports["TypeString"] = TypeString;
  exports["TypeRow"] = TypeRow;
  exports["TypeRecord"] = TypeRecord;
  exports["TypeForall"] = TypeForall;
  exports["TypeKinded"] = TypeKinded;
  exports["TypeApp"] = TypeApp;
  exports["TypeOp"] = TypeOp;
  exports["TypeOpName"] = TypeOpName;
  exports["TypeArrow"] = TypeArrow;
  exports["TypeArrowName"] = TypeArrowName;
  exports["TypeConstrained"] = TypeConstrained;
  exports["TypeParens"] = TypeParens;
  exports["TypeUnaryRow"] = TypeUnaryRow;
  exports["TypeError"] = $$TypeError;
  exports["TypeVarKinded"] = TypeVarKinded;
  exports["TypeVarName"] = TypeVarName;
  exports["ExportValue"] = ExportValue;
  exports["ExportOp"] = ExportOp;
  exports["ExportType"] = ExportType;
  exports["ExportTypeOp"] = ExportTypeOp;
  exports["ExportClass"] = ExportClass;
  exports["ExportKind"] = ExportKind;
  exports["ExportModule"] = ExportModule;
  exports["ExportError"] = ExportError;
  exports["DataAll"] = DataAll;
  exports["DataEnumerated"] = DataEnumerated;
  exports["DeclData"] = DeclData;
  exports["DeclType"] = DeclType;
  exports["DeclNewtype"] = DeclNewtype;
  exports["DeclClass"] = DeclClass;
  exports["DeclInstanceChain"] = DeclInstanceChain;
  exports["DeclDerive"] = DeclDerive;
  exports["DeclKindSignature"] = DeclKindSignature;
  exports["DeclSignature"] = DeclSignature;
  exports["DeclValue"] = DeclValue;
  exports["DeclFixity"] = DeclFixity;
  exports["DeclForeign"] = DeclForeign;
  exports["DeclRole"] = DeclRole;
  exports["DeclError"] = DeclError;
  exports["InstanceBindingSignature"] = InstanceBindingSignature;
  exports["InstanceBindingName"] = InstanceBindingName;
  exports["ImportValue"] = ImportValue;
  exports["ImportOp"] = ImportOp;
  exports["ImportType"] = ImportType;
  exports["ImportTypeOp"] = ImportTypeOp;
  exports["ImportClass"] = ImportClass;
  exports["ImportKind"] = ImportKind;
  exports["ImportError"] = ImportError;
  exports["FundepDetermined"] = FundepDetermined;
  exports["FundepDetermines"] = FundepDetermines;
  exports["Infix"] = Infix;
  exports["Infixl"] = Infixl;
  exports["Infixr"] = Infixr;
  exports["FixityValue"] = FixityValue;
  exports["FixityType"] = FixityType;
  exports["Unconditional"] = Unconditional;
  exports["Guarded"] = Guarded;
  exports["ForeignValue"] = ForeignValue;
  exports["ForeignData"] = ForeignData;
  exports["ForeignKind"] = ForeignKind;
  exports["Nominal"] = Nominal;
  exports["Representational"] = Representational;
  exports["Phantom"] = Phantom;
  exports["ExprHole"] = ExprHole;
  exports["ExprSection"] = ExprSection;
  exports["ExprIdent"] = ExprIdent;
  exports["ExprConstructor"] = ExprConstructor;
  exports["ExprBoolean"] = ExprBoolean;
  exports["ExprChar"] = ExprChar;
  exports["ExprString"] = ExprString;
  exports["ExprInt"] = ExprInt;
  exports["ExprNumber"] = ExprNumber;
  exports["ExprArray"] = ExprArray;
  exports["ExprRecord"] = ExprRecord;
  exports["ExprParens"] = ExprParens;
  exports["ExprTyped"] = ExprTyped;
  exports["ExprInfix"] = ExprInfix;
  exports["ExprOp"] = ExprOp;
  exports["ExprOpName"] = ExprOpName;
  exports["ExprNegate"] = ExprNegate;
  exports["ExprRecordAccessor"] = ExprRecordAccessor;
  exports["ExprRecordUpdate"] = ExprRecordUpdate;
  exports["ExprApp"] = ExprApp;
  exports["ExprLambda"] = ExprLambda;
  exports["ExprIf"] = ExprIf;
  exports["ExprCase"] = ExprCase;
  exports["ExprLet"] = ExprLet;
  exports["ExprDo"] = ExprDo;
  exports["ExprAdo"] = ExprAdo;
  exports["ExprError"] = ExprError;
  exports["RecordPun"] = RecordPun;
  exports["RecordField"] = RecordField;
  exports["RecordUpdateLeaf"] = RecordUpdateLeaf;
  exports["RecordUpdateBranch"] = RecordUpdateBranch;
  exports["LetBindingSignature"] = LetBindingSignature;
  exports["LetBindingName"] = LetBindingName;
  exports["LetBindingPattern"] = LetBindingPattern;
  exports["LetBindingError"] = LetBindingError;
  exports["DoLet"] = DoLet;
  exports["DoDiscard"] = DoDiscard;
  exports["DoBind"] = DoBind;
  exports["DoError"] = DoError;
  exports["BinderWildcard"] = BinderWildcard;
  exports["BinderVar"] = BinderVar;
  exports["BinderNamed"] = BinderNamed;
  exports["BinderConstructor"] = BinderConstructor;
  exports["BinderBoolean"] = BinderBoolean;
  exports["BinderChar"] = BinderChar;
  exports["BinderString"] = BinderString;
  exports["BinderInt"] = BinderInt;
  exports["BinderNumber"] = BinderNumber;
  exports["BinderArray"] = BinderArray;
  exports["BinderRecord"] = BinderRecord;
  exports["BinderParens"] = BinderParens;
  exports["BinderTyped"] = BinderTyped;
  exports["BinderOp"] = BinderOp;
  exports["BinderError"] = BinderError;
  exports["eqModuleName"] = eqModuleName;
  exports["ordModuleName"] = ordModuleName;
  exports["eqIdent"] = eqIdent;
  exports["ordIdent"] = ordIdent;
  exports["eqProper"] = eqProper;
  exports["ordProper"] = ordProper;
  exports["eqOperator"] = eqOperator;
  exports["ordOperator"] = ordOperator;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Alternative"] = $PS["Control.Alternative"] || {};
  var exports = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Unit = $PS["Data.Unit"];                
  var guard = function (dictAlternative) {
      return function (v) {
          if (v) {
              return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Unit.unit);
          };
          if (!v) {
              return Control_Plus.empty(dictAlternative.Plus1());
          };
          throw new Error("Failed pattern match at Control.Alternative (line 48, column 1 - line 48, column 54): " + [ v.constructor.name ]);
      };
  };
  exports["guard"] = guard;
})(PS);
(function(exports) {
  "use strict";

  exports.regexImpl = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports._match = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var m = s.match(r);
          if (m == null || m.length === 0) {
            return nothing;
          } else {
            for (var i = 0; i < m.length; i++) {
              m[i] = m[i] == null ? nothing : just(m[i]);
            }
            return just(m);
          }
        };
      };
    };
  };

  exports.split = function (r) {
    return function (s) {
      return s.split(r);
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.String.Regex"] = $PS["Data.String.Regex"] || {};
  var exports = $PS["Data.String.Regex"];
  var $foreign = $PS["Data.String.Regex"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];                                                          
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          return "";
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          return "";
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          return "";
      })() + ((function () {
          if (v.value0.dotAll) {
              return "s";
          };
          return "";
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          return "";
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          return "";
      })()))));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign.regexImpl(Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  var match = $foreign["_match"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["regex"] = regex;
  exports["match"] = match;
  exports["split"] = $foreign.split;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.String.Regex.Flags"] = $PS["Data.String.Regex.Flags"] || {};
  var exports = $PS["Data.String.Regex.Flags"];                      
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var unicode = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      dotAll: false,
      sticky: false,
      unicode: true
  });
  var global = new RegexFlags({
      global: true,
      ignoreCase: false,
      multiline: false,
      dotAll: false,
      sticky: false,
      unicode: false
  });
  exports["global"] = global;
  exports["unicode"] = unicode;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.String.Regex.Unsafe"] = $PS["Data.String.Regex.Unsafe"] || {};
  var exports = $PS["Data.String.Regex.Unsafe"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                
  var unsafeRegex = function (s) {
      return function (f) {
          return Data_Either.either(Partial_Unsafe.unsafeCrashWith)(Control_Category.identity(Control_Category.categoryFn))(Data_String_Regex.regex(s)(f));
      };
  };
  exports["unsafeRegex"] = unsafeRegex;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Tidy.Util"] = $PS["Tidy.Util"] || {};
  var exports = $PS["Tidy.Util"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Data_String_Regex_Unsafe = $PS["Data.String.Regex.Unsafe"];                
  var splitStringEscapeLines = Data_String_Regex.split(Data_String_Regex_Unsafe.unsafeRegex("\\\\ *\\r?\\n\\s*\\\\")(Data_String_Regex_Flags.global));
  var splitLines = Data_String_Regex.split(Data_String_Regex_Unsafe.unsafeRegex("\\r?\\n")(Data_String_Regex_Flags.global));
  var overLabel = function (k) {
      return function (v) {
          return {
              label: k(v.label),
              separator: v.separator,
              value: v.value
          };
      };
  };
  var nameOf = function (v) {
      return v.name;
  };
  exports["splitLines"] = splitLines;
  exports["splitStringEscapeLines"] = splitStringEscapeLines;
  exports["nameOf"] = nameOf;
  exports["overLabel"] = overLabel;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Tidy.Doc"] = $PS["Tidy.Doc"] || {};
  var exports = $PS["Tidy.Doc"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Dodo = $PS["Dodo"];
  var Dodo_Internal = $PS["Dodo.Internal"];
  var Tidy_Util = $PS["Tidy.Util"];                
  var ForceNone = (function () {
      function ForceNone() {

      };
      ForceNone.value = new ForceNone();
      return ForceNone;
  })();
  var ForceSpace = (function () {
      function ForceSpace() {

      };
      ForceSpace.value = new ForceSpace();
      return ForceSpace;
  })();
  var ForceBreak = (function () {
      function ForceBreak() {

      };
      ForceBreak.value = new ForceBreak();
      return ForceBreak;
  })();
  var sourceBreak = function (n) {
      return function (v) {
          return {
              doc: v.doc,
              isEmpty: false,
              leading: {
                  doc: v.leading.doc,
                  left: v.leading.left,
                  lines: v.leading.lines + n | 0,
                  multiline: v.leading.multiline,
                  right: v.leading.right
              },
              multiline: v.multiline,
              trailing: v.trailing
          };
      };
  };
  var softSpaceDoc = Dodo.flexAlt(Data_Monoid.mempty(Dodo_Internal.monoidDoc))(Dodo.space);
  var mapDocs = function (k) {
      return function (v) {
          if (v.isEmpty) {
              return v;
          };
          if (Data_Boolean.otherwise) {
              return {
                  doc: k(v.doc),
                  isEmpty: v.isEmpty,
                  leading: {
                      doc: k(v.leading.doc),
                      left: v.leading.left,
                      lines: v.leading.lines,
                      multiline: v.leading.multiline,
                      right: v.leading.right
                  },
                  multiline: v.multiline,
                  trailing: {
                      doc: k(v.trailing.doc),
                      left: v.trailing.left,
                      multiline: v.trailing.multiline,
                      right: v.trailing.right
                  }
              };
          };
          throw new Error("Failed pattern match at Tidy.Doc (line 470, column 1 - line 470, column 68): " + [ k.constructor.name, v.constructor.name ]);
      };
  };
  var locally = function (k) {
      return function (v) {
          return {
              doc: Dodo.locally(k)(v.doc),
              isEmpty: v.isEmpty,
              leading: v.leading,
              multiline: v.multiline,
              trailing: v.trailing
          };
      };
  };
  var isEmpty = function (v) {
      return v.isEmpty;
  };
  var indent = mapDocs(Dodo.indent);
  var formatBlockComment = function ($156) {
      return (function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return new Data_Tuple.Tuple(false, Data_Monoid.mempty(Dodo_Internal.monoidDoc));
          };
          if (v instanceof Data_Maybe.Just) {
              var prefixSpaces = Data_Array.head(Data_Array.sort(Data_Ord.ordInt)(Data_Array.mapMaybe(function (str) {
                  var spaces = Data_String_CodeUnits.length(Data_String_CodePoints.takeWhile(Data_Eq.eq(Data_String_CodePoints.eqCodePoint)(Data_String_CodePoints.codePointFromChar(" ")))(str));
                  return Data_Functor.voidLeft(Data_Maybe.functorMaybe)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(spaces < Data_String_CodeUnits.length(str)))(spaces);
              })(v.value0.tail)));
              if (prefixSpaces instanceof Data_Maybe.Nothing) {
                  return new Data_Tuple.Tuple(false, Dodo.text(v.value0.head));
              };
              if (prefixSpaces instanceof Data_Maybe.Just) {
                  return Data_Tuple.Tuple.create(true)(Dodo.withPosition(function (pos) {
                      var newIndent = (function () {
                          var $80 = prefixSpaces.value0 < pos.indent;
                          if ($80) {
                              return 0;
                          };
                          return prefixSpaces.value0;
                      })();
                      var spaces = Data_Monoid.power(Data_Monoid.monoidString)(" ")(newIndent);
                      var tailDocs = Data_Functor.map(Data_Functor.functorArray)(function (str) {
                          return Dodo.text(Data_Maybe.fromMaybe(str)(Data_String_CodeUnits.stripPrefix(spaces)(str)));
                      })(v.value0.tail);
                      return Dodo.lines(Data_Foldable.foldableArray)([ Dodo.text(v.value0.head), Dodo.locally(function (prev) {
                          var $81 = newIndent < prev.indent;
                          if ($81) {
                              return {
                                  indent: newIndent,
                                  indentSpaces: spaces,
                                  indentUnit: prev.indentUnit,
                                  indentWidth: prev.indentWidth,
                                  pageWidth: prev.pageWidth,
                                  ribbonRatio: prev.ribbonRatio
                              };
                          };
                          return prev;
                      })(Data_Foldable.intercalate(Data_Foldable.foldableArray)(Dodo_Internal.monoidDoc)(Dodo["break"])(tailDocs)) ]);
                  }));
              };
              throw new Error("Failed pattern match at Tidy.Doc (line 204, column 5 - line 224, column 14): " + [ prefixSpaces.constructor.name ]);
          };
          throw new Error("Failed pattern match at Tidy.Doc (line 200, column 54 - line 234, column 21): " + [ v.constructor.name ]);
      })(Data_Array.uncons(Tidy_Util.splitLines($156)));
  };
  var forceMinSourceBreaks = function (n) {
      return function (v) {
          if (v.isEmpty) {
              return v;
          };
          if (Data_Boolean.otherwise) {
              return {
                  doc: v.doc,
                  isEmpty: v.isEmpty,
                  leading: {
                      doc: v.leading.doc,
                      left: v.leading.left,
                      lines: Data_Ord.max(Data_Ord.ordInt)(v.leading.lines)(n),
                      multiline: v.leading.multiline,
                      right: v.leading.right
                  },
                  multiline: v.multiline,
                  trailing: v.trailing
              };
          };
          throw new Error("Failed pattern match at Tidy.Doc (line 314, column 1 - line 314, column 68): " + [ n.constructor.name, v.constructor.name ]);
      };
  };
  var force = function (k) {
      return function (f) {
          return function (m) {
              return function (doc) {
                  if (f instanceof ForceBreak) {
                      return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(doc));
                  };
                  return new Data_Tuple.Tuple(m, k(doc));
              };
          };
      };
  };
  var flexGroup = function (v) {
      if (v.multiline) {
          return v;
      };
      if (Data_Boolean.otherwise) {
          return {
              doc: Dodo.flexGroup(v.doc),
              isEmpty: v.isEmpty,
              leading: v.leading,
              multiline: v.multiline,
              trailing: v.trailing
          };
      };
      throw new Error("Failed pattern match at Tidy.Doc (line 289, column 1 - line 289, column 50): " + [ v.constructor.name ]);
  };
  var flattenMax = function (n) {
      return function (v) {
          return {
              doc: v.doc,
              isEmpty: v.isEmpty,
              leading: {
                  doc: v.leading.doc,
                  left: v.leading.left,
                  lines: Data_Ord.min(Data_Ord.ordInt)(v.leading.lines)(n),
                  multiline: v.leading.multiline,
                  right: v.leading.right
              },
              multiline: v.multiline,
              trailing: v.trailing
          };
      };
  };
  var flatten = flattenMax(0);
  var eqForceBreak = {
      eq: function (x) {
          return function (y) {
              if (x instanceof ForceNone && y instanceof ForceNone) {
                  return true;
              };
              if (x instanceof ForceSpace && y instanceof ForceSpace) {
                  return true;
              };
              if (x instanceof ForceBreak && y instanceof ForceBreak) {
                  return true;
              };
              return false;
          };
      }
  };
  var ordForceBreak = {
      compare: function (x) {
          return function (y) {
              if (x instanceof ForceNone && y instanceof ForceNone) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof ForceNone) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof ForceNone) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof ForceSpace && y instanceof ForceSpace) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof ForceSpace) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof ForceSpace) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof ForceBreak && y instanceof ForceBreak) {
                  return Data_Ordering.EQ.value;
              };
              throw new Error("Failed pattern match at Tidy.Doc (line 57, column 1 - line 57, column 48): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return eqForceBreak;
      }
  };
  var breaks = function (fl) {
      return function (n) {
          if (n >= 2) {
              return Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(Dodo["break"]);
          };
          if (n === 1) {
              return Dodo["break"];
          };
          if (Data_Boolean.otherwise) {
              if (fl instanceof ForceBreak) {
                  return Dodo["break"];
              };
              if (fl instanceof ForceSpace) {
                  return Dodo.space;
              };
              if (fl instanceof ForceNone) {
                  return Data_Monoid.mempty(Dodo_Internal.monoidDoc);
              };
              throw new Error("Failed pattern match at Tidy.Doc (line 430, column 17 - line 433, column 26): " + [ fl.constructor.name ]);
          };
          throw new Error("Failed pattern match at Tidy.Doc (line 426, column 1 - line 426, column 47): " + [ fl.constructor.name, n.constructor.name ]);
      };
  };
  var breakDoc = function (br) {
      return function (doc) {
          if (Dodo_Internal.isEmpty(doc)) {
              return doc;
          };
          if (Data_Boolean.otherwise) {
              if (br instanceof ForceBreak) {
                  return Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(doc);
              };
              if (br instanceof ForceSpace) {
                  return Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.space)(doc);
              };
              if (br instanceof ForceNone) {
                  return doc;
              };
              throw new Error("Failed pattern match at Tidy.Doc (line 421, column 17 - line 424, column 23): " + [ br.constructor.name ]);
          };
          throw new Error("Failed pattern match at Tidy.Doc (line 418, column 1 - line 418, column 51): " + [ br.constructor.name, doc.constructor.name ]);
      };
  };
  var flexDoubleBreak = function (v) {
      return function (v1) {
          if (v.isEmpty) {
              return v1;
          };
          if (v1.isEmpty) {
              return v;
          };
          if (Data_Boolean.otherwise) {
              var docLeft = Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.doc)(breakDoc(v.trailing.left)(v.trailing.doc));
              var docRight = Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v1.leading.doc)(breakDoc(v1.leading.right)(v1.doc));
              var $108 = v1.leading.lines >= 2 || v.multiline;
              if ($108) {
                  return {
                      doc: Data_Semigroup.append(Dodo_Internal.semigroupDoc)(docLeft)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(docRight))),
                      isEmpty: v.isEmpty,
                      leading: v.leading,
                      multiline: true,
                      trailing: v1.trailing
                  };
              };
              return {
                  doc: Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.flexSelect(docLeft)(Data_Monoid.mempty(Dodo_Internal.monoidDoc))(Dodo["break"]))(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(docRight)),
                  isEmpty: v.isEmpty,
                  leading: v.leading,
                  multiline: true,
                  trailing: v1.trailing
              };
          };
          throw new Error("Failed pattern match at Tidy.Doc (line 393, column 1 - line 393, column 49): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var joinDoc = function (spaceFn) {
      return function (v) {
          return function (v1) {
              if (v.isEmpty) {
                  return v1;
              };
              if (v1.isEmpty) {
                  return v;
              };
              if (Data_Boolean.otherwise) {
                  var docLeft = Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.doc)(breakDoc(v.trailing.left)(v.trailing.doc));
                  var docRight = Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v1.leading.doc)(breakDoc(v1.leading.right)(v1.doc));
                  var $114 = v1.leading.lines > 0;
                  if ($114) {
                      return {
                          doc: Data_Semigroup.append(Dodo_Internal.semigroupDoc)(docLeft)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(breaks(ForceBreak.value)(v1.leading.lines))(docRight)),
                          isEmpty: v.isEmpty,
                          leading: v.leading,
                          multiline: true,
                          trailing: v1.trailing
                      };
                  };
                  var v2 = spaceFn(Data_Ord.max(ordForceBreak)(v.trailing.right)(v1.leading.left))(v1.leading.multiline || v1.multiline)(docRight);
                  return {
                      doc: Data_Semigroup.append(Dodo_Internal.semigroupDoc)(docLeft)(v2.value1),
                      isEmpty: v.isEmpty,
                      leading: v.leading,
                      multiline: v.trailing.multiline || (v.multiline || v2.value0),
                      trailing: v1.trailing
                  };
              };
              throw new Error("Failed pattern match at Tidy.Doc (line 435, column 1 - line 435, column 102): " + [ spaceFn.constructor.name, v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var flexSoftBreak = joinDoc(function (f) {
      return function (m) {
          return function (doc) {
              if (f instanceof ForceBreak) {
                  return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(doc));
              };
              if (f instanceof ForceSpace) {
                  if (m) {
                      return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.space)(doc));
                  };
                  return new Data_Tuple.Tuple(false, Dodo.flexGroup(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.spaceBreak)(doc)));
              };
              if (f instanceof ForceNone) {
                  if (m) {
                      return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(doc));
                  };
                  return new Data_Tuple.Tuple(false, Dodo.flexGroup(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.softBreak)(doc)));
              };
              throw new Error("Failed pattern match at Tidy.Doc (line 358, column 37 - line 370, column 59): " + [ f.constructor.name ]);
          };
      };
  });
  var flexSpaceBreak = joinDoc(function (f) {
      return function (m) {
          return function (doc) {
              if (f instanceof ForceBreak) {
                  return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(doc));
              };
              if (m) {
                  return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.spaceBreak)(doc));
              };
              return new Data_Tuple.Tuple(false, Dodo.flexGroup(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.spaceBreak)(doc)));
          };
      };
  });
  var semigroupFormatDoc = {
      append: joinDoc(force(Control_Category.identity(Control_Category.categoryFn)))
  };
  var softBreak = joinDoc(function (f) {
      return function (m) {
          return function (doc) {
              if (f instanceof ForceBreak) {
                  return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(doc));
              };
              if (f instanceof ForceSpace) {
                  return new Data_Tuple.Tuple(m, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.spaceBreak)(doc));
              };
              if (f instanceof ForceNone) {
                  return new Data_Tuple.Tuple(m, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.softBreak)(doc));
              };
              throw new Error("Failed pattern match at Tidy.Doc (line 373, column 33 - line 379, column 36): " + [ f.constructor.name ]);
          };
      };
  });
  var softSpace = joinDoc(function (f) {
      return function (m) {
          return function (doc) {
              if (f instanceof ForceBreak) {
                  return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(doc));
              };
              if (f instanceof ForceSpace) {
                  return new Data_Tuple.Tuple(m, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.space)(doc));
              };
              if (f instanceof ForceNone) {
                  return new Data_Tuple.Tuple(m, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(softSpaceDoc)(doc));
              };
              throw new Error("Failed pattern match at Tidy.Doc (line 382, column 33 - line 388, column 34): " + [ f.constructor.name ]);
          };
      };
  });
  var space = joinDoc(force(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.space)));
  var spaceBreak = joinDoc(force(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.spaceBreak)));
  var toDoc = function (v) {
      if (v.isEmpty) {
          return Data_Monoid.mempty(Dodo_Internal.monoidDoc);
      };
      if (Data_Boolean.otherwise) {
          return Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.leading.doc)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(breakDoc(v.leading.right)(v.doc))(breakDoc(v.trailing.left)(v.trailing.doc)));
      };
      throw new Error("Failed pattern match at Tidy.Doc (line 482, column 1 - line 482, column 40): " + [ v.constructor.name ]);
  };
  var semigroupLeadingComment = {
      append: function (v) {
          return function (v1) {
              if (Dodo_Internal.isEmpty(v.doc)) {
                  return {
                      doc: v1.doc,
                      left: Data_Ord.max(ordForceBreak)(v.left)(v1.left),
                      lines: v.lines + v1.lines | 0,
                      multiline: v1.multiline,
                      right: v1.right
                  };
              };
              if (Dodo_Internal.isEmpty(v1.doc)) {
                  return {
                      doc: Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.doc)(breaks(ForceNone.value)(v1.lines)),
                      left: v.left,
                      lines: v.lines,
                      multiline: v.multiline || v1.lines > 0,
                      right: (function () {
                          var $133 = v1.lines > 0;
                          if ($133) {
                              return ForceNone.value;
                          };
                          return Data_Ord.max(ordForceBreak)(v.right)(v1.right);
                      })()
                  };
              };
              if (Data_Boolean.otherwise) {
                  var br = Data_Ord.max(ordForceBreak)(v.right)(v1.left);
                  var $134 = v1.lines > 0 || Data_Eq.eq(eqForceBreak)(br)(ForceBreak.value);
                  if ($134) {
                      return {
                          doc: Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.doc)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(breaks(ForceBreak.value)(v1.lines))(v1.doc)),
                          left: v.left,
                          lines: v.lines,
                          multiline: true,
                          right: v1.right
                      };
                  };
                  return {
                      doc: Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.doc)(breakDoc(br)(v1.doc)),
                      left: v.left,
                      lines: v.lines,
                      multiline: v.multiline || v1.multiline,
                      right: v1.right
                  };
              };
              throw new Error("Failed pattern match at Tidy.Doc (line 74, column 1 - line 104, column 14): " + [ v.constructor.name, v1.constructor.name ]);
          };
      }
  };
  var leadingBlockComment = function (str) {
      return function (v) {
          var v1 = formatBlockComment(str);
          var comm = {
              doc: v1.value1,
              left: ForceSpace.value,
              lines: 0,
              multiline: v1.value0,
              right: ForceSpace.value
          };
          return {
              doc: v.doc,
              isEmpty: false,
              leading: Data_Semigroup.append(semigroupLeadingComment)(comm)(v.leading),
              multiline: v.multiline,
              trailing: v.trailing
          };
      };
  };
  var leadingLineComment = function (str) {
      return function (v) {
          var comm = {
              doc: Dodo.text(str),
              left: ForceBreak.value,
              lines: 0,
              multiline: false,
              right: ForceBreak.value
          };
          return {
              doc: v.doc,
              isEmpty: false,
              leading: Data_Semigroup.append(semigroupLeadingComment)(comm)(v.leading),
              multiline: v.multiline,
              trailing: v.trailing
          };
      };
  };
  var monoidLeadingComment = {
      mempty: {
          doc: Data_Monoid.mempty(Dodo_Internal.monoidDoc),
          left: ForceNone.value,
          lines: 0,
          multiline: false,
          right: ForceNone.value
      },
      Semigroup0: function () {
          return semigroupLeadingComment;
      }
  };
  var semigroupTrailingComment = {
      append: function (v) {
          return function (v1) {
              if (Dodo_Internal.isEmpty(v.doc)) {
                  return {
                      doc: v1.doc,
                      left: Data_Ord.max(ordForceBreak)(v.left)(v1.left),
                      multiline: v1.multiline,
                      right: v1.right
                  };
              };
              if (Dodo_Internal.isEmpty(v1.doc)) {
                  return {
                      doc: v.doc,
                      left: v.left,
                      multiline: v.multiline,
                      right: Data_Ord.max(ordForceBreak)(v.right)(v1.right)
                  };
              };
              if (Data_Boolean.otherwise) {
                  return {
                      doc: Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.doc)(breakDoc(Data_Ord.max(ordForceBreak)(v.right)(v1.left))(v1.doc)),
                      left: v.left,
                      multiline: v.multiline || v1.multiline,
                      right: v1.right
                  };
              };
              throw new Error("Failed pattern match at Tidy.Doc (line 115, column 1 - line 126, column 12): " + [ v.constructor.name, v1.constructor.name ]);
          };
      }
  };
  var trailingBlockComment = function (str) {
      return function (v) {
          var v1 = formatBlockComment(str);
          var comm = {
              doc: v1.value1,
              left: ForceSpace.value,
              multiline: v1.value0,
              right: ForceSpace.value
          };
          return {
              doc: v.doc,
              isEmpty: false,
              leading: v.leading,
              multiline: v.multiline,
              trailing: Data_Semigroup.append(semigroupTrailingComment)(comm)(v.trailing)
          };
      };
  };
  var trailingLineComment = function (str) {
      return function (v) {
          var comm = {
              doc: Dodo.text(str),
              left: ForceSpace.value,
              multiline: false,
              right: ForceBreak.value
          };
          return {
              doc: v.doc,
              isEmpty: false,
              leading: v.leading,
              multiline: v.multiline,
              trailing: Data_Semigroup.append(semigroupTrailingComment)(comm)(v.trailing)
          };
      };
  };
  var monoidTrailingComment = {
      mempty: {
          doc: Data_Monoid.mempty(Dodo_Internal.monoidDoc),
          left: ForceNone.value,
          multiline: false,
          right: ForceNone.value
      },
      Semigroup0: function () {
          return semigroupTrailingComment;
      }
  };
  var monoidFormatDoc = {
      mempty: {
          doc: Data_Monoid.mempty(Dodo_Internal.monoidDoc),
          leading: Data_Monoid.mempty(monoidLeadingComment),
          isEmpty: true,
          multiline: false,
          trailing: Data_Monoid.mempty(monoidTrailingComment)
      },
      Semigroup0: function () {
          return semigroupFormatDoc;
      }
  };
  var fromDoc = function (doc) {
      if (Dodo_Internal.isEmpty(doc)) {
          return Data_Monoid.mempty(monoidFormatDoc);
      };
      if (Data_Boolean.otherwise) {
          return {
              doc: doc,
              leading: Data_Monoid.mempty(monoidLeadingComment),
              isEmpty: false,
              multiline: false,
              trailing: Data_Monoid.mempty(monoidTrailingComment)
          };
      };
      throw new Error("Failed pattern match at Tidy.Doc (line 158, column 1 - line 158, column 42): " + [ doc.constructor.name ]);
  };
  var text = function ($157) {
      return fromDoc(Dodo.text($157));
  };
  var joinWithMap = function (dictFoldable) {
      return function (op) {
          return function (k) {
              var go = function (a) {
                  return function (b) {
                      if (isEmpty(a)) {
                          return k(b);
                      };
                      if (Data_Boolean.otherwise) {
                          return op(a)(k(b));
                      };
                      throw new Error("Failed pattern match at Tidy.Doc (line 501, column 3 - line 503, column 29): " + [ a.constructor.name, b.constructor.name ]);
                  };
              };
              return Data_Foldable.foldl(dictFoldable)(go)(Data_Monoid.mempty(monoidFormatDoc));
          };
      };
  };
  var joinWith = function (dictFoldable) {
      return Data_Function.flip(joinWithMap(dictFoldable))(Control_Category.identity(Control_Category.categoryFn));
  };
  var $$break = joinDoc(force(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])));
  var anchor = function (v) {
      if (v.leading.lines > 0) {
          return {
              doc: v.doc,
              isEmpty: v.isEmpty,
              leading: {
                  doc: v.leading.doc,
                  left: v.leading.left,
                  lines: 0,
                  multiline: v.leading.multiline,
                  right: v.leading.right
              },
              multiline: true,
              trailing: v.trailing
          };
      };
      return v;
  };
  var alignCurrentColumn = mapDocs(Dodo.alignCurrentColumn);
  var align = function ($158) {
      return mapDocs(Dodo.align($158));
  };
  exports["ForceNone"] = ForceNone;
  exports["ForceSpace"] = ForceSpace;
  exports["ForceBreak"] = ForceBreak;
  exports["text"] = text;
  exports["leadingLineComment"] = leadingLineComment;
  exports["trailingLineComment"] = trailingLineComment;
  exports["leadingBlockComment"] = leadingBlockComment;
  exports["trailingBlockComment"] = trailingBlockComment;
  exports["anchor"] = anchor;
  exports["flatten"] = flatten;
  exports["indent"] = indent;
  exports["align"] = align;
  exports["alignCurrentColumn"] = alignCurrentColumn;
  exports["locally"] = locally;
  exports["break"] = $$break;
  exports["softBreak"] = softBreak;
  exports["spaceBreak"] = spaceBreak;
  exports["sourceBreak"] = sourceBreak;
  exports["forceMinSourceBreaks"] = forceMinSourceBreaks;
  exports["space"] = space;
  exports["softSpace"] = softSpace;
  exports["flexSpaceBreak"] = flexSpaceBreak;
  exports["flexSoftBreak"] = flexSoftBreak;
  exports["flexDoubleBreak"] = flexDoubleBreak;
  exports["flexGroup"] = flexGroup;
  exports["fromDoc"] = fromDoc;
  exports["toDoc"] = toDoc;
  exports["breakDoc"] = breakDoc;
  exports["joinWithMap"] = joinWithMap;
  exports["joinWith"] = joinWith;
  exports["eqForceBreak"] = eqForceBreak;
  exports["ordForceBreak"] = ordForceBreak;
  exports["monoidLeadingComment"] = monoidLeadingComment;
  exports["semigroupFormatDoc"] = semigroupFormatDoc;
  exports["monoidFormatDoc"] = monoidFormatDoc;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Tidy.Hang"] = $PS["Tidy.Hang"] || {};
  var exports = $PS["Tidy.Hang"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Dodo = $PS["Dodo"];
  var Dodo_Internal = $PS["Dodo.Internal"];
  var Tidy_Doc = $PS["Tidy.Doc"];                
  var HangBreak = (function () {
      function HangBreak(value0) {
          this.value0 = value0;
      };
      HangBreak.create = function (value0) {
          return new HangBreak(value0);
      };
      return HangBreak;
  })();
  var HangOps = (function () {
      function HangOps(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      HangOps.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new HangOps(value0, value1, value2);
              };
          };
      };
      return HangOps;
  })();
  var HangApp = (function () {
      function HangApp(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      HangApp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new HangApp(value0, value1, value2);
              };
          };
      };
      return HangApp;
  })();
  var HangingOp = (function () {
      function HangingOp(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      HangingOp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new HangingOp(value0, value1, value2);
              };
          };
      };
      return HangingOp;
  })();
  var overHangHead = function (f) {
      var go = function (v) {
          if (v instanceof HangBreak) {
              return new HangBreak(f(v.value0));
          };
          if (v instanceof HangOps) {
              return new HangOps(v.value0, go(v.value1), v.value2);
          };
          if (v instanceof HangApp) {
              return new HangApp(v.value0, go(v.value1), v.value2);
          };
          throw new Error("Failed pattern match at Tidy.Hang (line 62, column 8 - line 65, column 54): " + [ v.constructor.name ]);
      };
      return go;
  };
  var hangWithIndent = function (ind) {
      return function (a) {
          var $166 = Data_Maybe.maybe(a)(HangApp.create(ind)(a));
          return function ($167) {
              return $166(Data_Array_NonEmpty.fromArray($167));
          };
      };
  };
  var hangOps = HangOps.create(Tidy_Doc.indent);
  var hangHead = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v instanceof HangBreak) {
              $tco_done = true;
              return v.value0;
          };
          if (v instanceof HangOps) {
              $copy_v = v.value1;
              return;
          };
          if (v instanceof HangApp) {
              $copy_v = v.value1;
              return;
          };
          throw new Error("Failed pattern match at Tidy.Hang (line 54, column 12 - line 57, column 34): " + [ v.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var hangBreak = function ($168) {
      return HangBreak.create(Tidy_Doc.flexGroup($168));
  };
  var hangApp = HangApp.create(Tidy_Doc.indent);
  var hang = function (a) {
      var $169 = HangApp.create(Tidy_Doc.indent)(hangBreak(a));
      var $170 = Control_Applicative.pure(Data_Array_NonEmpty_Internal.applicativeNonEmptyArray);
      return function ($171) {
          return $169($170($171));
      };
  };
  var forceBreaks = function (n) {
      if (n >= 2) {
          return Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(Dodo["break"]);
      };
      if (Data_Boolean.otherwise) {
          return Dodo["break"];
      };
      throw new Error("Failed pattern match at Tidy.Hang (line 67, column 1 - line 67, column 38): " + [ n.constructor.name ]);
  };
  var breaks = function (fl) {
      return function (n) {
          if (Data_Eq.eq(Tidy_Doc.eqForceBreak)(fl)(Tidy_Doc.ForceBreak.value) || n > 0) {
              return forceBreaks(n);
          };
          if (Data_Eq.eq(Tidy_Doc.eqForceBreak)(fl)(Tidy_Doc.ForceSpace.value)) {
              return Dodo.space;
          };
          if (Data_Boolean.otherwise) {
              return Data_Monoid.mempty(Dodo_Internal.monoidDoc);
          };
          throw new Error("Failed pattern match at Tidy.Hang (line 72, column 1 - line 72, column 47): " + [ fl.constructor.name, n.constructor.name ]);
      };
  };
  var toFormatDoc = (function () {
      var realignOp = function ($copy_op) {
          return function ($copy_doc) {
              var $tco_var_op = $copy_op;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(op, doc) {
                  var v = hangHead(doc);
                  if (Data_Eq.notEq(Tidy_Doc.eqForceBreak)(op.leading.left)(Tidy_Doc.ForceBreak.value) && (op.leading.lines === 0 && (Data_Eq.notEq(Tidy_Doc.eqForceBreak)(op.trailing.right)(Tidy_Doc.ForceBreak.value) && (Data_Eq.notEq(Tidy_Doc.eqForceBreak)(v.leading.left)(Tidy_Doc.ForceBreak.value) && v.leading.lines > 0)))) {
                      $tco_var_op = Tidy_Doc.forceMinSourceBreaks(1)(op);
                      $copy_doc = overHangHead(Tidy_Doc.flatten)(doc);
                      return;
                  };
                  var v2 = function (v3) {
                      return new Data_Tuple.Tuple(op, doc);
                  };
                  if (doc instanceof HangBreak) {
                      var $60 = Data_Eq.notEq(Tidy_Doc.eqForceBreak)(op.trailing.right)(Tidy_Doc.ForceBreak.value) && (Data_Eq.notEq(Tidy_Doc.eqForceBreak)(v.leading.left)(Tidy_Doc.ForceBreak.value) && (v.leading.lines === 0 && (v.leading.multiline || op.multiline)));
                      if ($60) {
                          $tco_done = true;
                          return new Data_Tuple.Tuple(op, overHangHead(Tidy_Doc.forceMinSourceBreaks(1))(doc));
                      };
                      $tco_done = true;
                      return v2(true);
                  };
                  $tco_done = true;
                  return v2(true);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_op, $copy_doc);
              };
              return $tco_result;
          };
      };
      var indMulti = function (head) {
          return function (ind) {
              return function (doc) {
                  if (head instanceof HangApp) {
                      return doc;
                  };
                  return ind(doc);
              };
          };
      };
      var flexSelectJoin = function (v) {
          return function (v1) {
              return function (v2) {
                  var $$break = (function () {
                      if (Data_Eq.eq(Tidy_Doc.eqForceBreak)(v.leading.left)(Tidy_Doc.ForceBreak.value) || v.leading.lines > 0) {
                          return Dodo["break"];
                      };
                      if (Data_Boolean.otherwise) {
                          return Dodo.spaceBreak;
                      };
                      throw new Error("Failed pattern match at Tidy.Hang (line 255, column 7 - line 257, column 38): " + [  ]);
                  })();
                  var doc1$prime = Data_Semigroup.append(Dodo_Internal.semigroupDoc)($$break)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.leading.doc)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Tidy_Doc.breakDoc(v.leading.right)(v.doc))(Tidy_Doc.breakDoc(v.trailing.left)(v.trailing.doc))));
                  var doc2$prime = Data_Semigroup.append(Dodo_Internal.semigroupDoc)(breaks(Data_Ord.max(Tidy_Doc.ordForceBreak)(v.trailing.right)(v1.leading.left))(v1.leading.lines))(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v1.leading.doc)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Tidy_Doc.breakDoc(v1.leading.right)(v1.doc))(Tidy_Doc.breakDoc(v1.trailing.left)(v1.trailing.doc))));
                  var m3 = v2.leading.multiline || (v2.multiline || v2.trailing.multiline);
                  var m2 = v1.leading.multiline || (v1.multiline || v1.trailing.multiline);
                  var m1 = v.leading.multiline || (v.multiline || v.trailing.multiline);
                  var doc3$prime = Data_Semigroup.append(Dodo_Internal.semigroupDoc)(breaks(Data_Ord.max(Tidy_Doc.ordForceBreak)(v.trailing.right)(v2.leading.left))(v2.leading.lines))(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v2.leading.doc)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Tidy_Doc.breakDoc(v1.leading.right)(v2.doc))(Tidy_Doc.breakDoc(v2.trailing.left)(v2.trailing.doc))));
                  return {
                      doc: Dodo.flexSelect(doc1$prime)(doc2$prime)(doc3$prime),
                      leading: Data_Monoid.mempty(Tidy_Doc.monoidLeadingComment),
                      isEmpty: false,
                      multiline: m1 || m2 && m3,
                      trailing: {
                          doc: Data_Monoid.mempty(Dodo_Internal.monoidDoc),
                          left: Tidy_Doc.ForceNone.value,
                          multiline: false,
                          right: Data_Ord.max(Tidy_Doc.ordForceBreak)(v1.trailing.right)(v2.trailing.right)
                      }
                  };
              };
          };
      };
      var flexSelect = function (v) {
          return function (v1) {
              return function (v2) {
                  var doc1$prime = Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.doc)(Tidy_Doc.breakDoc(v.trailing.left)(v.trailing.doc));
                  var doc2$prime = Data_Semigroup.append(Dodo_Internal.semigroupDoc)(breaks(Data_Ord.max(Tidy_Doc.ordForceBreak)(v.trailing.right)(v1.leading.left))(v1.leading.lines))(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v1.leading.doc)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Tidy_Doc.breakDoc(v1.leading.right)(v1.doc))(Tidy_Doc.breakDoc(v1.trailing.left)(v1.trailing.doc))));
                  var m3 = v2.leading.multiline || (v2.multiline || v2.trailing.multiline);
                  var m2 = v1.leading.multiline || (v1.multiline || v1.trailing.multiline);
                  var m1 = v.multiline || v.trailing.multiline;
                  var doc3$prime = Data_Semigroup.append(Dodo_Internal.semigroupDoc)(breaks(Data_Ord.max(Tidy_Doc.ordForceBreak)(v.trailing.right)(v2.leading.left))(v2.leading.lines))(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v2.leading.doc)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Tidy_Doc.breakDoc(v1.leading.right)(v2.doc))(Tidy_Doc.breakDoc(v2.trailing.left)(v2.trailing.doc))));
                  return {
                      doc: Dodo.flexSelect(doc1$prime)(doc2$prime)(doc3$prime),
                      leading: v.leading,
                      isEmpty: false,
                      multiline: m1 || m2 && m3,
                      trailing: {
                          doc: Data_Monoid.mempty(Dodo_Internal.monoidDoc),
                          left: Tidy_Doc.ForceNone.value,
                          multiline: false,
                          right: Data_Ord.max(Tidy_Doc.ordForceBreak)(v1.trailing.right)(v2.trailing.right)
                      }
                  };
              };
          };
      };
      var docJoin = function (v) {
          if (v.isEmpty) {
              return v;
          };
          if (Data_Boolean.otherwise) {
              var $88 = Data_Eq.eq(Tidy_Doc.eqForceBreak)(v.leading.left)(Tidy_Doc.ForceBreak.value) || v.leading.lines > 0;
              if ($88) {
                  return v;
              };
              var $89 = v.leading.multiline || v.multiline;
              if ($89) {
                  return Tidy_Doc.forceMinSourceBreaks(1)(v);
              };
              return {
                  doc: Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.spaceBreak)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.leading.doc)(Tidy_Doc.breakDoc(v.leading.right)(v.doc))),
                  isEmpty: v.isEmpty,
                  leading: Data_Monoid.mempty(Tidy_Doc.monoidLeadingComment),
                  multiline: v.multiline,
                  trailing: v.trailing
              };
          };
          throw new Error("Failed pattern match at Tidy.Hang (line 301, column 3 - line 313, column 14): " + [ v.constructor.name ]);
      };
      var goLastOperand = function (prevAlgn) {
          return function (prevInd) {
              return function (v) {
                  if (v instanceof HangBreak) {
                      var doc$prime = Tidy_Doc.flexGroup(docJoin(v.value0));
                      return new Data_Tuple.Tuple(doc$prime, prevInd(doc$prime));
                  };
                  if (v instanceof HangApp) {
                      var v1 = Data_Array_NonEmpty.unsnoc(v.value2);
                      var $$this = Data_Tuple.fst(goInit((function () {
                          if (v.value1 instanceof HangApp) {
                              return overHangHead(Tidy_Doc.forceMinSourceBreaks(1))(v.value1);
                          };
                          return v.value1;
                      })()));
                      var next = Data_Array.foldr(goInitApp)(goLastApp(v1.last))(v1.init);
                      var docIndent = indMulti(v.value1)(v.value0)(Data_Tuple.fst(next));
                      var docGroup = flexSelectJoin($$this)(Data_Tuple.fst(next))(docIndent);
                      var docBreak = flexSelectJoin(prevInd($$this))(prevAlgn(docIndent))(prevInd(docIndent));
                      return new Data_Tuple.Tuple(docGroup, docBreak);
                  };
                  if (v instanceof HangOps) {
                      var v1 = Data_Array_NonEmpty.unsnoc(v.value2);
                      var $$this = Data_Tuple.fst(goInit(v.value1));
                      var next = Data_Array.foldr(goInitOp(v.value0))(goLastOp(v.value0)(v1.last))(v1.init);
                      var docIndent = v.value0(Data_Tuple.fst(next));
                      var docGroup = flexSelectJoin($$this)(Data_Tuple.fst(next))(docIndent);
                      var docBreak = flexSelectJoin(prevInd($$this))(prevAlgn(docIndent))(prevInd(docIndent));
                      return new Data_Tuple.Tuple(docGroup, docBreak);
                  };
                  throw new Error("Failed pattern match at Tidy.Hang (line 181, column 36 - line 204, column 30): " + [ v.constructor.name ]);
              };
          };
      };
      var goLastOp = function (ind) {
          return function (v) {
              var algn = (function () {
                  var $110 = v.value0 <= 1;
                  if ($110) {
                      return Tidy_Doc.align(2);
                  };
                  return Control_Category.identity(Control_Category.categoryFn);
              })();
              var next = goLastOperand(algn)(ind)(v.value2);
              var docIndent = Data_Tuple.snd(next);
              var docBreak = Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(docJoin(v.value1))(docIndent);
              var docGroup = flexSelectJoin(v.value1)(Data_Tuple.fst(next))(docIndent);
              return new Data_Tuple.Tuple(docGroup, docBreak);
          };
      };
      var goLastApp = function (doc) {
          var $$this = goLast(doc);
          var docGroup = Tidy_Doc.flexGroup(Data_Tuple.fst($$this));
          var docBreak = Data_Tuple.snd($$this);
          return new Data_Tuple.Tuple(docGroup, docBreak);
      };
      var goLast = function (v) {
          if (v instanceof HangBreak) {
              var doc$prime = docJoin(v.value0);
              return new Data_Tuple.Tuple(doc$prime, doc$prime);
          };
          if (v instanceof HangApp) {
              var v1 = Data_Array_NonEmpty.unsnoc(v.value2);
              var $$this = Data_Tuple.fst(goInit(v.value1));
              var next = Data_Array.foldr(goInitApp)(goLastApp(v1.last))(v1.init);
              var docGroup = flexSelectJoin($$this)(Data_Tuple.fst(next))(indMulti(v.value1)(v.value0)(Data_Tuple.fst(next)));
              var docBreak = Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(docJoin($$this))(indMulti(v.value1)(v.value0)(Data_Tuple.fst(next)));
              return new Data_Tuple.Tuple(docGroup, docBreak);
          };
          if (v instanceof HangOps) {
              var v1 = Data_Array_NonEmpty.unsnoc(v.value2);
              var $$this = Data_Tuple.fst(goInit(v.value1));
              var next = Data_Array.foldr(goInitOp(v.value0))(goLastOp(v.value0)(v1.last))(v1.init);
              var docGroup = flexSelectJoin($$this)(Data_Tuple.fst(next))(v.value0(Data_Tuple.fst(next)));
              var docBreak = Tidy_Doc["break"](docJoin($$this))(v.value0(Data_Tuple.snd(next)));
              return new Data_Tuple.Tuple(docGroup, docBreak);
          };
          throw new Error("Failed pattern match at Tidy.Hang (line 101, column 12 - line 120, column 30): " + [ v.constructor.name ]);
      };
      var goInitOperand = function (prevAlgn) {
          return function (prevInd) {
              return function (v) {
                  if (v instanceof HangBreak) {
                      var doc$prime = prevInd(Tidy_Doc.flexGroup(docJoin(v.value0)));
                      return new Data_Tuple.Tuple(doc$prime, doc$prime);
                  };
                  if (v instanceof HangApp) {
                      var v1 = Data_Array_NonEmpty.unsnoc(v.value2);
                      var $$this = Data_Tuple.fst(goInit(v.value1));
                      var next = Data_Array.foldr(goInitApp)(goLastApp(v1.last))(v1.init);
                      var docGroup = flexSelectJoin(prevInd($$this))(indMulti(v.value1)(function ($172) {
                          return prevAlgn(v.value0($172));
                      })(Data_Tuple.fst(next)))(prevInd(indMulti(v.value1)(v.value0)(Data_Tuple.fst(next))));
                      var docBreak = prevInd(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(docJoin($$this))(v.value0(Data_Tuple.snd(next))));
                      return new Data_Tuple.Tuple(docGroup, docBreak);
                  };
                  if (v instanceof HangOps) {
                      var v1 = Data_Array_NonEmpty.unsnoc(v.value2);
                      var $$this = Data_Tuple.fst(goInit(v.value1));
                      var next = Data_Array.foldr(goInitOp(v.value0))(goLastOp(v.value0)(v1.last))(v1.init);
                      var docGroup = flexSelectJoin(prevInd($$this))(prevAlgn(v.value0(Data_Tuple.fst(next))))(prevInd(v.value0(Data_Tuple.fst(next))));
                      var docBreak = prevInd(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(docJoin($$this))(v.value0(Data_Tuple.snd(next))));
                      return new Data_Tuple.Tuple(docGroup, docBreak);
                  };
                  throw new Error("Failed pattern match at Tidy.Hang (line 154, column 36 - line 179, column 30): " + [ v.constructor.name ]);
              };
          };
      };
      var goInitOp = function (ind) {
          return function (v) {
              return function (next) {
                  var v1 = realignOp(v.value1)(v.value2);
                  var algn = (function () {
                      var $146 = v.value0 <= 1;
                      if ($146) {
                          return Tidy_Doc.align(2);
                      };
                      return Control_Category.identity(Control_Category.categoryFn);
                  })();
                  var docOprd = Data_Tuple.fst(goInitOperand(algn)(ind)(v1.value1));
                  var docBreak = Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(docJoin(v1.value0))(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(docOprd)(Data_Tuple.snd(next)));
                  var docGroup = flexSelectJoin(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(v1.value0)(docOprd))(Data_Tuple.fst(next))(Data_Tuple.snd(next));
                  return new Data_Tuple.Tuple(docGroup, docBreak);
              };
          };
      };
      var goInitApp = function (doc) {
          return function (next) {
              var $$this = Data_Tuple.fst(goInit(doc));
              var docGroup = flexSelectJoin($$this)(Data_Tuple.fst(next))(Data_Tuple.snd(next));
              var docBreak = Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(docJoin($$this))(Data_Tuple.snd(next));
              return new Data_Tuple.Tuple(docGroup, docBreak);
          };
      };
      var goInit = function (v) {
          if (v instanceof HangBreak) {
              return new Data_Tuple.Tuple(v.value0, v.value0);
          };
          if (v instanceof HangApp) {
              var v1 = Data_Array_NonEmpty.unsnoc(v.value2);
              var $$this = Data_Tuple.fst(goInit(v.value1));
              var next = Data_Array.foldr(goInitApp)(goLastApp(v1.last))(v1.init);
              var docGroup = flexSelect($$this)(v.value0(Data_Tuple.fst(next)))(indMulti(v.value1)(v.value0)(Data_Tuple.fst(next)));
              var docBreak = Tidy_Doc["break"]($$this)(v.value0(Data_Tuple.snd(next)));
              return new Data_Tuple.Tuple(docGroup, docBreak);
          };
          if (v instanceof HangOps) {
              var v1 = Data_Array_NonEmpty.unsnoc(v.value2);
              var $$this = Data_Tuple.fst(goInit(v.value1));
              var next = Data_Array.foldr(goInitOp(v.value0))(goLastOp(v.value0)(v1.last))(v1.init);
              var docGroup = Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(Tidy_Doc.flexGroup($$this))(v.value0(Data_Tuple.fst(next)));
              var docBreak = Tidy_Doc["break"]($$this)(v.value0(Data_Tuple.snd(next)));
              return new Data_Tuple.Tuple(docGroup, docBreak);
          };
          throw new Error("Failed pattern match at Tidy.Hang (line 81, column 12 - line 99, column 30): " + [ v.constructor.name ]);
      };
      return function ($173) {
          return Data_Tuple.fst(goInit($173));
      };
  })();
  exports["HangingOp"] = HangingOp;
  exports["hang"] = hang;
  exports["hangWithIndent"] = hangWithIndent;
  exports["hangBreak"] = hangBreak;
  exports["hangApp"] = hangApp;
  exports["hangOps"] = hangOps;
  exports["toFormatDoc"] = toFormatDoc;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Tidy.Precedence"] = $PS["Tidy.Precedence"] || {};
  var exports = $PS["Tidy.Precedence"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];                
  var OperatorType = (function () {
      function OperatorType() {

      };
      OperatorType.value = new OperatorType();
      return OperatorType;
  })();
  var OperatorValue = (function () {
      function OperatorValue() {

      };
      OperatorValue.value = new OperatorValue();
      return OperatorValue;
  })();
  var QualifiedOperator = (function () {
      function QualifiedOperator(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      QualifiedOperator.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new QualifiedOperator(value0, value1, value2);
              };
          };
      };
      return QualifiedOperator;
  })();
  var OpList = (function () {
      function OpList(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      OpList.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new OpList(value0, value1, value2);
              };
          };
      };
      return OpList;
  })();
  var OpPure = (function () {
      function OpPure(value0) {
          this.value0 = value0;
      };
      OpPure.create = function (value0) {
          return new OpPure(value0);
      };
      return OpPure;
  })();
  var OpHead = (function () {
      function OpHead(value0) {
          this.value0 = value0;
      };
      OpHead.create = function (value0) {
          return new OpHead(value0);
      };
      return OpHead;
  })();
  var OpPrec = (function () {
      function OpPrec(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      OpPrec.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new OpPrec(value0, value1, value2);
              };
          };
      };
      return OpPrec;
  })();
  var snoc = function (prevOps) {
      return function (nextPrec) {
          return function (nextOps) {
              var v = Data_Array_NonEmpty.unsnoc(prevOps);
              return Data_Array_NonEmpty["snoc'"](v.init)(new Data_Tuple.Tuple(v.last.value0, new OpList(v.last.value1, nextPrec, nextOps)));
          };
      };
  };
  var unwind = (function () {
      var go = function ($copy_prec) {
          return function ($copy_ops) {
              return function ($copy_v) {
                  var $tco_var_prec = $copy_prec;
                  var $tco_var_ops = $copy_ops;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(prec, ops, v) {
                      if (v instanceof OpHead) {
                          $tco_done = true;
                          return new OpList(v.value0, prec, ops);
                      };
                      if (v instanceof OpPrec) {
                          $tco_var_prec = v.value1;
                          $tco_var_ops = snoc(v.value2)(prec)(ops);
                          $copy_v = v.value0;
                          return;
                      };
                      throw new Error("Failed pattern match at Tidy.Precedence (line 101, column 17 - line 104, column 46): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_prec, $tco_var_ops, $copy_v);
                  };
                  return $tco_result;
              };
          };
      };
      return function (v) {
          if (v instanceof OpHead) {
              return v.value0;
          };
          if (v instanceof OpPrec) {
              return go(v.value1)(v.value2)(v.value0);
          };
          throw new Error("Failed pattern match at Tidy.Precedence (line 97, column 10 - line 99, column 41): " + [ v.constructor.name ]);
      };
  })();
  var push = function ($copy_stk) {
      return function ($copy_chs) {
          var $tco_var_stk = $copy_stk;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(stk, chs) {
              if (chs instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return stk;
              };
              if (chs instanceof Data_List_Types.Cons && chs.value1 instanceof Data_List_Types.Nil) {
                  if (stk instanceof OpHead) {
                      $tco_done = true;
                      return new OpPrec(stk, chs.value0.value0, chs.value0.value1);
                  };
                  if (stk instanceof OpPrec) {
                      var v = Data_Ord.compare(Data_Ord.ordInt)(chs.value0.value0)(stk.value1);
                      if (v instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new OpPrec(stk.value0, stk.value1, Data_Semigroup.append(Data_Array_NonEmpty_Internal.semigroupNonEmptyArray)(stk.value2)(chs.value0.value1));
                      };
                      if (v instanceof Data_Ordering.GT) {
                          $tco_done = true;
                          return new OpPrec(stk, chs.value0.value0, chs.value0.value1);
                      };
                      if (v instanceof Data_Ordering.LT) {
                          $tco_var_stk = stk.value0;
                          $copy_chs = new Data_List_Types.Cons(new Data_Tuple.Tuple(stk.value1, stk.value2), chs);
                          return;
                      };
                      throw new Error("Failed pattern match at Tidy.Precedence (line 82, column 9 - line 85, column 60): " + [ v.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Tidy.Precedence (line 78, column 5 - line 85, column 60): " + [ stk.constructor.name ]);
              };
              if (chs instanceof Data_List_Types.Cons) {
                  if (stk instanceof OpHead) {
                      $tco_var_stk = new OpHead(new OpList(stk.value0, chs.value0.value0, chs.value0.value1));
                      $copy_chs = chs.value1;
                      return;
                  };
                  if (stk instanceof OpPrec) {
                      var v = Data_Ord.compare(Data_Ord.ordInt)(chs.value0.value0)(stk.value1);
                      if (v instanceof Data_Ordering.EQ) {
                          $tco_var_stk = new OpPrec(stk.value0, stk.value1, Data_Semigroup.append(Data_Array_NonEmpty_Internal.semigroupNonEmptyArray)(stk.value2)(chs.value0.value1));
                          $copy_chs = chs.value1;
                          return;
                      };
                      if (v instanceof Data_Ordering.GT) {
                          $tco_var_stk = new OpPrec(stk.value0, stk.value1, snoc(stk.value2)(chs.value0.value0)(chs.value0.value1));
                          $copy_chs = chs.value1;
                          return;
                      };
                      if (v instanceof Data_Ordering.LT) {
                          $tco_var_stk = stk.value0;
                          $copy_chs = new Data_List_Types.Cons(new Data_Tuple.Tuple(stk.value1, snoc(stk.value2)(chs.value0.value0)(chs.value0.value1)), chs.value1);
                          return;
                      };
                      throw new Error("Failed pattern match at Tidy.Precedence (line 91, column 9 - line 94, column 85): " + [ v.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Tidy.Precedence (line 87, column 5 - line 94, column 85): " + [ stk.constructor.name ]);
              };
              throw new Error("Failed pattern match at Tidy.Precedence (line 75, column 16 - line 94, column 85): " + [ chs.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_stk, $copy_chs);
          };
          return $tco_result;
      };
  };
  var eqOperatorNamespace = {
      eq: function (x) {
          return function (y) {
              if (x instanceof OperatorType && y instanceof OperatorType) {
                  return true;
              };
              if (x instanceof OperatorValue && y instanceof OperatorValue) {
                  return true;
              };
              return false;
          };
      }
  };
  var eqQualifiedOperator = {
      eq: function (x) {
          return function (y) {
              return Data_Eq.eq(Data_Maybe.eqMaybe(PureScript_CST_Types.eqModuleName))(x.value0)(y.value0) && Data_Eq.eq(eqOperatorNamespace)(x.value1)(y.value1) && Data_Eq.eq(PureScript_CST_Types.eqOperator)(x.value2)(y.value2);
          };
      }
  };
  var ordOperatorNamespace = {
      compare: function (x) {
          return function (y) {
              if (x instanceof OperatorType && y instanceof OperatorType) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof OperatorType) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof OperatorType) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof OperatorValue && y instanceof OperatorValue) {
                  return Data_Ordering.EQ.value;
              };
              throw new Error("Failed pattern match at Tidy.Precedence (line 33, column 1 - line 33, column 62): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return eqOperatorNamespace;
      }
  };
  var insertOperator = function (v) {
      return function (prec) {
          var opKey = new Data_Tuple.Tuple(v.value1, v.value2);
          return Data_Map_Internal.alter(Data_Maybe.ordMaybe(PureScript_CST_Types.ordModuleName))(function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Data_Maybe.Just.create(Data_Map_Internal.singleton(opKey)(prec));
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return Data_Maybe.Just.create(Data_Map_Internal.insert(Data_Tuple.ordTuple(ordOperatorNamespace)(PureScript_CST_Types.ordOperator))(opKey)(prec)(v1.value0));
              };
              throw new Error("Failed pattern match at Tidy.Precedence (line 159, column 5 - line 163, column 41): " + [ v1.constructor.name ]);
          })(v.value0);
      };
  };
  var lookupOperator = function (v) {
      return function (precMap) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Data_Maybe.ordMaybe(PureScript_CST_Types.ordModuleName))(v.value0)(precMap))(Data_Map_Internal.lookup(Data_Tuple.ordTuple(ordOperatorNamespace)(PureScript_CST_Types.ordOperator))(new Data_Tuple.Tuple(v.value1, v.value2)));
      };
  };
  var remapOperatorTo = function (newModName) {
      return function (v) {
          return function (precMap) {
              return Data_Maybe.fromMaybe(precMap)(Control_Bind.bind(Data_Maybe.bindMaybe)(lookupOperator(v)(precMap))(function (prec) {
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(insertOperator(new QualifiedOperator(newModName, v.value1, v.value2))(prec)(precMap));
              }));
          };
      };
  };
  var remapModuleTo = function (newModName) {
      return function (modName) {
          return function (precMap) {
              return Data_Maybe.fromMaybe(precMap)(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Data_Maybe.ordMaybe(PureScript_CST_Types.ordModuleName))(new Data_Maybe.Just(modName))(precMap))(function (ops) {
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Map_Internal.alter(Data_Maybe.ordMaybe(PureScript_CST_Types.ordModuleName))(function (v) {
                      if (v instanceof Data_Maybe.Nothing) {
                          return new Data_Maybe.Just(ops);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return new Data_Maybe.Just(Data_Map_Internal.union(Data_Tuple.ordTuple(ordOperatorNamespace)(PureScript_CST_Types.ordOperator))(ops)(v.value0));
                      };
                      throw new Error("Failed pattern match at Tidy.Precedence (line 184, column 7 - line 188, column 38): " + [ v.constructor.name ]);
                  })(newModName)(precMap));
              }));
          };
      };
  };
  var remapModuleToHiding = function (dictFoldable) {
      return function (hiding) {
          return function (newModName) {
              return function (modName) {
                  return function (precMap) {
                      return Data_Maybe.fromMaybe(precMap)(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Data_Maybe.ordMaybe(PureScript_CST_Types.ordModuleName))(new Data_Maybe.Just(modName))(precMap))(function (ops) {
                          var filteredOps = Data_Map_Internal.filterKeys(Data_Tuple.ordTuple(ordOperatorNamespace)(PureScript_CST_Types.ordOperator))((function () {
                              var $179 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                              var $180 = Data_Function.flip(Data_Foldable.elem(dictFoldable)(eqQualifiedOperator))(hiding);
                              var $181 = Data_Tuple.uncurry(QualifiedOperator.create(new Data_Maybe.Just(modName)));
                              return function ($182) {
                                  return $179($180($181($182)));
                              };
                          })())(ops);
                          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Map_Internal.alter(Data_Maybe.ordMaybe(PureScript_CST_Types.ordModuleName))(function (v) {
                              if (v instanceof Data_Maybe.Nothing) {
                                  return new Data_Maybe.Just(filteredOps);
                              };
                              if (v instanceof Data_Maybe.Just) {
                                  return new Data_Maybe.Just(Data_Map_Internal.union(Data_Tuple.ordTuple(ordOperatorNamespace)(PureScript_CST_Types.ordOperator))(filteredOps)(v.value0));
                              };
                              throw new Error("Failed pattern match at Tidy.Precedence (line 205, column 7 - line 209, column 46): " + [ v.constructor.name ]);
                          })(newModName)(precMap));
                      }));
                  };
              };
          };
      };
  };
  var remapOperators = (function () {
      var goImport = function (modName) {
          return function (v) {
              if (v instanceof PureScript_CST_Types.ImportOp) {
                  return [ new QualifiedOperator(new Data_Maybe.Just(modName), OperatorValue.value, v.value0.name) ];
              };
              if (v instanceof PureScript_CST_Types.ImportTypeOp) {
                  return [ new QualifiedOperator(new Data_Maybe.Just(modName), OperatorType.value, v.value1.name) ];
              };
              return [  ];
          };
      };
      var goImportDecl = function (precMap) {
          return function (v) {
              var newModName = Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
                  return v1.value1.name;
              })(v.qualified);
              if (v.names instanceof Data_Maybe.Nothing) {
                  return remapModuleTo(newModName)(v.module.name)(precMap);
              };
              if (v.names instanceof Data_Maybe.Just) {
                  var impOps = Data_Semigroup.append(Data_Semigroup.semigroupArray)(goImport(v.module.name)(v.names.value0.value1.value.head))(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidArray)((function () {
                      var $183 = goImport(v.module.name);
                      return function ($184) {
                          return $183(Data_Tuple.snd($184));
                      };
                  })())(v.names.value0.value1.value.tail));
                  var $136 = Data_Maybe.isJust(v.names.value0.value0);
                  if ($136) {
                      return remapModuleToHiding(Data_Foldable.foldableArray)(impOps)(newModName)(v.module.name)(precMap);
                  };
                  return Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Function.flip(remapOperatorTo(newModName)))(precMap)(impOps);
              };
              throw new Error("Failed pattern match at Tidy.Precedence (line 121, column 5 - line 132, column 67): " + [ v.names.constructor.name ]);
          };
      };
      var goDecl = function (modName) {
          return function (precMap) {
              return function (v) {
                  if (v instanceof PureScript_CST_Types.DeclFixity) {
                      if (v.value0.operator instanceof PureScript_CST_Types.FixityValue) {
                          return insertOperator(new QualifiedOperator(new Data_Maybe.Just(modName), OperatorValue.value, v.value0.operator.value2.name))(v.value0.prec.value1)(insertOperator(new QualifiedOperator(Data_Maybe.Nothing.value, OperatorValue.value, v.value0.operator.value2.name))(v.value0.prec.value1)(precMap));
                      };
                      if (v.value0.operator instanceof PureScript_CST_Types.FixityType) {
                          return insertOperator(new QualifiedOperator(new Data_Maybe.Just(modName), OperatorType.value, v.value0.operator.value3.name))(v.value0.prec.value1)(insertOperator(new QualifiedOperator(Data_Maybe.Nothing.value, OperatorType.value, v.value0.operator.value3.name))(v.value0.prec.value1)(precMap));
                      };
                      throw new Error("Failed pattern match at Tidy.Precedence (line 144, column 7 - line 152, column 85): " + [ v.value0.operator.constructor.name ]);
                  };
                  return precMap;
              };
          };
      };
      var goModule = function (precMap) {
          return function (v) {
              return Data_Foldable.foldl(Data_Foldable.foldableArray)(goDecl(v.header.name.name))(Data_Foldable.foldl(Data_Foldable.foldableArray)(goImportDecl)(precMap)(v.header.imports))(v.body.decls);
          };
      };
      return goModule;
  })();
  var defaultPrecedence = 10;
  var toOperatorTree = function (precMap) {
      return function (getOperator) {
          return function (init) {
              var go = function (stk) {
                  return function (v) {
                      var v1 = getOperator(v.value0);
                      var prec = Data_Maybe.fromMaybe(defaultPrecedence)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Data_Tuple.ordTuple(ordOperatorNamespace)(PureScript_CST_Types.ordOperator))(new Data_Tuple.Tuple(v1.value1, v1.value2)))(Data_Map_Internal.lookup(Data_Maybe.ordMaybe(PureScript_CST_Types.ordModuleName))(v1.value0)(precMap)));
                      var opCh = Control_Applicative.pure(Data_Array_NonEmpty_Internal.applicativeNonEmptyArray)(Data_Tuple.Tuple.create(v.value0)(new OpPure(v.value1)));
                      return push(stk)(Control_Applicative.pure(Data_List_Types.applicativeList)(new Data_Tuple.Tuple(prec, opCh)));
                  };
              };
              var $185 = Data_Foldable.foldl(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(go)(new OpHead(new OpPure(init)));
              return function ($186) {
                  return unwind($185($186));
              };
          };
      };
  };
  exports["QualifiedOperator"] = QualifiedOperator;
  exports["OperatorType"] = OperatorType;
  exports["OperatorValue"] = OperatorValue;
  exports["OpList"] = OpList;
  exports["OpPure"] = OpPure;
  exports["toOperatorTree"] = toOperatorTree;
  exports["remapOperators"] = remapOperators;
  exports["insertOperator"] = insertOperator;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Tidy.Token"] = $PS["Tidy.Token"] || {};
  var exports = $PS["Tidy.Token"];
  var Data_Maybe = $PS["Data.Maybe"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];                
  var UnicodeSource = (function () {
      function UnicodeSource() {

      };
      UnicodeSource.value = new UnicodeSource();
      return UnicodeSource;
  })();
  var UnicodeAlways = (function () {
      function UnicodeAlways() {

      };
      UnicodeAlways.value = new UnicodeAlways();
      return UnicodeAlways;
  })();
  var UnicodeNever = (function () {
      function UnicodeNever() {

      };
      UnicodeNever.value = new UnicodeNever();
      return UnicodeNever;
  })();
  var printUnicode = function (ascii) {
      return function (uni) {
          return function (style) {
              return function (v) {
                  if (v instanceof UnicodeNever) {
                      return ascii;
                  };
                  if (v instanceof UnicodeAlways) {
                      return uni;
                  };
                  if (v instanceof UnicodeSource) {
                      if (style instanceof PureScript_CST_Types.ASCII) {
                          return ascii;
                      };
                      if (style instanceof PureScript_CST_Types.Unicode) {
                          return uni;
                      };
                      throw new Error("Failed pattern match at Tidy.Token (line 23, column 5 - line 25, column 21): " + [ style.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Tidy.Token (line 19, column 32 - line 25, column 21): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var printQualified = function (moduleName) {
      return function (name) {
          if (moduleName instanceof Data_Maybe.Nothing) {
              return name;
          };
          if (moduleName instanceof Data_Maybe.Just) {
              return moduleName.value0 + ("." + name);
          };
          throw new Error("Failed pattern match at Tidy.Token (line 97, column 34 - line 99, column 44): " + [ moduleName.constructor.name ]);
      };
  };
  var printToken = function (option) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.TokLeftParen) {
              return "(";
          };
          if (v instanceof PureScript_CST_Types.TokRightParen) {
              return ")";
          };
          if (v instanceof PureScript_CST_Types.TokLeftBrace) {
              return "{";
          };
          if (v instanceof PureScript_CST_Types.TokRightBrace) {
              return "}";
          };
          if (v instanceof PureScript_CST_Types.TokLeftSquare) {
              return "[";
          };
          if (v instanceof PureScript_CST_Types.TokRightSquare) {
              return "]";
          };
          if (v instanceof PureScript_CST_Types.TokLeftArrow) {
              return printUnicode("<-")("\u2190")(v.value0)(option);
          };
          if (v instanceof PureScript_CST_Types.TokRightArrow) {
              return printUnicode("->")("\u2192")(v.value0)(option);
          };
          if (v instanceof PureScript_CST_Types.TokRightFatArrow) {
              return printUnicode("=>")("\u21d2")(v.value0)(option);
          };
          if (v instanceof PureScript_CST_Types.TokDoubleColon) {
              return printUnicode("::")("\u2237")(v.value0)(option);
          };
          if (v instanceof PureScript_CST_Types.TokForall) {
              return printUnicode("forall")("\u2200")(v.value0)(option);
          };
          if (v instanceof PureScript_CST_Types.TokEquals) {
              return "=";
          };
          if (v instanceof PureScript_CST_Types.TokPipe) {
              return "|";
          };
          if (v instanceof PureScript_CST_Types.TokTick) {
              return "`";
          };
          if (v instanceof PureScript_CST_Types.TokDot) {
              return ".";
          };
          if (v instanceof PureScript_CST_Types.TokComma) {
              return ",";
          };
          if (v instanceof PureScript_CST_Types.TokUnderscore) {
              return "_";
          };
          if (v instanceof PureScript_CST_Types.TokBackslash) {
              return "\\";
          };
          if (v instanceof PureScript_CST_Types.TokAt) {
              return "@";
          };
          if (v instanceof PureScript_CST_Types.TokLowerName) {
              return printQualified(v.value0)(v.value1);
          };
          if (v instanceof PureScript_CST_Types.TokUpperName) {
              return printQualified(v.value0)(v.value1);
          };
          if (v instanceof PureScript_CST_Types.TokOperator) {
              return printQualified(v.value0)(v.value1);
          };
          if (v instanceof PureScript_CST_Types.TokSymbolName) {
              return printQualified(v.value0)("(" + (v.value1 + ")"));
          };
          if (v instanceof PureScript_CST_Types.TokSymbolArrow) {
              return printUnicode("(->)")("(\u2192)")(v.value0)(option);
          };
          if (v instanceof PureScript_CST_Types.TokHole) {
              return "?" + v.value0;
          };
          if (v instanceof PureScript_CST_Types.TokChar) {
              return "'" + (v.value0 + "'");
          };
          if (v instanceof PureScript_CST_Types.TokString) {
              return "\"" + (v.value0 + "\"");
          };
          if (v instanceof PureScript_CST_Types.TokRawString) {
              return "\"\"\"" + (v.value0 + "\"\"\"");
          };
          if (v instanceof PureScript_CST_Types.TokInt) {
              return v.value0;
          };
          if (v instanceof PureScript_CST_Types.TokNumber) {
              return v.value0;
          };
          if (v instanceof PureScript_CST_Types.TokLayoutStart) {
              return "";
          };
          if (v instanceof PureScript_CST_Types.TokLayoutSep) {
              return "";
          };
          if (v instanceof PureScript_CST_Types.TokLayoutEnd) {
              return "";
          };
          throw new Error("Failed pattern match at Tidy.Token (line 28, column 21 - line 94, column 7): " + [ v.constructor.name ]);
      };
  };
  var eqUnicodeOption = {
      eq: function (x) {
          return function (y) {
              if (x instanceof UnicodeSource && y instanceof UnicodeSource) {
                  return true;
              };
              if (x instanceof UnicodeAlways && y instanceof UnicodeAlways) {
                  return true;
              };
              if (x instanceof UnicodeNever && y instanceof UnicodeNever) {
                  return true;
              };
              return false;
          };
      }
  };
  exports["UnicodeSource"] = UnicodeSource;
  exports["UnicodeAlways"] = UnicodeAlways;
  exports["UnicodeNever"] = UnicodeNever;
  exports["printToken"] = printToken;
  exports["eqUnicodeOption"] = eqUnicodeOption;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Tidy"] = $PS["Tidy"] || {};
  var exports = $PS["Tidy"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Void = $PS["Data.Void"];
  var Dodo = $PS["Dodo"];
  var Dodo_Internal = $PS["Dodo.Internal"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];
  var Tidy_Doc = $PS["Tidy.Doc"];
  var Tidy_Hang = $PS["Tidy.Hang"];
  var Tidy_Precedence = $PS["Tidy.Precedence"];
  var Tidy_Token = $PS["Tidy.Token"];
  var Tidy_Util = $PS["Tidy.Util"];                
  var TypeArrowFirst = (function () {
      function TypeArrowFirst() {

      };
      TypeArrowFirst.value = new TypeArrowFirst();
      return TypeArrowFirst;
  })();
  var TypeArrowLast = (function () {
      function TypeArrowLast() {

      };
      TypeArrowLast.value = new TypeArrowLast();
      return TypeArrowLast;
  })();
  var PolyForall = (function () {
      function PolyForall(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      PolyForall.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new PolyForall(value0, value1, value2);
              };
          };
      };
      return PolyForall;
  })();
  var PolyArrow = (function () {
      function PolyArrow(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      PolyArrow.create = function (value0) {
          return function (value1) {
              return new PolyArrow(value0, value1);
          };
      };
      return PolyArrow;
  })();
  var ImportWrapSource = (function () {
      function ImportWrapSource() {

      };
      ImportWrapSource.value = new ImportWrapSource();
      return ImportWrapSource;
  })();
  var ImportWrapAuto = (function () {
      function ImportWrapAuto() {

      };
      ImportWrapAuto.value = new ImportWrapAuto();
      return ImportWrapAuto;
  })();
  var ImportSortSource = (function () {
      function ImportSortSource() {

      };
      ImportSortSource.value = new ImportSortSource();
      return ImportSortSource;
  })();
  var ImportSortIde = (function () {
      function ImportSortIde() {

      };
      ImportSortIde.value = new ImportSortIde();
      return ImportSortIde;
  })();
  var ImportClassCmp = (function () {
      function ImportClassCmp(value0) {
          this.value0 = value0;
      };
      ImportClassCmp.create = function (value0) {
          return new ImportClassCmp(value0);
      };
      return ImportClassCmp;
  })();
  var ImportTypeOpCmp = (function () {
      function ImportTypeOpCmp(value0) {
          this.value0 = value0;
      };
      ImportTypeOpCmp.create = function (value0) {
          return new ImportTypeOpCmp(value0);
      };
      return ImportTypeOpCmp;
  })();
  var ImportTypeCmp = (function () {
      function ImportTypeCmp(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ImportTypeCmp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ImportTypeCmp(value0, value1, value2);
              };
          };
      };
      return ImportTypeCmp;
  })();
  var ImportValueCmp = (function () {
      function ImportValueCmp(value0) {
          this.value0 = value0;
      };
      ImportValueCmp.create = function (value0) {
          return new ImportValueCmp(value0);
      };
      return ImportValueCmp;
  })();
  var ImportOpCmp = (function () {
      function ImportOpCmp(value0) {
          this.value0 = value0;
      };
      ImportOpCmp.create = function (value0) {
          return new ImportOpCmp(value0);
      };
      return ImportOpCmp;
  })();
  var ImportErrorCmp = (function () {
      function ImportErrorCmp() {

      };
      ImportErrorCmp.value = new ImportErrorCmp();
      return ImportErrorCmp;
  })();
  var ImportModuleCmp = (function () {
      function ImportModuleCmp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      ImportModuleCmp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new ImportModuleCmp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return ImportModuleCmp;
  })();
  var Grouped = (function () {
      function Grouped() {

      };
      Grouped.value = new Grouped();
      return Grouped;
  })();
  var NotGrouped = (function () {
      function NotGrouped() {

      };
      NotGrouped.value = new NotGrouped();
      return NotGrouped;
  })();
  var IfThen = (function () {
      function IfThen(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      IfThen.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new IfThen(value0, value1, value2, value3);
                  };
              };
          };
      };
      return IfThen;
  })();
  var ElseIfThen = (function () {
      function ElseIfThen(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      ElseIfThen.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new ElseIfThen(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return ElseIfThen;
  })();
  var Else = (function () {
      function Else(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Else.create = function (value0) {
          return function (value1) {
              return new Else(value0, value1);
          };
      };
      return Else;
  })();
  var DeclGroupSame = (function () {
      function DeclGroupSame() {

      };
      DeclGroupSame.value = new DeclGroupSame();
      return DeclGroupSame;
  })();
  var DeclGroupHard = (function () {
      function DeclGroupHard() {

      };
      DeclGroupHard.value = new DeclGroupHard();
      return DeclGroupHard;
  })();
  var DeclGroupSoft = (function () {
      function DeclGroupSoft() {

      };
      DeclGroupSoft.value = new DeclGroupSoft();
      return DeclGroupSoft;
  })();
  var DeclGroupValueSignature = (function () {
      function DeclGroupValueSignature(value0) {
          this.value0 = value0;
      };
      DeclGroupValueSignature.create = function (value0) {
          return new DeclGroupValueSignature(value0);
      };
      return DeclGroupValueSignature;
  })();
  var DeclGroupValue = (function () {
      function DeclGroupValue(value0) {
          this.value0 = value0;
      };
      DeclGroupValue.create = function (value0) {
          return new DeclGroupValue(value0);
      };
      return DeclGroupValue;
  })();
  var DeclGroupTypeSignature = (function () {
      function DeclGroupTypeSignature(value0) {
          this.value0 = value0;
      };
      DeclGroupTypeSignature.create = function (value0) {
          return new DeclGroupTypeSignature(value0);
      };
      return DeclGroupTypeSignature;
  })();
  var DeclGroupType = (function () {
      function DeclGroupType(value0) {
          this.value0 = value0;
      };
      DeclGroupType.create = function (value0) {
          return new DeclGroupType(value0);
      };
      return DeclGroupType;
  })();
  var DeclGroupClass = (function () {
      function DeclGroupClass(value0) {
          this.value0 = value0;
      };
      DeclGroupClass.create = function (value0) {
          return new DeclGroupClass(value0);
      };
      return DeclGroupClass;
  })();
  var DeclGroupInstance = (function () {
      function DeclGroupInstance() {

      };
      DeclGroupInstance.value = new DeclGroupInstance();
      return DeclGroupInstance;
  })();
  var DeclGroupFixity = (function () {
      function DeclGroupFixity() {

      };
      DeclGroupFixity.value = new DeclGroupFixity();
      return DeclGroupFixity;
  })();
  var DeclGroupForeign = (function () {
      function DeclGroupForeign() {

      };
      DeclGroupForeign.value = new DeclGroupForeign();
      return DeclGroupForeign;
  })();
  var DeclGroupRole = (function () {
      function DeclGroupRole() {

      };
      DeclGroupRole.value = new DeclGroupRole();
      return DeclGroupRole;
  })();
  var DeclGroupUnknown = (function () {
      function DeclGroupUnknown() {

      };
      DeclGroupUnknown.value = new DeclGroupUnknown();
      return DeclGroupUnknown;
  })();
  var toQualifiedOperatorTree = function (precMap) {
      return function (opNs) {
          return Tidy_Precedence.toOperatorTree(precMap)(function (v) {
              return new Tidy_Precedence.QualifiedOperator(v.module, opNs, v.name);
          });
      };
  };
  var toPolytype = (function () {
      var go = function ($copy_init) {
          return function ($copy_v) {
              var $tco_var_init = $copy_init;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(init, v) {
                  if (v instanceof PureScript_CST_Types.TypeForall) {
                      $tco_var_init = Data_Array.snoc(init)(new PolyForall(v.value0, v.value1, v.value2));
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof PureScript_CST_Types.TypeArrow) {
                      $tco_var_init = Data_Array.snoc(init)(new PolyArrow(v.value0, v.value1));
                      $copy_v = v.value2;
                      return;
                  };
                  if (v instanceof PureScript_CST_Types.TypeConstrained) {
                      $tco_var_init = Data_Array.snoc(init)(new PolyArrow(v.value0, v.value1));
                      $copy_v = v.value2;
                      return;
                  };
                  $tco_done = true;
                  return {
                      init: init,
                      last: v
                  };
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_init, $copy_v);
              };
              return $tco_result;
          };
      };
      return go([  ]);
  })();
  var toElseIfChain = function (ifte) {
      var go = function ($copy_acc) {
          return function ($copy_curr) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, curr) {
                  if (curr["false"] instanceof PureScript_CST_Types.ExprIf) {
                      var chain = new ElseIfThen(curr["else"], curr["false"].value0.keyword, curr["false"].value0.cond, curr["false"].value0.then, curr["false"]["value0"]["true"]);
                      $tco_var_acc = Data_Array_NonEmpty.snoc(acc)(chain);
                      $copy_curr = curr["false"].value0;
                      return;
                  };
                  $tco_done = true;
                  return Data_Array_NonEmpty.snoc(acc)(new Else(curr["else"], curr["false"]));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_curr);
              };
              return $tco_result;
          };
      };
      return go(Control_Applicative.pure(Data_Array_NonEmpty_Internal.applicativeNonEmptyArray)(new IfThen(ifte.keyword, ifte.cond, ifte.then, ifte["true"])))(ifte);
  };
  var formatString = (function () {
      var $978 = Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(function (v) {
          var v1 = Data_Array.unsnoc(v.tail);
          if (v1 instanceof Data_Maybe.Nothing) {
              return Tidy_Doc.text(v.head);
          };
          if (v1 instanceof Data_Maybe.Just) {
              return Tidy_Doc["break"](Tidy_Doc["break"](Tidy_Doc.text(v.head + "\\"))(Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc["break"])(function (str) {
                  return Tidy_Doc.text("\\" + (str + "\\"));
              })(v1.value0.init)))(Tidy_Doc.text("\\" + v1.value0.last));
          };
          throw new Error("Failed pattern match at Tidy (line 186, column 3 - line 191, column 41): " + [ v1.constructor.name ]);
      });
      return function ($979) {
          return $978(Data_Array.uncons(Tidy_Util.splitStringEscapeLines($979)));
      };
  })();
  var formatRawString = (function () {
      var $980 = Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(function (v) {
          var $186 = Data_Array["null"](v.tail);
          if ($186) {
              return Tidy_Doc.text(v.head);
          };
          return Tidy_Doc.fromDoc(Dodo.lines(Data_Foldable.foldableArray)([ Dodo.text(v.head), Dodo.locally(function (v1) {
              return {
                  indent: 0,
                  indentSpaces: "",
                  indentUnit: v1.indentUnit,
                  indentWidth: v1.indentWidth,
                  pageWidth: v1.pageWidth,
                  ribbonRatio: v1.ribbonRatio
              };
          })(Data_Array.intercalate(Dodo_Internal.monoidDoc)(Dodo["break"])(Data_Functor.map(Data_Functor.functorArray)(Dodo.text)(v.tail))) ]));
      });
      return function ($981) {
          return $980(Data_Array.uncons(Tidy_Util.splitLines($981)));
      };
  })();
  var formatListElem = function (alignment) {
      return function (format) {
          return function (conf) {
              return function (b) {
                  return Tidy_Doc.flexGroup(Tidy_Doc.align(alignment)(Tidy_Doc.anchor(format(conf)(b))));
              };
          };
      };
  };
  var formatHangingOperatorTree = function (formatOperator) {
      return function (format) {
          return function (conf) {
              var opWidth = function (v) {
                  return v.token.range.end.column - v.token.range.start.column | 0;
              };
              var go = function (v) {
                  if (v instanceof Tidy_Precedence.OpPure) {
                      return format(conf)(v.value0);
                  };
                  if (v instanceof Tidy_Precedence.OpList) {
                      return Tidy_Hang.hangOps(go(v.value0))(Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(function (v1) {
                          return new Tidy_Hang.HangingOp(opWidth(v1.value0), formatOperator(conf)(v1.value0), go(v1.value1));
                      })(v.value2));
                  };
                  throw new Error("Failed pattern match at Tidy (line 1169, column 8 - line 1174, column 93): " + [ v.constructor.name ]);
              };
              return go;
          };
      };
  };
  var formatErrorVoid = {
      formatError: Data_Void.absurd
  };
  var formatError = function (dict) {
      return dict.formatError;
  };
  var formatDeclGroups = function (declSeparator) {
      return function (k) {
          return function (format) {
              return function (conf) {
                  var joinDecls = function (acc) {
                      var newDoc = Tidy_Doc.joinWithMap(Data_List_Types.foldableNonEmptyList)(Tidy_Doc["break"])(format(conf))(acc.decls);
                      if (acc.sep instanceof DeclGroupSame) {
                          return Tidy_Doc["break"](newDoc)(acc.doc);
                      };
                      if (acc.sep instanceof DeclGroupSoft) {
                          return Tidy_Doc.flexDoubleBreak(newDoc)(acc.doc);
                      };
                      if (acc.sep instanceof DeclGroupHard) {
                          return Tidy_Doc["break"](newDoc)(Tidy_Doc.forceMinSourceBreaks(2)(acc.doc));
                      };
                      throw new Error("Failed pattern match at Tidy (line 1381, column 19 - line 1387, column 52): " + [ acc.sep.constructor.name ]);
                  };
                  var go = function (decl) {
                      return function ($982) {
                          return Data_Maybe.Just.create((function (v) {
                              if (v instanceof Data_Maybe.Nothing) {
                                  return {
                                      doc: Data_Monoid.mempty(Tidy_Doc.monoidFormatDoc),
                                      sep: DeclGroupSame.value,
                                      group: k(decl),
                                      decls: Data_List_NonEmpty.singleton(decl)
                                  };
                              };
                              if (v instanceof Data_Maybe.Just) {
                                  var group = k(decl);
                                  var v1 = declSeparator(group)(v.value0.group);
                                  if (v1 instanceof DeclGroupSame) {
                                      return {
                                          doc: v.value0.doc,
                                          sep: v.value0.sep,
                                          group: group,
                                          decls: Data_List_NonEmpty.cons(decl)(v.value0.decls)
                                      };
                                  };
                                  return {
                                      doc: joinDecls(v.value0),
                                      sep: v1,
                                      group: group,
                                      decls: Data_List_NonEmpty.singleton(decl)
                                  };
                              };
                              throw new Error("Failed pattern match at Tidy (line 1358, column 22 - line 1379, column 12): " + [ v.constructor.name ]);
                          })($982));
                      };
                  };
                  var $983 = Data_Maybe.maybe(Data_Monoid.mempty(Tidy_Doc.monoidFormatDoc))(joinDecls);
                  var $984 = Data_Foldable.foldr(Data_Foldable.foldableArray)(go)(Data_Maybe.Nothing.value);
                  return function ($985) {
                      return $983($984($985));
                  };
              };
          };
      };
  };
  var formatComment = function (lineComment) {
      return function (blockComment) {
          return function (com) {
              return function (next) {
                  if (com instanceof PureScript_CST_Types.Comment) {
                      if (Data_String_CodeUnits.take(2)(com.value0) === "--") {
                          return lineComment(com.value0)(next);
                      };
                      if (Data_Boolean.otherwise) {
                          return blockComment(com.value0)(next);
                      };
                  };
                  if (com instanceof PureScript_CST_Types.Line) {
                      return Tidy_Doc.sourceBreak(com.value1)(next);
                  };
                  if (com instanceof PureScript_CST_Types.Space) {
                      return next;
                  };
                  throw new Error("Failed pattern match at Tidy (line 146, column 51 - line 155, column 9): " + [ com.constructor.name ]);
              };
          };
      };
  };
  var formatWithComments = function (leading) {
      return function (trailing) {
          return function (doc) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(formatComment(Tidy_Doc.leadingLineComment)(Tidy_Doc.leadingBlockComment))(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(doc)(Data_Foldable.foldr(Data_Foldable.foldableArray)(formatComment(Tidy_Doc.trailingLineComment)(Tidy_Doc.trailingBlockComment))(Data_Monoid.mempty(Tidy_Doc.monoidFormatDoc))(trailing)))(leading);
          };
      };
  };
  var formatToken = function (conf) {
      return function (tok) {
          var tokStr = Tidy_Token.printToken(conf.unicode)(tok.value);
          var tokDoc = (function () {
              if (tok.value instanceof PureScript_CST_Types.TokRawString) {
                  return formatRawString(tokStr);
              };
              if (tok.value instanceof PureScript_CST_Types.TokString) {
                  return formatString(tokStr);
              };
              return Tidy_Doc.text(tokStr);
          })();
          return formatWithComments(tok.leadingComments)(tok.trailingComments)(tokDoc);
      };
  };
  var formatEmptyList = function (conf) {
      return function (v) {
          return Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(formatToken(conf)(v.open))(formatToken(conf)(v.close));
      };
  };
  var formatListTail = function (alignment) {
      return function (format) {
          return function (conf) {
              return Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc.softBreak)(function (v) {
                  return Tidy_Doc.space(formatToken(conf)(v.value0))(formatListElem(alignment)(format)(conf)(v.value1));
              });
          };
      };
  };
  var formatList = function (openSpace) {
      return function (closeSpace) {
          return function (alignment) {
              return function (grouped) {
                  return function (format) {
                      return function (conf) {
                          return function (v) {
                              var listElems = closeSpace(Tidy_Doc.softBreak(formatListElem(alignment)(format)(conf)(v.head))(formatListTail(alignment)(format)(conf)(v.tail)))(formatToken(conf)(v.close));
                              if (grouped instanceof Grouped) {
                                  return Tidy_Doc.flexGroup(openSpace(formatToken(conf)(v.open))(listElems));
                              };
                              if (grouped instanceof NotGrouped) {
                                  return openSpace(formatToken(conf)(v.open))(listElems);
                              };
                              throw new Error("Failed pattern match at Tidy (line 1228, column 3 - line 1234, column 30): " + [ grouped.constructor.name ]);
                          };
                      };
                  };
              };
          };
      };
  };
  var formatDelimited = function (openSpace) {
      return function (closeSpace) {
          return function (alignment) {
              return function (grouped) {
                  return function (format) {
                      return function (conf) {
                          return function (v) {
                              if (v.value instanceof Data_Maybe.Nothing) {
                                  return formatEmptyList(conf)({
                                      open: v.open,
                                      close: v.close
                                  });
                              };
                              if (v.value instanceof Data_Maybe.Just) {
                                  return formatList(openSpace)(closeSpace)(alignment)(grouped)(format)(conf)({
                                      open: v.open,
                                      head: v.value.value0.head,
                                      tail: v.value.value0.tail,
                                      close: v.close
                                  });
                              };
                              throw new Error("Failed pattern match at Tidy (line 1204, column 103 - line 1208, column 94): " + [ v.value.constructor.name ]);
                          };
                      };
                  };
              };
          };
      };
  };
  var formatParenList = formatDelimited(Tidy_Doc.softSpace)(Tidy_Doc.softBreak)(2);
  var formatDelimitedNonEmpty = function (openSpace) {
      return function (closeSpace) {
          return function (alignment) {
              return function (grouped) {
                  return function (format) {
                      return function (conf) {
                          return function (v) {
                              return formatList(openSpace)(closeSpace)(alignment)(grouped)(format)(conf)({
                                  open: v.open,
                                  head: v.value.head,
                                  tail: v.value.tail,
                                  close: v.close
                              });
                          };
                      };
                  };
              };
          };
      };
  };
  var formatParenListNonEmpty = formatDelimitedNonEmpty(Tidy_Doc.softSpace)(Tidy_Doc.softBreak)(2);
  var formatOneOrDelimited = function (format) {
      return function (conf) {
          return function (v) {
              if (v instanceof PureScript_CST_Types.One) {
                  return format(conf)(v.value0);
              };
              if (v instanceof PureScript_CST_Types.Many) {
                  return formatParenListNonEmpty(NotGrouped.value)(format)(conf)(v.value0);
              };
              throw new Error("Failed pattern match at Tidy (line 588, column 36 - line 590, column 63): " + [ v.constructor.name ]);
          };
      };
  };
  var formatName = function (conf) {
      return function (v) {
          return formatToken(conf)(v.token);
      };
  };
  var formatDataMembers = function (conf) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.DataAll) {
              return formatToken(conf)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.DataEnumerated) {
              return formatParenList(NotGrouped.value)(formatName)(conf)(v.value0);
          };
          throw new Error("Failed pattern match at Tidy (line 280, column 26 - line 284, column 50): " + [ v.constructor.name ]);
      };
  };
  var formatExport = function (conf) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.ExportValue) {
              return formatName(conf)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.ExportOp) {
              return formatName(conf)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.ExportType) {
              return Tidy_Doc.flexGroup(Tidy_Doc.softBreak(formatName(conf)(v.value0))(Tidy_Doc.indent(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatDataMembers(conf))(v.value1))));
          };
          if (v instanceof PureScript_CST_Types.ExportTypeOp) {
              return Tidy_Doc.space(formatToken(conf)(v.value0))(Tidy_Doc.anchor(formatName(conf)(v.value1)));
          };
          if (v instanceof PureScript_CST_Types.ExportClass) {
              return Tidy_Doc.space(formatToken(conf)(v.value0))(Tidy_Doc.anchor(formatName(conf)(v.value1)));
          };
          if (v instanceof PureScript_CST_Types.ExportKind) {
              return Tidy_Doc.space(formatToken(conf)(v.value0))(Tidy_Doc.anchor(formatName(conf)(v.value1)));
          };
          if (v instanceof PureScript_CST_Types.ExportModule) {
              return Tidy_Doc.space(formatToken(conf)(v.value0))(Tidy_Doc.anchor(formatName(conf)(v.value1)));
          };
          if (v instanceof PureScript_CST_Types.ExportError) {
              return conf.formatError(v.value0);
          };
          throw new Error("Failed pattern match at Tidy (line 261, column 21 - line 277, column 23): " + [ v.constructor.name ]);
      };
  };
  var formatFundep = function (conf) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.FundepDetermined) {
              return Tidy_Doc.space(formatToken(conf)(v.value0))(Tidy_Doc.joinWithMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Tidy_Doc.space)(formatName(conf))(v.value1));
          };
          if (v instanceof PureScript_CST_Types.FundepDetermines) {
              return Tidy_Doc.space(Tidy_Doc.space(Tidy_Doc.joinWithMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Tidy_Doc.space)(formatName(conf))(v.value0))(formatToken(conf)(v.value1)))(Tidy_Doc.joinWithMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Tidy_Doc.space)(formatName(conf))(v.value2));
          };
          throw new Error("Failed pattern match at Tidy (line 578, column 21 - line 585, column 57): " + [ v.constructor.name ]);
      };
  };
  var formatImport = function (conf) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.ImportValue) {
              return formatName(conf)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.ImportOp) {
              return formatName(conf)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.ImportType) {
              return Tidy_Doc.flexGroup(Tidy_Doc.softBreak(formatName(conf)(v.value0))(Tidy_Doc.indent(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatDataMembers(conf))(v.value1))));
          };
          if (v instanceof PureScript_CST_Types.ImportTypeOp) {
              return Tidy_Doc.space(formatToken(conf)(v.value0))(Tidy_Doc.anchor(formatName(conf)(v.value1)));
          };
          if (v instanceof PureScript_CST_Types.ImportClass) {
              return Tidy_Doc.space(formatToken(conf)(v.value0))(Tidy_Doc.anchor(formatName(conf)(v.value1)));
          };
          if (v instanceof PureScript_CST_Types.ImportKind) {
              return Tidy_Doc.space(formatToken(conf)(v.value0))(Tidy_Doc.anchor(formatName(conf)(v.value1)));
          };
          if (v instanceof PureScript_CST_Types.ImportError) {
              return conf.formatError(v.value0);
          };
          throw new Error("Failed pattern match at Tidy (line 362, column 21 - line 376, column 23): " + [ v.constructor.name ]);
      };
  };
  var formatImportDecl = function (conf) {
      return function (v) {
          var formatImportQualified = function (v1) {
              return Tidy_Doc.space(formatToken(conf)(v1.value0))(Tidy_Doc.anchor(formatName(conf)(v1.value1)));
          };
          var importDeclBody = (function () {
              if (v.names instanceof Data_Maybe.Just && v.names.value0.value0 instanceof Data_Maybe.Just) {
                  return Tidy_Doc.space(Tidy_Doc.flexSpaceBreak(Tidy_Doc.space(formatName(conf)(v.module))(Tidy_Doc.anchor(formatToken(conf)(v.names.value0.value0.value0))))(Tidy_Doc.anchor(formatParenListNonEmpty(NotGrouped.value)(formatImport)(conf)(v.names.value0.value1))))(Tidy_Doc.anchor(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatImportQualified)(v.qualified)));
              };
              if (v.names instanceof Data_Maybe.Just && v.names.value0.value0 instanceof Data_Maybe.Nothing) {
                  return Tidy_Doc.space(Tidy_Doc.flexSpaceBreak(formatName(conf)(v.module))(Tidy_Doc.anchor(formatParenListNonEmpty(NotGrouped.value)(formatImport)(conf)(v.names.value0.value1))))(Tidy_Doc.anchor(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatImportQualified)(v.qualified)));
              };
              if (v.names instanceof Data_Maybe.Nothing) {
                  return Tidy_Doc.space(formatName(conf)(v.module))(Tidy_Doc.anchor(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatImportQualified)(v.qualified)));
              };
              throw new Error("Failed pattern match at Tidy (line 290, column 20 - line 302, column 69): " + [ v.names.constructor.name ]);
          })();
          return Tidy_Doc.space(formatToken(conf)(v.keyword))(Tidy_Doc.indent(Tidy_Doc.anchor(importDeclBody)));
      };
  };
  var formatParens = function (format) {
      return function (conf) {
          return function (v) {
              return Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(formatToken(conf)(v.open))(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(Tidy_Doc.anchor(format(conf)(v.value)))(formatToken(conf)(v.close)));
          };
      };
  };
  var formatParensBlock = function (format) {
      return function (conf) {
          return function (v) {
              return Tidy_Doc.flexGroup(Tidy_Doc.softSpace(formatToken(conf)(v.open))(Tidy_Doc.softBreak(Tidy_Doc.align(2)(Tidy_Doc.anchor(format(conf)(v.value))))(formatToken(conf)(v.close))));
          };
      };
  };
  var formatQualifiedName = function (conf) {
      return function (v) {
          return formatToken(conf)(v.token);
      };
  };
  var formatBasicListNonEmpty = formatDelimitedNonEmpty(Tidy_Doc.space)(Tidy_Doc.spaceBreak)(2);
  var formatBasicList = formatDelimited(Tidy_Doc.space)(Tidy_Doc.spaceBreak)(2);
  var flatten = (function () {
      var format = function (v) {
          return Tidy_Doc.space(v.head)(Tidy_Doc.indent(Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc.space)(Tidy_Doc.anchor)(v.tail)));
      };
      var $988 = Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(format);
      return function ($989) {
          return $988(Data_Array.uncons($989));
      };
  })();
  var formatTypeVarBinding = function (conf) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.TypeVarKinded) {
              return formatParensBlock(formatKindedTypeVarBinding)(conf)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.TypeVarName) {
              return formatName(conf)(v.value0);
          };
          throw new Error("Failed pattern match at Tidy (line 628, column 29 - line 632, column 22): " + [ v.constructor.name ]);
      };
  };
  var formatType = function (conf) {
      var $990 = formatHangingType(conf);
      return function ($991) {
          return Tidy_Hang.toFormatDoc($990($991));
      };
  };
  var formatRowLabeled = function (conf) {
      return function (v) {
          return Tidy_Doc.space(formatName(conf)(v.label))(Tidy_Doc.indent(Tidy_Doc.flexSpaceBreak(Tidy_Doc.anchor(formatToken(conf)(v.separator)))(Tidy_Doc.anchor(formatType(conf)(v.value)))));
      };
  };
  var formatRow = function (openSpace) {
      return function (closeSpace) {
          return function (conf) {
              return function (v) {
                  if (v.value.labels instanceof Data_Maybe.Nothing && v.value.tail instanceof Data_Maybe.Nothing) {
                      return formatEmptyList(conf)({
                          open: v.open,
                          close: v.close
                      });
                  };
                  if (v.value.labels instanceof Data_Maybe.Just && v.value.tail instanceof Data_Maybe.Nothing) {
                      return formatDelimitedNonEmpty(openSpace)(closeSpace)(2)(Grouped.value)(formatRowLabeled)(conf)({
                          open: v.open,
                          value: v.value.labels.value0,
                          close: v.close
                      });
                  };
                  if (v.value.labels instanceof Data_Maybe.Nothing && v.value.tail instanceof Data_Maybe.Just) {
                      return closeSpace(openSpace(formatToken(conf)(v.open))(flatten([ formatToken(conf)(v.value.tail.value0.value0), formatType(conf)(v.value.tail.value0.value1) ])))(formatToken(conf)(v.close));
                  };
                  if (v.value.labels instanceof Data_Maybe.Just && v.value.tail instanceof Data_Maybe.Just) {
                      return closeSpace(Tidy_Doc.spaceBreak(Tidy_Doc.softBreak(openSpace(formatToken(conf)(v.open))(formatListElem(2)(formatRowLabeled)(conf)(v.value.labels.value0.head)))(formatListTail(2)(formatRowLabeled)(conf)(v.value.labels.value0.tail)))(Tidy_Doc.space(formatToken(conf)(v.value.tail.value0.value0))(formatListElem(2)(formatType)(conf)(v.value.tail.value0.value1))))(formatToken(conf)(v.close));
                  };
                  throw new Error("Failed pattern match at Tidy (line 804, column 94 - line 827, column 31): " + [ v.value.labels.constructor.name, v.value.tail.constructor.name ]);
              };
          };
      };
  };
  var formatMonotype = function (conf) {
      var $992 = formatHangingMonotype(conf);
      return function ($993) {
          return Tidy_Hang.toFormatDoc($992($993));
      };
  };
  var formatKindedTypeVarBinding = function (conf) {
      return function (v) {
          return Tidy_Doc.space(formatName(conf)(v.label))(Tidy_Doc.indent(Tidy_Doc.flexSpaceBreak(Tidy_Doc.anchor(formatToken(conf)(v.separator)))(formatType(conf)(v.value))));
      };
  };
  var formatHangingType = function (conf) {
      var $994 = formatHangingPolytype(Control_Category.identity(Control_Category.categoryFn))(conf);
      return function ($995) {
          return $994(toPolytype($995));
      };
  };
  var formatHangingPolytype = function (ind) {
      return function (conf) {
          return function (v) {
              if (Data_Array["null"](v.init)) {
                  return formatHangingMonotype(conf)(v.last);
              };
              if (conf.typeArrowPlacement instanceof TypeArrowFirst) {
                  var isUnicodeArrow = (function () {
                      if (conf.unicode instanceof Tidy_Token.UnicodeAlways) {
                          return Data_Function["const"](true);
                      };
                      if (conf.unicode instanceof Tidy_Token.UnicodeNever) {
                          return Data_Function["const"](false);
                      };
                      if (conf.unicode instanceof Tidy_Token.UnicodeSource) {
                          return function (v1) {
                              if (v1 instanceof PolyArrow && (v1.value1.value instanceof PureScript_CST_Types.TokRightArrow && v1.value1.value.value0 instanceof PureScript_CST_Types.Unicode)) {
                                  return true;
                              };
                              if (v1 instanceof PolyArrow && (v1.value1.value instanceof PureScript_CST_Types.TokRightFatArrow && v1.value1.value.value0 instanceof PureScript_CST_Types.Unicode)) {
                                  return true;
                              };
                              if (v1 instanceof PolyForall && (v1.value0.value instanceof PureScript_CST_Types.TokForall && v1.value0.value.value0 instanceof PureScript_CST_Types.Unicode)) {
                                  return true;
                              };
                              return false;
                          };
                      };
                      throw new Error("Failed pattern match at Tidy (line 758, column 22 - line 768, column 21): " + [ conf.unicode.constructor.name ]);
                  })();
                  var isUnicode = Data_Array.all(isUnicodeArrow)(v.init);
                  var formatPolyArrowFirst = function (k) {
                      return function (v1) {
                          if (v1 instanceof PolyForall) {
                              var go = function (doc) {
                                  return function (tyVar) {
                                      return Tidy_Doc.flexSpaceBreak(doc)(Tidy_Doc.indent(formatTypeVarBinding(conf)(tyVar)));
                                  };
                              };
                              return function (doc) {
                                  return Tidy_Doc.space(Tidy_Doc.softBreak(k(Data_Foldable.foldl(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(go)(formatToken(conf)(v1.value0))(v1.value1)))(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(Data_Monoid.guard(Tidy_Doc.monoidFormatDoc)(!isUnicode)(Tidy_Doc.fromDoc(Dodo.flexAlt(Data_Monoid.mempty(Dodo_Internal.monoidDoc))(Dodo.space))))(Tidy_Doc.anchor(formatToken(conf)(v1.value2)))))(Tidy_Doc.anchor(Tidy_Doc.alignCurrentColumn(doc)));
                              };
                          };
                          if (v1 instanceof PolyArrow) {
                              return function (doc) {
                                  return Tidy_Doc.space(Tidy_Doc.spaceBreak(k(Tidy_Doc.flexGroup(formatMonotype(conf)(v1.value0))))(Tidy_Doc.anchor(formatToken(conf)(v1.value1))))(Tidy_Doc.anchor(Tidy_Doc.alignCurrentColumn(doc)));
                              };
                          };
                          throw new Error("Failed pattern match at Tidy (line 770, column 30 - line 786, column 52): " + [ v1.constructor.name ]);
                      };
                  };
                  return Tidy_Hang.hangBreak(Data_Foldable.foldl(Data_Foldable.foldableArray)(formatPolyArrowFirst)(ind)(v.init)(Tidy_Doc.anchor(formatMonotype(conf)(v.last))));
              };
              if (conf.typeArrowPlacement instanceof TypeArrowLast) {
                  var formatPolyArrowLast = function (v1) {
                      if (v1 instanceof PolyForall) {
                          var go = function (doc) {
                              return function (tyVar) {
                                  return Tidy_Doc.flexSpaceBreak(doc)(Tidy_Doc.indent(formatTypeVarBinding(conf)(tyVar)));
                              };
                          };
                          return Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(Data_Foldable.foldl(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(go)(formatToken(conf)(v1.value0))(v1.value1))(Tidy_Doc.indent(Tidy_Doc.anchor(formatToken(conf)(v1.value2))));
                      };
                      if (v1 instanceof PolyArrow) {
                          return Tidy_Doc.space(Tidy_Doc.flexGroup(formatType(conf)(v1.value0)))(Tidy_Doc.indent(Tidy_Doc.anchor(formatToken(conf)(v1.value1))));
                      };
                      throw new Error("Failed pattern match at Tidy (line 792, column 27 - line 801, column 57): " + [ v1.constructor.name ]);
                  };
                  return Tidy_Hang.hangBreak(Tidy_Doc.spaceBreak(Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc.spaceBreak)(formatPolyArrowLast)(v.init))(Tidy_Doc.flexGroup(formatMonotype(conf)(v.last))));
              };
              throw new Error("Failed pattern match at Tidy (line 751, column 49 - line 801, column 57): " + [ conf.typeArrowPlacement.constructor.name ]);
          };
      };
  };
  var formatHangingMonotype = function (conf) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.TypeVar) {
              return Tidy_Hang.hangBreak(formatName(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.TypeConstructor) {
              return Tidy_Hang.hangBreak(formatQualifiedName(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.TypeWildcard) {
              return Tidy_Hang.hangBreak(formatToken(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.TypeHole) {
              return Tidy_Hang.hangBreak(formatName(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.TypeString) {
              return Tidy_Hang.hangBreak(formatToken(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.TypeArrowName) {
              return Tidy_Hang.hangBreak(formatToken(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.TypeOpName) {
              return Tidy_Hang.hangBreak(formatQualifiedName(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.TypeRow) {
              return Tidy_Hang.hangBreak(formatRow(Tidy_Doc.softSpace)(Tidy_Doc.softBreak)(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.TypeRecord) {
              return Tidy_Hang.hangBreak(formatRow(Tidy_Doc.space)(Tidy_Doc.spaceBreak)(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.TypeApp) {
              return Tidy_Hang.hangApp(formatHangingType(conf)(v.value0))(Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(formatHangingType(conf))(v.value1));
          };
          if (v instanceof PureScript_CST_Types.TypeParens) {
              return Tidy_Hang.hangBreak(formatParensBlock(formatType)(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.TypeUnaryRow) {
              return Tidy_Hang.hangBreak(Tidy_Doc.space(formatToken(conf)(v.value0))(formatType(conf)(v.value1)));
          };
          if (v instanceof PureScript_CST_Types.TypeKinded) {
              return Tidy_Hang.hangBreak(Tidy_Doc.space(formatType(conf)(v.value0))(Tidy_Doc.indent(Tidy_Doc.flexSpaceBreak(Tidy_Doc.anchor(formatToken(conf)(v.value1)))(Tidy_Doc.anchor(formatType(conf)(v.value2))))));
          };
          if (v instanceof PureScript_CST_Types.TypeOp) {
              return formatHangingOperatorTree(formatQualifiedName)(formatHangingType)(conf)(toQualifiedOperatorTree(conf.operators)(Tidy_Precedence.OperatorType.value)(v.value0)(v.value1));
          };
          if (v instanceof PureScript_CST_Types["TypeError"]) {
              return Tidy_Hang.hangBreak(conf.formatError(v.value0));
          };
          if (v instanceof PureScript_CST_Types.TypeArrow) {
              return Partial_Unsafe.unsafeCrashWith("formatMonotype: TypeArrow handled by formatPolytype");
          };
          if (v instanceof PureScript_CST_Types.TypeConstrained) {
              return Partial_Unsafe.unsafeCrashWith("formatMonotype: TypeConstrained handled by formatPolytype");
          };
          if (v instanceof PureScript_CST_Types.TypeForall) {
              return Partial_Unsafe.unsafeCrashWith("formatMonotype: TypeForall handled by formatPolytype");
          };
          throw new Error("Failed pattern match at Tidy (line 680, column 30 - line 720, column 75): " + [ v.constructor.name ]);
      };
  };
  var formatHangingDataCtor = function (conf) {
      return function (v) {
          var hangingName = Tidy_Hang.hangBreak(formatName(conf)(v.name));
          var v1 = Data_Array_NonEmpty.fromArray(v.fields);
          if (v1 instanceof Data_Maybe.Nothing) {
              return hangingName;
          };
          if (v1 instanceof Data_Maybe.Just) {
              return Tidy_Hang.hangApp(hangingName)(Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(formatHangingType(conf))(v1.value0));
          };
          throw new Error("Failed pattern match at Tidy (line 530, column 3 - line 532, column 69): " + [ v1.constructor.name ]);
      };
  };
  var formatDataCtor = function (conf) {
      var $996 = formatHangingDataCtor(conf);
      return function ($997) {
          return Tidy_Hang.toFormatDoc($996($997));
      };
  };
  var formatConstraints = function (conf) {
      return function (v) {
          var unicodeArr = (function () {
              if (v.value1.value instanceof PureScript_CST_Types.TokOperator && (v.value1.value.value0 instanceof Data_Maybe.Nothing && (v.value1.value.value1 === "<=" && Data_Eq.eq(Tidy_Token.eqUnicodeOption)(conf.unicode)(Tidy_Token.UnicodeAlways.value)))) {
                  return {
                      value: new PureScript_CST_Types.TokOperator(Data_Maybe.Nothing.value, "\u21d0"),
                      leadingComments: v.value1.leadingComments,
                      range: v.value1.range,
                      trailingComments: v.value1.trailingComments
                  };
              };
              if (v.value1.value instanceof PureScript_CST_Types.TokOperator && (v.value1.value.value0 instanceof Data_Maybe.Nothing && (v.value1.value.value1 === "\u21d0" && Data_Eq.eq(Tidy_Token.eqUnicodeOption)(conf.unicode)(Tidy_Token.UnicodeNever.value)))) {
                  return {
                      value: new PureScript_CST_Types.TokOperator(Data_Maybe.Nothing.value, "<="),
                      leadingComments: v.value1.leadingComments,
                      range: v.value1.range,
                      trailingComments: v.value1.trailingComments
                  };
              };
              return v.value1;
          })();
          return Tidy_Doc.space(formatOneOrDelimited(formatType)(conf)(v.value0))(Tidy_Doc.anchor(formatToken(conf)(unicodeArr)));
      };
  };
  var formatInstanceHead = function (conf) {
      return function (v) {
          var hdTypes = Tidy_Doc.spaceBreak(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatConstraints(conf))(v.value0.constraints))(Tidy_Doc.flexGroup(Tidy_Doc.space(formatQualifiedName(conf)(v.value0.className))(Tidy_Doc.indent(Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc.spaceBreak)(formatType(conf))(v.value0.types)))));
          if (v.value0.name instanceof Data_Maybe.Just) {
              return Tidy_Doc.space(Tidy_Doc.flexSpaceBreak(Tidy_Doc.space(Tidy_Doc.space(formatToken(conf)(v.value0.keyword))(Tidy_Doc.anchor(formatName(conf)(v.value0.name.value0.value0))))(Tidy_Doc.anchor(formatToken(conf)(v.value0.name.value0.value1))))(Tidy_Doc.indent(hdTypes)))(Tidy_Doc.indent(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatToken(conf))(v.value1)));
          };
          if (v.value0.name instanceof Data_Maybe.Nothing) {
              return Tidy_Doc.space(Tidy_Doc.flexSpaceBreak(formatToken(conf)(v.value0.keyword))(Tidy_Doc.indent(hdTypes)))(Tidy_Doc.indent(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatToken(conf))(v.value1)));
          };
          throw new Error("Failed pattern match at Tidy (line 602, column 3 - line 612, column 57): " + [ v.value0.name.constructor.name ]);
      };
  };
  var formatClassHead = function (conf) {
      return function (v) {
          var formatFundeps = function (v1) {
              return Tidy_Doc.softBreak(Tidy_Doc.space(formatToken(conf)(v1.value0))(formatListElem(2)(formatFundep)(conf)(v1.value1.head)))(Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc.softBreak)(function (v2) {
                  return Tidy_Doc.space(formatToken(conf)(v2.value0))(formatListElem(2)(formatFundep)(conf)(v2.value1));
              })(v1.value1.tail));
          };
          return Tidy_Doc.flexSpaceBreak(formatToken(conf)(v.value0.keyword))(Tidy_Doc.indent(Tidy_Doc.space(Tidy_Doc.spaceBreak(Tidy_Doc.spaceBreak(Tidy_Doc.anchor(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatConstraints(conf))(v["value0"]["super"])))(Tidy_Doc.flexGroup(Tidy_Doc.spaceBreak(formatName(conf)(v.value0.name))(Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc.spaceBreak)((function () {
              var $998 = formatTypeVarBinding(conf);
              return function ($999) {
                  return Tidy_Doc.indent($998($999));
              };
          })())(v.value0.vars)))))(Tidy_Doc.flexGroup(Tidy_Doc.anchor(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatFundeps)(v.value0.fundeps)))))(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatToken(conf))(v.value1))));
      };
  };
  var formatDataHead = function (conf) {
      return function (v) {
          return Tidy_Doc.space(formatToken(conf)(v.keyword))(Tidy_Doc.indent(Tidy_Doc.flexSpaceBreak(Tidy_Doc.anchor(formatName(conf)(v.name)))(Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc.spaceBreak)(formatTypeVarBinding(conf))(v.vars))));
      };
  };
  var formatSignature = function (conf) {
      return function (v) {
          if (conf.typeArrowPlacement instanceof TypeArrowFirst) {
              var polytype = toPolytype(v.value);
              var isUnicode = (function () {
                  if (conf.unicode instanceof Tidy_Token.UnicodeAlways) {
                      return true;
                  };
                  if (conf.unicode instanceof Tidy_Token.UnicodeNever) {
                      return false;
                  };
                  if (conf.unicode instanceof Tidy_Token.UnicodeSource) {
                      if (v.separator.value instanceof PureScript_CST_Types.TokDoubleColon && v.separator.value.value0 instanceof PureScript_CST_Types.Unicode) {
                          return true;
                      };
                      return false;
                  };
                  throw new Error("Failed pattern match at Tidy (line 663, column 19 - line 669, column 23): " + [ conf.unicode.constructor.name ]);
              })();
              var width = (function () {
                  if (isUnicode) {
                      return 2;
                  };
                  if (Data_Boolean.otherwise) {
                      return 3;
                  };
                  throw new Error("Failed pattern match at Tidy (line 659, column 7 - line 661, column 24): " + [  ]);
              })();
              var formattedPolytype = formatHangingPolytype(Tidy_Doc.align(width))(conf)(polytype);
              var $491 = Data_Array["null"](polytype.init);
              if ($491) {
                  return Tidy_Doc.flexSpaceBreak(v.label)(Tidy_Doc.indent(Tidy_Doc.space(Tidy_Doc.anchor(formatToken(conf)(v.separator)))(Tidy_Doc.anchor(Tidy_Doc.align(width)(Tidy_Hang.toFormatDoc(formattedPolytype))))));
              };
              return Tidy_Doc.flexSpaceBreak(v.label)(Tidy_Doc.indent(Tidy_Doc.space(Tidy_Doc.anchor(formatToken(conf)(v.separator)))(Tidy_Doc.anchor(Tidy_Hang.toFormatDoc(formattedPolytype)))));
          };
          if (conf.typeArrowPlacement instanceof TypeArrowLast) {
              return Tidy_Doc.space(v.label)(Tidy_Doc.indent(Tidy_Doc.flexGroup(Tidy_Doc.spaceBreak(Tidy_Doc.anchor(formatToken(conf)(v.separator)))(Tidy_Doc.anchor(Tidy_Doc.flexGroup(formatType(conf)(v.value)))))));
          };
          throw new Error("Failed pattern match at Tidy (line 642, column 3 - line 674, column 66): " + [ conf.typeArrowPlacement.constructor.name ]);
      };
  };
  var eqImportComparison = {
      eq: function (x) {
          return function (y) {
              if (x instanceof ImportClassCmp && y instanceof ImportClassCmp) {
                  return Data_Eq.eq(PureScript_CST_Types.eqProper)(x.value0)(y.value0);
              };
              if (x instanceof ImportTypeOpCmp && y instanceof ImportTypeOpCmp) {
                  return Data_Eq.eq(PureScript_CST_Types.eqOperator)(x.value0)(y.value0);
              };
              if (x instanceof ImportTypeCmp && y instanceof ImportTypeCmp) {
                  return Data_Eq.eq(PureScript_CST_Types.eqProper)(x.value0)(y.value0) && x.value1 === y.value1 && Data_Eq.eq(Data_Eq.eqArray(PureScript_CST_Types.eqProper))(x.value2)(y.value2);
              };
              if (x instanceof ImportValueCmp && y instanceof ImportValueCmp) {
                  return Data_Eq.eq(PureScript_CST_Types.eqIdent)(x.value0)(y.value0);
              };
              if (x instanceof ImportOpCmp && y instanceof ImportOpCmp) {
                  return Data_Eq.eq(PureScript_CST_Types.eqOperator)(x.value0)(y.value0);
              };
              if (x instanceof ImportErrorCmp && y instanceof ImportErrorCmp) {
                  return true;
              };
              return false;
          };
      }
  };
  var eqImportModuleComparison = {
      eq: function (x) {
          return function (y) {
              return Data_Eq.eq(PureScript_CST_Types.eqModuleName)(x.value0)(y.value0) && x.value1 === y.value1 && Data_Eq.eq(Data_Eq.eqArray(eqImportComparison))(x.value2)(y.value2) && Data_Eq.eq(Data_Maybe.eqMaybe(PureScript_CST_Types.eqModuleName))(x.value3)(y.value3);
          };
      }
  };
  var ordImportComparison = {
      compare: function (x) {
          return function (y) {
              if (x instanceof ImportClassCmp && y instanceof ImportClassCmp) {
                  return Data_Ord.compare(PureScript_CST_Types.ordProper)(x.value0)(y.value0);
              };
              if (x instanceof ImportClassCmp) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof ImportClassCmp) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof ImportTypeOpCmp && y instanceof ImportTypeOpCmp) {
                  return Data_Ord.compare(PureScript_CST_Types.ordOperator)(x.value0)(y.value0);
              };
              if (x instanceof ImportTypeOpCmp) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof ImportTypeOpCmp) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof ImportTypeCmp && y instanceof ImportTypeCmp) {
                  var v = Data_Ord.compare(PureScript_CST_Types.ordProper)(x.value0)(y.value0);
                  if (v instanceof Data_Ordering.LT) {
                      return Data_Ordering.LT.value;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return Data_Ordering.GT.value;
                  };
                  var v1 = Data_Ord.compare(Data_Ord.ordBoolean)(x.value1)(y.value1);
                  if (v1 instanceof Data_Ordering.LT) {
                      return Data_Ordering.LT.value;
                  };
                  if (v1 instanceof Data_Ordering.GT) {
                      return Data_Ordering.GT.value;
                  };
                  return Data_Ord.compare(Data_Ord.ordArray(PureScript_CST_Types.ordProper))(x.value2)(y.value2);
              };
              if (x instanceof ImportTypeCmp) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof ImportTypeCmp) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof ImportValueCmp && y instanceof ImportValueCmp) {
                  return Data_Ord.compare(PureScript_CST_Types.ordIdent)(x.value0)(y.value0);
              };
              if (x instanceof ImportValueCmp) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof ImportValueCmp) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof ImportOpCmp && y instanceof ImportOpCmp) {
                  return Data_Ord.compare(PureScript_CST_Types.ordOperator)(x.value0)(y.value0);
              };
              if (x instanceof ImportOpCmp) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof ImportOpCmp) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof ImportErrorCmp && y instanceof ImportErrorCmp) {
                  return Data_Ordering.EQ.value;
              };
              throw new Error("Failed pattern match at Tidy (line 359, column 1 - line 359, column 60): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return eqImportComparison;
      }
  };
  var ordImportModuleComparison = {
      compare: function (x) {
          return function (y) {
              var v = Data_Ord.compare(PureScript_CST_Types.ordModuleName)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              var v1 = Data_Ord.compare(Data_Ord.ordInt)(x.value1)(y.value1);
              if (v1 instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v1 instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              var v2 = Data_Ord.compare(Data_Ord.ordArray(ordImportComparison))(x.value2)(y.value2);
              if (v2 instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v2 instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(Data_Maybe.ordMaybe(PureScript_CST_Types.ordModuleName))(x.value3)(y.value3);
          };
      },
      Eq0: function () {
          return eqImportModuleComparison;
      }
  };
  var sortImportsIde = function (v) {
      var toComparison = function (v1) {
          if (v1 instanceof PureScript_CST_Types.ImportValue) {
              return new ImportValueCmp(v1.value0.name);
          };
          if (v1 instanceof PureScript_CST_Types.ImportOp) {
              return new ImportOpCmp(v1.value0.name);
          };
          if (v1 instanceof PureScript_CST_Types.ImportType && v1.value1 instanceof Data_Maybe.Nothing) {
              return new ImportTypeCmp(v1.value0.name, true, [  ]);
          };
          if (v1 instanceof PureScript_CST_Types.ImportType && (v1.value1 instanceof Data_Maybe.Just && v1.value1.value0 instanceof PureScript_CST_Types.DataEnumerated)) {
              if (v1.value1.value0.value0.value instanceof Data_Maybe.Nothing) {
                  return new ImportTypeCmp(v1.value0.name, true, [  ]);
              };
              if (v1.value1.value0.value0.value instanceof Data_Maybe.Just) {
                  return ImportTypeCmp.create(v1.value0.name)(true)(Data_Functor.map(Data_Functor.functorArray)((function () {
                      var $1000 = Data_Newtype.un()(PureScript_CST_Types.Name);
                      return function ($1001) {
                          return (function (v2) {
                              return v2.name;
                          })($1000($1001));
                      };
                  })())(Data_Array.cons(v1.value1.value0.value0.value.value0.head)(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(v1.value1.value0.value0.value.value0.tail))));
              };
              throw new Error("Failed pattern match at Tidy (line 334, column 7 - line 338, column 104): " + [ v1.value1.value0.value0.value.constructor.name ]);
          };
          if (v1 instanceof PureScript_CST_Types.ImportType && (v1.value1 instanceof Data_Maybe.Just && v1.value1.value0 instanceof PureScript_CST_Types.DataAll)) {
              return new ImportTypeCmp(v1.value0.name, false, [  ]);
          };
          if (v1 instanceof PureScript_CST_Types.ImportTypeOp) {
              return new ImportTypeOpCmp(v1.value1.name);
          };
          if (v1 instanceof PureScript_CST_Types.ImportClass) {
              return new ImportClassCmp(v1.value1.name);
          };
          if (v1 instanceof PureScript_CST_Types.ImportKind) {
              return new ImportTypeCmp(v1.value1.name, true, [  ]);
          };
          if (v1 instanceof PureScript_CST_Types.ImportError) {
              return ImportErrorCmp.value;
          };
          throw new Error("Failed pattern match at Tidy (line 326, column 18 - line 348, column 21): " + [ v1.constructor.name ]);
      };
      var v1 = Data_Array.unzip(v.value.tail);
      var v2 = Data_Array_NonEmpty.unzip(Data_Array_NonEmpty.sortWith(ordImportComparison)(Data_Tuple.fst)(Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(Control_Bind.bindFlipped(Control_Bind.bindFn)(Data_Tuple.Tuple.create)(toComparison))(Data_Array_NonEmpty["cons'"](v.value.head)(v1.value1))));
      return Data_Tuple.Tuple.create(Data_Array_NonEmpty.toArray(v2.value0))({
          open: v.open,
          value: {
              head: Data_Array_NonEmpty.head(v2.value1),
              tail: Data_Array.zip(v1.value0)(Data_Array_NonEmpty.tail(v2.value1))
          },
          close: v.close
      });
  };
  var defaultFormatOptions = function (dictFormatError) {
      return {
          formatError: formatError(dictFormatError),
          unicode: Tidy_Token.UnicodeSource.value,
          typeArrowPlacement: TypeArrowFirst.value,
          operators: Data_Map_Internal.empty,
          importSort: ImportSortSource.value,
          importWrap: ImportWrapSource.value
      };
  };
  var declareHanging = function (label) {
      return function (spc) {
          return function (separator) {
              return function (value) {
                  return spc(label)(Tidy_Hang.toFormatDoc(Tidy_Hang.hang(Tidy_Doc.indent(separator))(value)));
              };
          };
      };
  };
  var formatRecordLabeled = function (format) {
      return function (conf) {
          return function (v) {
              if (v instanceof PureScript_CST_Types.RecordPun) {
                  return formatName(conf)(v.value0);
              };
              if (v instanceof PureScript_CST_Types.RecordField) {
                  return declareHanging(formatName(conf)(v.value0))(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc))(Tidy_Doc.anchor(formatToken(conf)(v.value1)))(format(conf)(v.value2));
              };
              throw new Error("Failed pattern match at Tidy (line 1160, column 35 - line 1164, column 106): " + [ v.constructor.name ]);
          };
      };
  };
  var formatHangingBinder = function (conf) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.BinderWildcard) {
              return Tidy_Hang.hangBreak(formatToken(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.BinderVar) {
              return Tidy_Hang.hangBreak(formatName(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.BinderNamed) {
              return Tidy_Hang.hangBreak(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(formatName(conf)(v.value0))(Tidy_Doc.flexSoftBreak(Tidy_Doc.anchor(formatToken(conf)(v.value1)))(Tidy_Doc.indent(formatBinder(conf)(v.value2)))));
          };
          if (v instanceof PureScript_CST_Types.BinderConstructor) {
              var ctorName = Tidy_Hang.hangBreak(formatQualifiedName(conf)(v.value0));
              var v1 = Data_Array_NonEmpty.fromArray(v.value1);
              if (v1 instanceof Data_Maybe.Nothing) {
                  return ctorName;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return Tidy_Hang.hangApp(ctorName)(Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(formatHangingBinder(conf))(v1.value0));
              };
              throw new Error("Failed pattern match at Tidy (line 1126, column 5 - line 1130, column 67): " + [ v1.constructor.name ]);
          };
          if (v instanceof PureScript_CST_Types.BinderBoolean) {
              return Tidy_Hang.hangBreak(formatToken(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.BinderChar) {
              return Tidy_Hang.hangBreak(formatToken(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.BinderString) {
              return Tidy_Hang.hangBreak(formatToken(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.BinderInt) {
              return Tidy_Hang.hangBreak(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatToken(conf))(v.value0))(formatToken(conf)(v.value1)));
          };
          if (v instanceof PureScript_CST_Types.BinderNumber) {
              return Tidy_Hang.hangBreak(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatToken(conf))(v.value0))(formatToken(conf)(v.value1)));
          };
          if (v instanceof PureScript_CST_Types.BinderArray) {
              return Tidy_Hang.hangBreak(formatBasicList(Grouped.value)(formatBinder)(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.BinderRecord) {
              return Tidy_Hang.hangBreak(formatBasicList(Grouped.value)(formatRecordLabeled(formatHangingBinder))(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.BinderParens) {
              return Tidy_Hang.hangBreak(formatParensBlock(formatBinder)(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.BinderTyped) {
              return Tidy_Hang.hangBreak(formatSignature(conf)({
                  label: formatBinder(conf)(v.value0),
                  separator: v.value1,
                  value: v.value2
              }));
          };
          if (v instanceof PureScript_CST_Types.BinderOp) {
              return formatHangingOperatorTree(formatQualifiedName)(formatHangingBinder)(conf)(toQualifiedOperatorTree(conf.operators)(Tidy_Precedence.OperatorValue.value)(v.value0)(v.value1));
          };
          if (v instanceof PureScript_CST_Types.BinderError) {
              return Tidy_Hang.hangBreak(conf.formatError(v.value0));
          };
          throw new Error("Failed pattern match at Tidy (line 1117, column 28 - line 1157, column 35): " + [ v.constructor.name ]);
      };
  };
  var formatBinder = function (conf) {
      var $1002 = formatHangingBinder(conf);
      return function ($1003) {
          return Tidy_Hang.toFormatDoc($1002($1003));
      };
  };
  var formatWhere = function (conf) {
      return function (v) {
          return Tidy_Doc["break"](formatToken(conf)(v.value0))(formatLetGroups(conf)(Data_Array_NonEmpty.toArray(v.value1)));
      };
  };
  var formatValueBinding = function (conf) {
      return function (v) {
          if (v.guarded instanceof PureScript_CST_Types.Unconditional) {
              return Tidy_Doc["break"](Tidy_Doc.space(Tidy_Doc.flexSpaceBreak(formatName(conf)(v.name))(Tidy_Doc.indent(Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc.spaceBreak)((function () {
                  var $1004 = formatBinder(conf);
                  return function ($1005) {
                      return Tidy_Doc.anchor($1004($1005));
                  };
              })())(v.binders))))(Tidy_Hang.toFormatDoc(Tidy_Hang.hang(Tidy_Doc.indent(Tidy_Doc.anchor(formatToken(conf)(v.guarded.value0))))(formatHangingExpr(conf)(v.guarded.value1.expr)))))(Tidy_Doc.indent(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatWhere(conf))(v.guarded.value1.bindings)));
          };
          if (v.guarded instanceof PureScript_CST_Types.Guarded) {
              var valBinders = Tidy_Doc.flexSpaceBreak(formatName(conf)(v.name))(Tidy_Doc.indent(Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc.spaceBreak)((function () {
                  var $1006 = formatBinder(conf);
                  return function ($1007) {
                      return Tidy_Doc.anchor(Tidy_Doc.flexGroup($1006($1007)));
                  };
              })())(v.binders)));
              var $662 = Data_Array_NonEmpty.length(v.guarded.value0) === 1;
              if ($662) {
                  return Tidy_Hang.toFormatDoc(Tidy_Hang.hang(valBinders)(formatGuardedExpr(conf)(Data_Array_NonEmpty.head(v.guarded.value0))));
              };
              return Tidy_Doc.flexSpaceBreak(valBinders)(Tidy_Doc.indent(Tidy_Doc.joinWithMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Tidy_Doc["break"])((function () {
                  var $1008 = formatGuardedExpr(conf);
                  return function ($1009) {
                      return Tidy_Hang.toFormatDoc($1008($1009));
                  };
              })())(v.guarded.value0)));
          };
          throw new Error("Failed pattern match at Tidy (line 1077, column 3 - line 1097, column 86): " + [ v.guarded.constructor.name ]);
      };
  };
  var formatRecordUpdate = function (conf) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.RecordUpdateLeaf) {
              return declareHanging(formatName(conf)(v.value0))(Tidy_Doc.space)(formatToken(conf)(v.value1))(formatHangingExpr(conf)(v.value2));
          };
          if (v instanceof PureScript_CST_Types.RecordUpdateBranch) {
              return Tidy_Doc.flexSpaceBreak(formatName(conf)(v.value0))(Tidy_Doc.indent(formatBasicListNonEmpty(Grouped.value)(formatRecordUpdate)(conf)(v.value1)));
          };
          throw new Error("Failed pattern match at Tidy (line 991, column 27 - line 996, column 66): " + [ v.constructor.name ]);
      };
  };
  var formatPatternGuard = function (conf) {
      return function (v) {
          if (v.binder instanceof Data_Maybe.Nothing) {
              return formatExpr(conf)(v.expr);
          };
          if (v.binder instanceof Data_Maybe.Just) {
              return Tidy_Doc.space(formatBinder(conf)(v.binder.value0.value0))(Tidy_Doc.indent(Tidy_Doc.flexSpaceBreak(Tidy_Doc.anchor(formatToken(conf)(v.binder.value0.value1)))(formatExpr(conf)(v.expr))));
          };
          throw new Error("Failed pattern match at Tidy (line 1046, column 59 - line 1052, column 46): " + [ v.binder.constructor.name ]);
      };
  };
  var formatLetBinding = function (conf) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.LetBindingSignature) {
              return formatSignature(conf)({
                  label: formatName(conf)(v.value0.label),
                  separator: v.value0.separator,
                  value: v.value0.value
              });
          };
          if (v instanceof PureScript_CST_Types.LetBindingName) {
              return formatValueBinding(conf)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.LetBindingPattern) {
              return Tidy_Doc["break"](Tidy_Doc.space(Tidy_Doc.flexGroup(formatBinder(conf)(v.value0)))(Tidy_Hang.toFormatDoc(Tidy_Hang.hang(Tidy_Doc.indent(Tidy_Doc.anchor(formatToken(conf)(v.value1))))(formatHangingExpr(conf)(v.value2.expr)))))(Tidy_Doc.indent(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatWhere(conf))(v.value2.bindings)));
          };
          if (v instanceof PureScript_CST_Types.LetBindingError) {
              return conf.formatError(v.value0);
          };
          throw new Error("Failed pattern match at Tidy (line 1060, column 25 - line 1073, column 23): " + [ v.constructor.name ]);
      };
  };
  var formatLetGroups = (function () {
      var letGroup = function (v) {
          if (v instanceof PureScript_CST_Types.LetBindingSignature) {
              return new DeclGroupValueSignature(v.value0.label.name);
          };
          if (v instanceof PureScript_CST_Types.LetBindingName) {
              return new DeclGroupValue(v.value0.name.name);
          };
          if (v instanceof PureScript_CST_Types.LetBindingPattern) {
              return DeclGroupUnknown.value;
          };
          if (v instanceof PureScript_CST_Types.LetBindingError) {
              return DeclGroupUnknown.value;
          };
          throw new Error("Failed pattern match at Tidy (line 1343, column 14 - line 1347, column 42): " + [ v.constructor.name ]);
      };
      var letDeclGroupSeparator = function (v) {
          return function (v1) {
              if (v1 instanceof DeclGroupValueSignature) {
                  return DeclGroupHard.value;
              };
              return DeclGroupSame.value;
          };
      };
      return formatDeclGroups(letDeclGroupSeparator)(letGroup)(formatLetBinding);
  })();
  var formatHangingExpr = function (conf) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.ExprHole) {
              return Tidy_Hang.hangBreak(formatName(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.ExprSection) {
              return Tidy_Hang.hangBreak(formatToken(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.ExprIdent) {
              return Tidy_Hang.hangBreak(formatQualifiedName(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.ExprConstructor) {
              return Tidy_Hang.hangBreak(formatQualifiedName(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.ExprBoolean) {
              return Tidy_Hang.hangBreak(formatToken(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.ExprChar) {
              return Tidy_Hang.hangBreak(formatToken(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.ExprString) {
              return Tidy_Hang.hangBreak(formatToken(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.ExprInt) {
              return Tidy_Hang.hangBreak(formatToken(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.ExprNumber) {
              return Tidy_Hang.hangBreak(formatToken(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.ExprArray) {
              return Tidy_Hang.hangBreak(formatBasicList(Grouped.value)(formatExpr)(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.ExprRecord) {
              return Tidy_Hang.hangBreak(formatBasicList(Grouped.value)(formatRecordLabeled(formatHangingExpr))(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.ExprParens) {
              return Tidy_Hang.hangBreak(formatParensBlock(formatExpr)(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.ExprTyped) {
              return Tidy_Hang.hangBreak(formatSignature(conf)({
                  label: formatExpr(conf)(v.value0),
                  separator: v.value1,
                  value: v.value2
              }));
          };
          if (v instanceof PureScript_CST_Types.ExprInfix) {
              return Tidy_Hang.hangOps(formatHangingExpr(conf)(v.value0))(Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(function (v1) {
                  return new Tidy_Hang.HangingOp(3, formatParens(formatExpr)(conf)(v1.value0), formatHangingExpr(conf)(v1.value1));
              })(v.value1));
          };
          if (v instanceof PureScript_CST_Types.ExprOp) {
              return formatHangingOperatorTree(formatQualifiedName)(formatHangingExpr)(conf)(toQualifiedOperatorTree(conf.operators)(Tidy_Precedence.OperatorValue.value)(v.value0)(v.value1));
          };
          if (v instanceof PureScript_CST_Types.ExprOpName) {
              return Tidy_Hang.hangBreak(formatQualifiedName(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.ExprNegate) {
              return Tidy_Hang.hangBreak(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(formatToken(conf)(v.value0))(formatExpr(conf)(v.value1)));
          };
          if (v instanceof PureScript_CST_Types.ExprRecordAccessor) {
              return Tidy_Hang.hangBreak(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(formatExpr(conf)(v.value0.expr))(Tidy_Doc.indent(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Tidy_Doc.monoidFormatDoc)(Tidy_Doc.anchor)([ formatToken(conf)(v.value0.dot), formatName(conf)(v.value0.path.head), Data_Foldable.foldMap(Data_Foldable.foldableArray)(Tidy_Doc.monoidFormatDoc)(function (v1) {
                  return Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(Tidy_Doc.anchor(formatToken(conf)(v1.value0)))(Tidy_Doc.anchor(formatName(conf)(v1.value1)));
              })(v.value0.path.tail) ]))));
          };
          if (v instanceof PureScript_CST_Types.ExprRecordUpdate) {
              return Tidy_Hang.hang(formatExpr(conf)(v.value0))(Tidy_Hang.hangBreak(formatBasicListNonEmpty(Grouped.value)(formatRecordUpdate)(conf)(v.value1)));
          };
          if (v instanceof PureScript_CST_Types.ExprApp) {
              return Tidy_Hang.hangApp(formatHangingExpr(conf)(v.value0))(Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(formatHangingExpr(conf))(v.value1));
          };
          if (v instanceof PureScript_CST_Types.ExprLambda) {
              var binders = Tidy_Doc.flexGroup(Tidy_Doc.joinWithMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Tidy_Doc.spaceBreak)((function () {
                  var $1010 = formatBinder(conf);
                  return function ($1011) {
                      return Tidy_Doc.anchor($1010($1011));
                  };
              })())(v.value0.binders));
              return Tidy_Hang.hang(Tidy_Doc.space(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(formatToken(conf)(v.value0.symbol))(Tidy_Doc.alignCurrentColumn(binders)))(Tidy_Doc.indent(Tidy_Doc.anchor(formatToken(conf)(v.value0.arrow)))))(formatHangingExpr(conf)(v.value0.body));
          };
          if (v instanceof PureScript_CST_Types.ExprIf) {
              return Tidy_Hang.hangBreak(formatElseIfChain(conf)(toElseIfChain(v.value0)));
          };
          if (v instanceof PureScript_CST_Types.ExprCase) {
              var caseHeadExprs = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (doc) {
                  return function (v1) {
                      return Tidy_Doc.spaceBreak(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(doc)(Tidy_Doc.anchor(formatToken(conf)(v1.value0))))(Tidy_Doc.flexGroup(formatExpr(conf)(v1.value1)));
                  };
              })(Tidy_Doc.flexGroup(formatExpr(conf)(v.value0.head.head)))(v.value0.head.tail);
              var caseHead = Tidy_Doc.spaceBreak(caseHeadExprs)(Tidy_Doc.anchor(formatToken(conf)(v.value0.of)));
              return Tidy_Hang.hang(Tidy_Doc.flexSpaceBreak(formatToken(conf)(v.value0.keyword))(Tidy_Doc.indent(caseHead)))(Tidy_Hang.hangBreak(Tidy_Doc.joinWithMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Tidy_Doc["break"])((function () {
                  var $1012 = formatCaseBranch(conf);
                  return function ($1013) {
                      return Tidy_Doc.flexGroup($1012($1013));
                  };
              })())(v.value0.branches)));
          };
          if (v instanceof PureScript_CST_Types.ExprLet) {
              return Tidy_Hang.hangBreak(Tidy_Doc.spaceBreak(Tidy_Doc.spaceBreak(formatToken(conf)(v.value0.keyword))(Tidy_Doc.indent(formatLetGroups(conf)(Data_Array_NonEmpty.toArray(v.value0.bindings)))))(Tidy_Doc.spaceBreak(formatToken(conf)(v["value0"]["in"]))(Tidy_Doc.indent(Tidy_Doc.flexGroup(formatExpr(conf)(v.value0.body))))));
          };
          if (v instanceof PureScript_CST_Types.ExprDo) {
              return Tidy_Hang.hang(formatToken(conf)(v.value0.keyword))(Tidy_Hang.hangBreak(Tidy_Doc.joinWithMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Tidy_Doc["break"])((function () {
                  var $1014 = formatDoStatement(conf);
                  return function ($1015) {
                      return Tidy_Doc.flexGroup($1014($1015));
                  };
              })())(v.value0.statements)));
          };
          if (v instanceof PureScript_CST_Types.ExprAdo) {
              return Tidy_Hang.hang(formatToken(conf)(v.value0.keyword))(Tidy_Hang.hangBreak(Tidy_Doc.flexSpaceBreak(Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc["break"])(formatDoStatement(conf))(v.value0.statements))(Tidy_Doc.flexSpaceBreak(formatToken(conf)(v["value0"]["in"]))(Tidy_Doc.indent(formatExpr(conf)(v.value0.result))))));
          };
          if (v instanceof PureScript_CST_Types.ExprError) {
              return Tidy_Hang.hangBreak(conf.formatError(v.value0));
          };
          throw new Error("Failed pattern match at Tidy (line 839, column 26 - line 954, column 35): " + [ v.constructor.name ]);
      };
  };
  var formatGuardedExpr = function (conf) {
      return function (v) {
          var patternGuards = Tidy_Doc.softBreak(formatListElem(2)(formatPatternGuard)(conf)(v.patterns.head))(formatListTail(2)(formatPatternGuard)(conf)(v.patterns.tail));
          return Tidy_Hang.hangWithIndent((function () {
              var $1016 = Tidy_Doc.align(2);
              return function ($1017) {
                  return $1016(Tidy_Doc.indent($1017));
              };
          })())(Tidy_Hang.hangBreak(Tidy_Doc.space(Tidy_Doc.space(formatToken(conf)(v.bar))(Tidy_Doc.flexGroup(patternGuards)))(Tidy_Doc.anchor(formatToken(conf)(v.separator)))))((function () {
              if (v.where.bindings instanceof Data_Maybe.Nothing) {
                  return [ formatHangingExpr(conf)(v.where.expr) ];
              };
              if (v.where.bindings instanceof Data_Maybe.Just) {
                  return [ formatHangingExpr(conf)(v.where.expr), Tidy_Hang.hangBreak(formatWhere(conf)(v.where.bindings.value0)) ];
              };
              throw new Error("Failed pattern match at Tidy (line 1033, column 5 - line 1039, column 10): " + [ v.where.bindings.constructor.name ]);
          })());
      };
  };
  var formatExpr = function (conf) {
      var $1018 = formatHangingExpr(conf);
      return function ($1019) {
          return Tidy_Hang.toFormatDoc($1018($1019));
      };
  };
  var formatElseIfChain = function (conf) {
      var $1020 = Tidy_Doc.joinWithMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Tidy_Doc.spaceBreak)(function (v) {
          if (v instanceof IfThen) {
              return Tidy_Doc.space(Tidy_Doc.flexSpaceBreak(formatToken(conf)(v.value0))(Tidy_Doc.indent(Tidy_Doc.anchor(Tidy_Doc.flexGroup(formatExpr(conf)(v.value1))))))(Tidy_Hang.toFormatDoc(Tidy_Hang.hang(Tidy_Doc.anchor(formatToken(conf)(v.value2)))(formatHangingExpr(conf)(v.value3))));
          };
          if (v instanceof ElseIfThen) {
              return Tidy_Doc.space(Tidy_Doc.flexSpaceBreak(Tidy_Doc.space(formatToken(conf)(v.value0))(Tidy_Doc.indent(Tidy_Doc.anchor(formatToken(conf)(v.value1)))))(Tidy_Doc.indent(Tidy_Doc.anchor(Tidy_Doc.flexGroup(formatExpr(conf)(v.value2))))))(Tidy_Hang.toFormatDoc(Tidy_Hang.hang(Tidy_Doc.anchor(formatToken(conf)(v.value3)))(formatHangingExpr(conf)(v.value4))));
          };
          if (v instanceof Else) {
              return Tidy_Hang.toFormatDoc(Tidy_Hang.hang(formatToken(conf)(v.value0))(formatHangingExpr(conf)(v.value1)));
          };
          throw new Error("Failed pattern match at Tidy (line 972, column 63 - line 988, column 79): " + [ v.constructor.name ]);
      });
      return function ($1021) {
          return Tidy_Doc.flexGroup($1020($1021));
      };
  };
  var formatDoStatement = function (conf) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.DoLet) {
              return Tidy_Doc.flexSpaceBreak(formatToken(conf)(v.value0))(Tidy_Doc.indent(formatLetGroups(conf)(Data_Array_NonEmpty.toArray(v.value1))));
          };
          if (v instanceof PureScript_CST_Types.DoDiscard) {
              return formatExpr(conf)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.DoBind) {
              return Tidy_Doc.space(Tidy_Doc.flexGroup(formatBinder(conf)(v.value0)))(Tidy_Hang.toFormatDoc(Tidy_Hang.hang(Tidy_Doc.indent(Tidy_Doc.anchor(formatToken(conf)(v.value1))))(formatHangingExpr(conf)(v.value2))));
          };
          if (v instanceof PureScript_CST_Types.DoError) {
              return conf.formatError(v.value0);
          };
          throw new Error("Failed pattern match at Tidy (line 1100, column 26 - line 1111, column 23): " + [ v.constructor.name ]);
      };
  };
  var formatCaseBranch = function (conf) {
      return function (v) {
          var caseBinders = Tidy_Doc.flexGroup(Data_Foldable.foldl(Data_Foldable.foldableArray)(function (doc) {
              return function (v1) {
                  return Tidy_Doc.spaceBreak(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(doc)(Tidy_Doc.indent(Tidy_Doc.anchor(formatToken(conf)(v1.value0)))))(Tidy_Doc.flexGroup(formatBinder(conf)(v1.value1)));
              };
          })(Tidy_Doc.flexGroup(formatBinder(conf)(v.value0.head)))(v.value0.tail));
          if (v.value1 instanceof PureScript_CST_Types.Unconditional) {
              return Tidy_Doc["break"](Tidy_Doc.space(caseBinders)(Tidy_Hang.toFormatDoc(Tidy_Hang.hang(formatToken(conf)(v.value1.value0))(formatHangingExpr(conf)(v.value1.value1.expr)))))(Tidy_Doc.indent(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatWhere(conf))(v.value1.value1.bindings)));
          };
          if (v.value1 instanceof PureScript_CST_Types.Guarded) {
              var $801 = Data_Array_NonEmpty.length(v.value1.value0) === 1;
              if ($801) {
                  return Tidy_Hang.toFormatDoc(Tidy_Hang.hang(caseBinders)(formatGuardedExpr(conf)(Data_Array_NonEmpty.head(v.value1.value0))));
              };
              return Tidy_Doc.flexSpaceBreak(caseBinders)(Tidy_Doc.indent(Tidy_Doc.joinWithMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Tidy_Doc["break"])((function () {
                  var $1022 = formatGuardedExpr(conf);
                  return function ($1023) {
                      return Tidy_Hang.toFormatDoc($1022($1023));
                  };
              })())(v.value1.value0)));
          };
          throw new Error("Failed pattern match at Tidy (line 1000, column 3 - line 1013, column 81): " + [ v.value1.constructor.name ]);
      };
  };
  var formatInstanceBinding = function (conf) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.InstanceBindingSignature) {
              return formatSignature(conf)(Tidy_Util.overLabel(formatName(conf))(v.value0));
          };
          if (v instanceof PureScript_CST_Types.InstanceBindingName) {
              return formatValueBinding(conf)(v.value0);
          };
          throw new Error("Failed pattern match at Tidy (line 621, column 30 - line 625, column 32): " + [ v.constructor.name ]);
      };
  };
  var formatInstance = function (conf) {
      return function (v) {
          if (v.body instanceof Data_Maybe.Nothing) {
              return formatInstanceHead(conf)(new Data_Tuple.Tuple(v.head, Data_Maybe.Nothing.value));
          };
          if (v.body instanceof Data_Maybe.Just) {
              return Tidy_Doc["break"](formatInstanceHead(conf)(new Data_Tuple.Tuple(v.head, new Data_Maybe.Just(v.body.value0.value0))))(Tidy_Doc.indent(Tidy_Doc.joinWithMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Tidy_Doc["break"])(formatInstanceBinding(conf))(v.body.value0.value1)));
          };
          throw new Error("Failed pattern match at Tidy (line 593, column 49 - line 598, column 62): " + [ v.body.constructor.name ]);
      };
  };
  var formatDecl = function (conf) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.DeclData && v.value1 instanceof Data_Maybe.Just) {
              var formatDataElem = function (v1) {
                  return Tidy_Doc.space(formatToken(conf)(v1.value0))(formatListElem(2)(formatDataCtor)(conf)(v1.value1));
              };
              var $822 = Data_Array["null"](v.value1.value0.value1.tail);
              if ($822) {
                  return declareHanging(formatDataHead(conf)(v.value0))(Tidy_Doc.space)(Tidy_Doc.anchor(formatToken(conf)(v.value1.value0.value0)))(formatHangingDataCtor(conf)(v.value1.value0.value1.head));
              };
              return Tidy_Doc.flexSpaceBreak(formatDataHead(conf)(v.value0))(Tidy_Doc.indent(Tidy_Doc.spaceBreak(formatDataElem(new Data_Tuple.Tuple(v.value1.value0.value0, v.value1.value0.value1.head)))(Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc.spaceBreak)(formatDataElem)(v.value1.value0.value1.tail))));
          };
          if (v instanceof PureScript_CST_Types.DeclData) {
              return formatDataHead(conf)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.DeclType) {
              return declareHanging(formatDataHead(conf)(v.value0))(Tidy_Doc.space)(Tidy_Doc.anchor(formatToken(conf)(v.value1)))(formatHangingType(conf)(v.value2));
          };
          if (v instanceof PureScript_CST_Types.DeclNewtype) {
              return declareHanging(formatDataHead(conf)(v.value0))(Tidy_Doc.space)(Tidy_Doc.anchor(formatToken(conf)(v.value1)))(formatHangingDataCtor(conf)({
                  name: v.value2,
                  fields: [ v.value3 ]
              }));
          };
          if (v instanceof PureScript_CST_Types.DeclRole) {
              var words = [ formatToken(conf)(v.value0), formatToken(conf)(v.value1), formatName(conf)(v.value2) ];
              var roles = Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)((function () {
                  var $1024 = formatToken(conf);
                  return function ($1025) {
                      return $1024(Data_Tuple.fst($1025));
                  };
              })())(v.value3);
              return flatten(Data_Semigroup.append(Data_Semigroup.semigroupArray)(words)(Data_Array_NonEmpty.toArray(roles)));
          };
          if (v instanceof PureScript_CST_Types.DeclFixity) {
              if (v.value0.operator instanceof PureScript_CST_Types.FixityValue) {
                  return flatten([ formatToken(conf)(v.value0.keyword.value0), formatToken(conf)(v.value0.prec.value0), formatQualifiedName(conf)(v.value0.operator.value0), formatToken(conf)(v.value0.operator.value1), formatName(conf)(v.value0.operator.value2) ]);
              };
              if (v.value0.operator instanceof PureScript_CST_Types.FixityType) {
                  return flatten([ formatToken(conf)(v.value0.keyword.value0), formatToken(conf)(v.value0.prec.value0), formatToken(conf)(v.value0.operator.value0), formatQualifiedName(conf)(v.value0.operator.value1), formatToken(conf)(v.value0.operator.value2), formatName(conf)(v.value0.operator.value3) ]);
              };
              throw new Error("Failed pattern match at Tidy (line 426, column 5 - line 443, column 12): " + [ v.value0.operator.constructor.name ]);
          };
          if (v instanceof PureScript_CST_Types.DeclKindSignature) {
              return formatSignature(conf)({
                  label: flatten([ formatToken(conf)(v.value0), formatName(conf)(v.value1.label) ]),
                  separator: v.value1.separator,
                  value: v.value1.value
              });
          };
          if (v instanceof PureScript_CST_Types.DeclForeign) {
              if (v.value2 instanceof PureScript_CST_Types.ForeignValue) {
                  return formatSignature(conf)(Tidy_Util.overLabel(function (label) {
                      return flatten([ formatToken(conf)(v.value0), formatToken(conf)(v.value1), formatName(conf)(label) ]);
                  })(v.value2.value0));
              };
              if (v.value2 instanceof PureScript_CST_Types.ForeignData) {
                  return formatSignature(conf)(Tidy_Util.overLabel(function (label) {
                      return flatten([ formatToken(conf)(v.value0), formatToken(conf)(v.value1), formatToken(conf)(v.value2.value0), formatName(conf)(label) ]);
                  })(v.value2.value1));
              };
              if (v.value2 instanceof PureScript_CST_Types.ForeignKind) {
                  return flatten([ formatToken(conf)(v.value0), formatToken(conf)(v.value1), formatToken(conf)(v.value2.value0), formatName(conf)(v.value2.value1) ]);
              };
              throw new Error("Failed pattern match at Tidy (line 457, column 5 - line 485, column 12): " + [ v.value2.constructor.name ]);
          };
          if (v instanceof PureScript_CST_Types.DeclClass) {
              if (v.value1 instanceof Data_Maybe.Nothing) {
                  return formatClassHead(conf)(new Data_Tuple.Tuple(v.value0, Data_Maybe.Nothing.value));
              };
              if (v.value1 instanceof Data_Maybe.Just) {
                  return Tidy_Doc["break"](formatClassHead(conf)(new Data_Tuple.Tuple(v.value0, new Data_Maybe.Just(v.value1.value0.value0))))(Tidy_Doc.indent(Tidy_Doc.joinWithMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Tidy_Doc["break"])((function () {
                      var $1026 = formatSignature(conf);
                      var $1027 = Tidy_Util.overLabel(formatName(conf));
                      return function ($1028) {
                          return $1026($1027($1028));
                      };
                  })())(v.value1.value0.value1)));
              };
              throw new Error("Failed pattern match at Tidy (line 488, column 5 - line 496, column 19): " + [ v.value1.constructor.name ]);
          };
          if (v instanceof PureScript_CST_Types.DeclInstanceChain) {
              return Tidy_Doc["break"](formatInstance(conf)(v.value0.head))(Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc["break"])(function (v1) {
                  return Tidy_Doc.space(formatToken(conf)(v1.value0))(Tidy_Doc.anchor(formatInstance(conf)(v1.value1)));
              })(v.value0.tail));
          };
          if (v instanceof PureScript_CST_Types.DeclDerive) {
              return Tidy_Doc.space(Tidy_Doc.space(formatToken(conf)(v.value0))(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)((function () {
                  var $1029 = formatToken(conf);
                  return function ($1030) {
                      return Tidy_Doc.indent(Tidy_Doc.anchor($1029($1030)));
                  };
              })())(v.value1)))(Tidy_Doc.anchor(formatInstanceHead(conf)(new Data_Tuple.Tuple(v.value2, Data_Maybe.Nothing.value))));
          };
          if (v instanceof PureScript_CST_Types.DeclSignature) {
              return formatSignature(conf)(Tidy_Util.overLabel((function () {
                  var $1031 = Control_Applicative.pure(Control_Applicative.applicativeArray);
                  var $1032 = formatName(conf);
                  return function ($1033) {
                      return flatten($1031($1032($1033)));
                  };
              })())(v.value0));
          };
          if (v instanceof PureScript_CST_Types.DeclValue) {
              return formatValueBinding(conf)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.DeclError) {
              return conf.formatError(v.value0);
          };
          throw new Error("Failed pattern match at Tidy (line 379, column 19 - line 517, column 23): " + [ v.constructor.name ]);
      };
  };
  var formatTopLevelGroups = (function () {
      var topDeclGroupSeparator = function (v) {
          return function (v1) {
              if (v instanceof DeclGroupValue && v1 instanceof DeclGroupValue) {
                  var $891 = Data_Eq.eq(PureScript_CST_Types.eqIdent)(v.value0)(v1.value0);
                  if ($891) {
                      return DeclGroupSame.value;
                  };
                  return DeclGroupSoft.value;
              };
              if (v instanceof DeclGroupValueSignature && v1 instanceof DeclGroupValue) {
                  var $894 = Data_Eq.eq(PureScript_CST_Types.eqIdent)(v.value0)(v1.value0);
                  if ($894) {
                      return DeclGroupSame.value;
                  };
                  return DeclGroupHard.value;
              };
              if (v1 instanceof DeclGroupValueSignature) {
                  return DeclGroupHard.value;
              };
              if (v instanceof DeclGroupType && v1 instanceof DeclGroupType) {
                  return DeclGroupSoft.value;
              };
              if (v instanceof DeclGroupTypeSignature && v1 instanceof DeclGroupType) {
                  var $900 = Data_Eq.eq(PureScript_CST_Types.eqProper)(v.value0)(v1.value0);
                  if ($900) {
                      return DeclGroupSame.value;
                  };
                  return DeclGroupHard.value;
              };
              if (v instanceof DeclGroupTypeSignature && v1 instanceof DeclGroupClass) {
                  var $903 = Data_Eq.eq(PureScript_CST_Types.eqProper)(v.value0)(v1.value0);
                  if ($903) {
                      return DeclGroupSame.value;
                  };
                  return DeclGroupHard.value;
              };
              if (v1 instanceof DeclGroupTypeSignature) {
                  return DeclGroupHard.value;
              };
              if (v instanceof DeclGroupClass && v1 instanceof DeclGroupClass) {
                  return DeclGroupSoft.value;
              };
              if (v1 instanceof DeclGroupClass) {
                  return DeclGroupHard.value;
              };
              if (v instanceof DeclGroupInstance && v1 instanceof DeclGroupInstance) {
                  return DeclGroupSoft.value;
              };
              if (v1 instanceof DeclGroupInstance) {
                  return DeclGroupHard.value;
              };
              if (v instanceof DeclGroupFixity && v1 instanceof DeclGroupFixity) {
                  return DeclGroupSoft.value;
              };
              if (v1 instanceof DeclGroupFixity) {
                  return DeclGroupHard.value;
              };
              if (v instanceof DeclGroupForeign && v1 instanceof DeclGroupForeign) {
                  return DeclGroupSoft.value;
              };
              if (v1 instanceof DeclGroupForeign) {
                  return DeclGroupHard.value;
              };
              if (v instanceof DeclGroupRole && v1 instanceof DeclGroupRole) {
                  return DeclGroupSoft.value;
              };
              if (v1 instanceof DeclGroupRole) {
                  return DeclGroupHard.value;
              };
              return DeclGroupSoft.value;
          };
      };
      var topDeclGroup = function (v) {
          if (v instanceof PureScript_CST_Types.DeclData) {
              return new DeclGroupType(v.value0.name.name);
          };
          if (v instanceof PureScript_CST_Types.DeclType) {
              return new DeclGroupType(v.value0.name.name);
          };
          if (v instanceof PureScript_CST_Types.DeclNewtype) {
              return new DeclGroupType(v.value0.name.name);
          };
          if (v instanceof PureScript_CST_Types.DeclClass) {
              return new DeclGroupClass(v.value0.name.name);
          };
          if (v instanceof PureScript_CST_Types.DeclKindSignature) {
              return new DeclGroupTypeSignature(v.value1.label.name);
          };
          if (v instanceof PureScript_CST_Types.DeclSignature) {
              return new DeclGroupValueSignature(v.value0.label.name);
          };
          if (v instanceof PureScript_CST_Types.DeclValue) {
              return new DeclGroupValue(v.value0.name.name);
          };
          if (v instanceof PureScript_CST_Types.DeclInstanceChain) {
              return DeclGroupInstance.value;
          };
          if (v instanceof PureScript_CST_Types.DeclDerive) {
              return DeclGroupInstance.value;
          };
          if (v instanceof PureScript_CST_Types.DeclFixity) {
              return DeclGroupFixity.value;
          };
          if (v instanceof PureScript_CST_Types.DeclForeign) {
              return DeclGroupForeign.value;
          };
          if (v instanceof PureScript_CST_Types.DeclRole) {
              return DeclGroupRole.value;
          };
          if (v instanceof PureScript_CST_Types.DeclError) {
              return DeclGroupUnknown.value;
          };
          throw new Error("Failed pattern match at Tidy (line 1321, column 18 - line 1334, column 36): " + [ v.constructor.name ]);
      };
      return formatDeclGroups(topDeclGroupSeparator)(topDeclGroup)(formatDecl);
  })();
  var formatModule = function (conf) {
      return function (v) {
          var formatImports = function (k) {
              return Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc["break"])((function () {
                  var $1034 = formatImportDecl(conf);
                  return function ($1035) {
                      return k($1034($1035));
                  };
              })());
          };
          var imports = (function () {
              if (conf.importSort instanceof ImportSortSource) {
                  return formatImports(Control_Category.identity(Control_Category.categoryFn))(v.header.imports);
              };
              if (conf.importSort instanceof ImportSortIde) {
                  var toComparison = function (v1) {
                      var modName = Tidy_Util.nameOf(v1.module);
                      var qualName = Data_Functor.map(Data_Maybe.functorMaybe)(function ($1036) {
                          return Tidy_Util.nameOf(Data_Tuple.snd($1036));
                      })(v1.qualified);
                      if (v1.names instanceof Data_Maybe.Just) {
                          var v2 = sortImportsIde(v1.names.value0.value1);
                          var order = (function () {
                              var $959 = Data_Maybe.isJust(v1.names.value0.value0);
                              if ($959) {
                                  return 3;
                              };
                              return 1;
                          })();
                          return new Data_Tuple.Tuple(new ImportModuleCmp(modName, order, v2.value0, qualName), {
                              keyword: v1.keyword,
                              module: v1.module,
                              names: new Data_Maybe.Just(new Data_Tuple.Tuple(v1.names.value0.value0, v2.value1)),
                              qualified: v1.qualified
                          });
                      };
                      if (v1.names instanceof Data_Maybe.Nothing) {
                          return new Data_Tuple.Tuple(new ImportModuleCmp(modName, 2, [  ], qualName), v1);
                      };
                      throw new Error("Failed pattern match at Tidy (line 238, column 11 - line 244, column 78): " + [ v1.names.constructor.name ]);
                  };
                  var sorted = Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(Data_Array.sortWith(ordImportModuleComparison)(Data_Tuple.fst)(Data_Functor.map(Data_Functor.functorArray)(toComparison)(v.header.imports)));
                  var isOpenImport = function (v1) {
                      if (v1.qualified instanceof Data_Maybe.Nothing && v1.names instanceof Data_Maybe.Nothing) {
                          return true;
                      };
                      if (v1.qualified instanceof Data_Maybe.Nothing && (v1.names instanceof Data_Maybe.Just && v1.names.value0.value0 instanceof Data_Maybe.Just)) {
                          return true;
                      };
                      return false;
                  };
                  var v1 = Data_Array.partition(isOpenImport)(sorted);
                  return Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(formatImports(Tidy_Doc.flatten)(v1.yes))(Tidy_Doc.forceMinSourceBreaks(2)(formatImports(Tidy_Doc.flatten)(v1.no)));
              };
              throw new Error("Failed pattern match at Tidy (line 221, column 5 - line 252, column 18): " + [ conf.importSort.constructor.name ]);
          })();
          return Tidy_Doc.joinWith(Data_Foldable.foldableArray)(Tidy_Doc["break"])([ Tidy_Doc.space(Tidy_Doc.anchor(formatToken(conf)(v.header.keyword)))(Tidy_Doc.indent(Tidy_Doc.space(Tidy_Doc.flexSpaceBreak(Tidy_Doc.anchor(formatName(conf)(v.header.name)))(Tidy_Doc.anchor(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatParenListNonEmpty(NotGrouped.value)(formatExport)(conf))(v.header.exports))))(Tidy_Doc.anchor(formatToken(conf)(v.header.where))))), Tidy_Doc.forceMinSourceBreaks(2)((function () {
              if (conf.importWrap instanceof ImportWrapAuto) {
                  return imports;
              };
              if (conf.importWrap instanceof ImportWrapSource) {
                  return Tidy_Doc.locally(function (v1) {
                      return {
                          indent: v1.indent,
                          indentSpaces: v1.indentSpaces,
                          indentUnit: v1.indentUnit,
                          indentWidth: v1.indentWidth,
                          pageWidth: Data_Bounded.top(Data_Bounded.boundedInt),
                          ribbonRatio: 1.0
                      };
                  })(imports);
              };
              throw new Error("Failed pattern match at Tidy (line 208, column 30 - line 212, column 69): " + [ conf.importWrap.constructor.name ]);
          })()), Tidy_Doc.forceMinSourceBreaks(2)(formatTopLevelGroups(conf)(v.body.decls)), Data_Foldable.foldr(Data_Foldable.foldableArray)(formatComment(Tidy_Doc.leadingLineComment)(Tidy_Doc.leadingBlockComment))(Data_Monoid.mempty(Tidy_Doc.monoidFormatDoc))(v.body.trailingComments) ]);
      };
  };
  exports["defaultFormatOptions"] = defaultFormatOptions;
  exports["TypeArrowFirst"] = TypeArrowFirst;
  exports["TypeArrowLast"] = TypeArrowLast;
  exports["ImportSortSource"] = ImportSortSource;
  exports["ImportSortIde"] = ImportSortIde;
  exports["ImportWrapSource"] = ImportWrapSource;
  exports["ImportWrapAuto"] = ImportWrapAuto;
  exports["formatModule"] = formatModule;
  exports["formatErrorVoid"] = formatErrorVoid;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Bin.FormatOptions"] = $PS["Bin.FormatOptions"] || {};
  var exports = $PS["Bin.FormatOptions"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Either = $PS["Data.Either"];
  var Tidy = $PS["Tidy"];
  var Tidy_Token = $PS["Tidy.Token"];                
  var unicodeToString = function (v) {
      if (v instanceof Tidy_Token.UnicodeSource) {
          return "source";
      };
      if (v instanceof Tidy_Token.UnicodeAlways) {
          return "always";
      };
      if (v instanceof Tidy_Token.UnicodeNever) {
          return "never";
      };
      throw new Error("Failed pattern match at Bin.FormatOptions (line 165, column 19 - line 168, column 26): " + [ v.constructor.name ]);
  };
  var unicodeFromString = function (v) {
      if (v === "source") {
          return Control_Applicative.pure(Data_Either.applicativeEither)(Tidy_Token.UnicodeSource.value);
      };
      if (v === "always") {
          return Control_Applicative.pure(Data_Either.applicativeEither)(Tidy_Token.UnicodeAlways.value);
      };
      if (v === "never") {
          return Control_Applicative.pure(Data_Either.applicativeEither)(Tidy_Token.UnicodeNever.value);
      };
      return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(new Data_Argonaut_Decode_Error.UnexpectedValue(Data_Argonaut_Core.fromString(v)));
  };
  var typeArrowPlacementToString = function (v) {
      if (v instanceof Tidy.TypeArrowFirst) {
          return "first";
      };
      if (v instanceof Tidy.TypeArrowLast) {
          return "last";
      };
      throw new Error("Failed pattern match at Bin.FormatOptions (line 153, column 30 - line 155, column 26): " + [ v.constructor.name ]);
  };
  var typeArrowPlacementFromString = function (v) {
      if (v === "first") {
          return Control_Applicative.pure(Data_Either.applicativeEither)(Tidy.TypeArrowFirst.value);
      };
      if (v === "last") {
          return Control_Applicative.pure(Data_Either.applicativeEither)(Tidy.TypeArrowLast.value);
      };
      return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(new Data_Argonaut_Decode_Error.UnexpectedValue(Data_Argonaut_Core.fromString(v)));
  };
  var importWrapToString = function (v) {
      if (v instanceof Tidy.ImportWrapSource) {
          return "source";
      };
      if (v instanceof Tidy.ImportWrapAuto) {
          return "auto";
      };
      throw new Error("Failed pattern match at Bin.FormatOptions (line 177, column 22 - line 179, column 27): " + [ v.constructor.name ]);
  };
  var importWrapFromString = function (v) {
      if (v === "source") {
          return Control_Applicative.pure(Data_Either.applicativeEither)(Tidy.ImportWrapSource.value);
      };
      if (v === "auto") {
          return Control_Applicative.pure(Data_Either.applicativeEither)(Tidy.ImportWrapAuto.value);
      };
      return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(new Data_Argonaut_Decode_Error.UnexpectedValue(Data_Argonaut_Core.fromString(v)));
  };
  var importSortToString = function (v) {
      if (v instanceof Tidy.ImportSortSource) {
          return "source";
      };
      if (v instanceof Tidy.ImportSortIde) {
          return "ide";
      };
      throw new Error("Failed pattern match at Bin.FormatOptions (line 188, column 22 - line 190, column 25): " + [ v.constructor.name ]);
  };
  var importSortFromString = function (v) {
      if (v === "source") {
          return Control_Applicative.pure(Data_Either.applicativeEither)(Tidy.ImportSortSource.value);
      };
      if (v === "ide") {
          return Control_Applicative.pure(Data_Either.applicativeEither)(Tidy.ImportSortIde.value);
      };
      return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(new Data_Argonaut_Decode_Error.UnexpectedValue(Data_Argonaut_Core.fromString(v)));
  };
  exports["typeArrowPlacementFromString"] = typeArrowPlacementFromString;
  exports["typeArrowPlacementToString"] = typeArrowPlacementToString;
  exports["unicodeFromString"] = unicodeFromString;
  exports["unicodeToString"] = unicodeToString;
  exports["importWrapFromString"] = importWrapFromString;
  exports["importWrapToString"] = importWrapToString;
  exports["importSortFromString"] = importSortFromString;
  exports["importSortToString"] = importSortToString;
})(PS);
(function(exports) {
  const process = require("process");

  exports.hrtime = function() {
    var t = process.hrtime()
    return { seconds: t[0], nanos: t[1] };
  };

  exports.hrtimeDiff = function(old) {
    return function() {
      var t = process.hrtime([old.seconds, old.nanos]);
      return { seconds: t[0], nanos: t[1] };
    };
  };
})(PS["Bin.Timing"] = PS["Bin.Timing"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Time.Duration"] = $PS["Data.Time.Duration"] || {};
  var exports = $PS["Data.Time.Duration"];
  var Milliseconds = function (x) {
      return x;
  };
  exports["Milliseconds"] = Milliseconds;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Bin.Timing"] = $PS["Bin.Timing"] || {};
  var exports = $PS["Bin.Timing"];
  var $foreign = $PS["Bin.Timing"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];                
  var toMilliseconds = function (v) {
      return Data_Time_Duration.Milliseconds(v.seconds * 1000.0 + v.nanos / 1000000.0);
  };
  exports["toMilliseconds"] = toMilliseconds;
  exports["hrtime"] = $foreign.hrtime;
  exports["hrtimeDiff"] = $foreign.hrtimeDiff;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* eslint-disable no-unused-vars, no-prototype-builtins, no-use-before-define, no-unused-labels, no-param-reassign */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var functorAff = {
      map: $foreign["_map"]
  };                                    
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 404, column 21 - line 406, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 399, column 20 - line 401, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 394, column 12 - line 396, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };
  var monadAff = {
      Applicative0: function () {
          return applicativeAff;
      },
      Bind1: function () {
          return bindAff;
      }
  };
  var bindAff = {
      bind: $foreign["_bind"],
      Apply0: function () {
          return applyAff;
      }
  };
  var applyAff = {
      apply: Control_Monad.ap(monadAff),
      Functor0: function () {
          return functorAff;
      }
  };
  var applicativeAff = {
      pure: $foreign["_pure"],
      Apply0: function () {
          return applyAff;
      }
  };
  var monadEffectAff = {
      liftEffect: $foreign["_liftEffect"],
      Monad0: function () {
          return monadAff;
      }
  };   
  var monadThrowAff = {
      throwError: $foreign["_throwError"],
      Monad0: function () {
          return monadAff;
      }
  };
  var monadErrorAff = {
      catchError: $foreign["_catchError"],
      MonadThrow0: function () {
          return monadThrowAff;
      }
  };                                                            
  var runAff = function (k) {
      return function (aff) {
          return launchAff(Control_Bind.bindFlipped(bindAff)((function () {
              var $46 = Effect_Class.liftEffect(monadEffectAff);
              return function ($47) {
                  return $46(k($47));
              };
          })())(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
      };
  };
  var runAff_ = function (k) {
      return function (aff) {
          return Data_Functor["void"](Effect.functorEffect)(runAff(k)(aff));
      };
  };
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  exports["runAff_"] = runAff_;
  exports["nonCanceler"] = nonCanceler;
  exports["functorAff"] = functorAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function(exports) {
  "use strict";

  exports._fmapObject = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(m0[k]);
      }
    }
    return m;
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn4"] = $foreign.runFn4;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Maybe = $PS["Data.Maybe"];
  var lookup = Data_Function_Uncurried.runFn4($foreign["_lookup"])(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var functorObject = {
      map: function (f) {
          return function (m) {
              return $foreign["_fmapObject"](m, f);
          };
      }
  };
  exports["lookup"] = lookup;
  exports["functorObject"] = functorObject;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Node.Encoding"] = $PS["Node.Encoding"] || {};
  var exports = $PS["Node.Encoding"];    
  var ASCII = (function () {
      function ASCII() {

      };
      ASCII.value = new ASCII();
      return ASCII;
  })();
  var UTF8 = (function () {
      function UTF8() {

      };
      UTF8.value = new UTF8();
      return UTF8;
  })();
  var UTF16LE = (function () {
      function UTF16LE() {

      };
      UTF16LE.value = new UTF16LE();
      return UTF16LE;
  })();
  var UCS2 = (function () {
      function UCS2() {

      };
      UCS2.value = new UCS2();
      return UCS2;
  })();
  var Base64 = (function () {
      function Base64() {

      };
      Base64.value = new Base64();
      return Base64;
  })();
  var Latin1 = (function () {
      function Latin1() {

      };
      Latin1.value = new Latin1();
      return Latin1;
  })();
  var Binary = (function () {
      function Binary() {

      };
      Binary.value = new Binary();
      return Binary;
  })();
  var Hex = (function () {
      function Hex() {

      };
      Hex.value = new Hex();
      return Hex;
  })();
  var showEncoding = {
      show: function (v) {
          if (v instanceof ASCII) {
              return "ASCII";
          };
          if (v instanceof UTF8) {
              return "UTF8";
          };
          if (v instanceof UTF16LE) {
              return "UTF16LE";
          };
          if (v instanceof UCS2) {
              return "UCS2";
          };
          if (v instanceof Base64) {
              return "Base64";
          };
          if (v instanceof Latin1) {
              return "Latin1";
          };
          if (v instanceof Binary) {
              return "Binary";
          };
          if (v instanceof Hex) {
              return "Hex";
          };
          throw new Error("Failed pattern match at Node.Encoding (line 19, column 1 - line 27, column 23): " + [ v.constructor.name ]);
      }
  };
  exports["UTF8"] = UTF8;
  exports["showEncoding"] = showEncoding;
})(PS);
(function(exports) {
  "use strict";

  exports.handleCallbackImpl = function (left, right, f) {
    return function (err, value) {
      if (err) {
        f(left(err))();
      } else {
        f(right(value))();
      }
    };
  };
})(PS["Node.FS.Async"] = PS["Node.FS.Async"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var show = function (dict) {
      return dict.show;
  };
  exports["show"] = show;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeRequireFS = require("fs");
})(PS["Node.FS.Internal"] = PS["Node.FS.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Node.FS.Internal"] = $PS["Node.FS.Internal"] || {};
  var exports = $PS["Node.FS.Internal"];
  var $foreign = $PS["Node.FS.Internal"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var mkEffect = Unsafe_Coerce.unsafeCoerce;
  exports["mkEffect"] = mkEffect;
  exports["unsafeRequireFS"] = $foreign.unsafeRequireFS;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Node.FS.Async"] = $PS["Node.FS.Async"] || {};
  var exports = $PS["Node.FS.Async"];
  var $foreign = $PS["Node.FS.Async"];
  var Data_Either = $PS["Data.Either"];
  var Data_Show = $PS["Data.Show"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Internal = $PS["Node.FS.Internal"];          
  var handleCallback = function (cb) {
      return $foreign.handleCallbackImpl(Data_Either.Left.create, Data_Either.Right.create, cb);
  };
  var fs = Node_FS_Internal.unsafeRequireFS;                                                                                  
  var readFile = function (file) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.readFile(file, {}, handleCallback(cb));
          });
      };
  };
  var readTextFile = function (encoding) {
      return function (file) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.readFile(file, {
                      encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                  }, handleCallback(cb));
              });
          };
      };
  };
  var writeFile = function (file) {
      return function (buff) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.writeFile(file, buff, {}, handleCallback(cb));
              });
          };
      };
  };
  var writeTextFile = function (encoding) {
      return function (file) {
          return function (buff) {
              return function (cb) {
                  return Node_FS_Internal.mkEffect(function (v) {
                      return fs.writeFile(file, buff, {
                          encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                      }, handleCallback(cb));
                  });
              };
          };
      };
  };
  exports["readTextFile"] = readTextFile;
  exports["writeTextFile"] = writeTextFile;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Node.FS.Aff"] = $PS["Node.FS.Aff"] || {};
  var exports = $PS["Node.FS.Aff"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Node_FS_Async = $PS["Node.FS.Async"];                
  var toAff = function (p) {
      return Effect_Aff.makeAff(function (k) {
          return Data_Functor.voidLeft(Effect.functorEffect)(p(k))(Effect_Aff.nonCanceler);
      });
  };                                        
  var toAff2 = function (f) {
      return function (a) {
          return function (b) {
              return toAff(f(a)(b));
          };
      };
  };                                              
  var toAff3 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return toAff(f(a)(b)(c));
              };
          };
      };
  };                                        
  var writeTextFile = toAff3(Node_FS_Async.writeTextFile);
  var readTextFile = toAff2(Node_FS_Async.readTextFile);
  exports["readTextFile"] = readTextFile;
  exports["writeTextFile"] = writeTextFile;
})(PS);
(function(exports) {
  
  var fs =require("fs");
  var workerThreads =require("worker_threads");

  function mainImpl(ctor) {
    return function() {
      if (workerThreads.isMainThread) {
        throw new Error("Worker running on main thread.");
      }
      ctor({
        exit: function() {
          process.exit();
        },
        receive: function(cb) {
          return function() {
            workerThreads.parentPort.on('message', function(value) {
              cb(value)();
            });
          };
        },
        reply: function(value) {
          return function() {
            workerThreads.parentPort.postMessage(value);
          };
        },
        threadId: workerThreads.threadId,
        workerData: workerThreads.workerData
      })();
    };
  }

  exports.mainImpl = mainImpl;
})(PS["Node.WorkerBees"] = PS["Node.WorkerBees"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Node.WorkerBees"] = $PS["Node.WorkerBees"] || {};
  var exports = $PS["Node.WorkerBees"];
  var $foreign = $PS["Node.WorkerBees"];
  var makeAsMain = function (dictSendable) {
      return $foreign.mainImpl;
  };
  exports["makeAsMain"] = makeAsMain;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];
  var alt = function (dict) {
      return dict.alt;
  };
  exports["alt"] = alt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Char"] = $PS["Data.Char"] || {};
  var exports = $PS["Data.Char"];
  var Data_Enum = $PS["Data.Enum"];                              
  var fromCharCode = Data_Enum.toEnum(Data_Enum.boundedEnumChar);
  exports["fromCharCode"] = fromCharCode;
})(PS);
(function(exports) {
  "use strict";

  exports.replaceAll = function (s1) {
    return function (s2) {
      return function (s3) {
        return s3.replace(new RegExp(s1.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), s2); // eslint-disable-line no-useless-escape
      };
    };
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];
  exports["replaceAll"] = $foreign.replaceAll;
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["PureScript.CST.Print"] = $PS["PureScript.CST.Print"] || {};
  var exports = $PS["PureScript.CST.Print"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var printQualified = function (moduleName) {
      return function (name) {
          if (moduleName instanceof Data_Maybe.Nothing) {
              return name;
          };
          if (moduleName instanceof Data_Maybe.Just) {
              return Data_Newtype.unwrap()(moduleName.value0) + ("." + name);
          };
          throw new Error("Failed pattern match at PureScript.CST.Print (line 124, column 34 - line 126, column 38): " + [ moduleName.constructor.name ]);
      };
  };
  exports["printQualified"] = printQualified;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["PureScript.CST.Errors"] = $PS["PureScript.CST.Errors"] || {};
  var exports = $PS["PureScript.CST.Errors"];
  var PureScript_CST_Print = $PS["PureScript.CST.Print"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];                
  var UnexpectedEof = (function () {
      function UnexpectedEof() {

      };
      UnexpectedEof.value = new UnexpectedEof();
      return UnexpectedEof;
  })();
  var ExpectedEof = (function () {
      function ExpectedEof(value0) {
          this.value0 = value0;
      };
      ExpectedEof.create = function (value0) {
          return new ExpectedEof(value0);
      };
      return ExpectedEof;
  })();
  var UnexpectedToken = (function () {
      function UnexpectedToken(value0) {
          this.value0 = value0;
      };
      UnexpectedToken.create = function (value0) {
          return new UnexpectedToken(value0);
      };
      return UnexpectedToken;
  })();
  var ExpectedToken = (function () {
      function ExpectedToken(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExpectedToken.create = function (value0) {
          return function (value1) {
              return new ExpectedToken(value0, value1);
          };
      };
      return ExpectedToken;
  })();
  var ExpectedClass = (function () {
      function ExpectedClass(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExpectedClass.create = function (value0) {
          return function (value1) {
              return new ExpectedClass(value0, value1);
          };
      };
      return ExpectedClass;
  })();
  var LexExpected = (function () {
      function LexExpected(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      LexExpected.create = function (value0) {
          return function (value1) {
              return new LexExpected(value0, value1);
          };
      };
      return LexExpected;
  })();
  var LexInvalidCharEscape = (function () {
      function LexInvalidCharEscape(value0) {
          this.value0 = value0;
      };
      LexInvalidCharEscape.create = function (value0) {
          return new LexInvalidCharEscape(value0);
      };
      return LexInvalidCharEscape;
  })();
  var LexCharEscapeOutOfRange = (function () {
      function LexCharEscapeOutOfRange(value0) {
          this.value0 = value0;
      };
      LexCharEscapeOutOfRange.create = function (value0) {
          return new LexCharEscapeOutOfRange(value0);
      };
      return LexCharEscapeOutOfRange;
  })();
  var LexHexOutOfRange = (function () {
      function LexHexOutOfRange(value0) {
          this.value0 = value0;
      };
      LexHexOutOfRange.create = function (value0) {
          return new LexHexOutOfRange(value0);
      };
      return LexHexOutOfRange;
  })();
  var LexIntOutOfRange = (function () {
      function LexIntOutOfRange(value0) {
          this.value0 = value0;
      };
      LexIntOutOfRange.create = function (value0) {
          return new LexIntOutOfRange(value0);
      };
      return LexIntOutOfRange;
  })();
  var LexNumberOutOfRange = (function () {
      function LexNumberOutOfRange(value0) {
          this.value0 = value0;
      };
      LexNumberOutOfRange.create = function (value0) {
          return new LexNumberOutOfRange(value0);
      };
      return LexNumberOutOfRange;
  })();
  var printTokenError = function (v) {
      if (v instanceof PureScript_CST_Types.TokLeftParen) {
          return "'('";
      };
      if (v instanceof PureScript_CST_Types.TokRightParen) {
          return "')'";
      };
      if (v instanceof PureScript_CST_Types.TokLeftBrace) {
          return "'{'";
      };
      if (v instanceof PureScript_CST_Types.TokRightBrace) {
          return "'}'";
      };
      if (v instanceof PureScript_CST_Types.TokLeftSquare) {
          return "'['";
      };
      if (v instanceof PureScript_CST_Types.TokRightSquare) {
          return "']'";
      };
      if (v instanceof PureScript_CST_Types.TokLeftArrow) {
          if (v.value0 instanceof PureScript_CST_Types.ASCII) {
              return "'<-'";
          };
          if (v.value0 instanceof PureScript_CST_Types.Unicode) {
              return "'\u2190'";
          };
          throw new Error("Failed pattern match at PureScript.CST.Errors (line 72, column 5 - line 74, column 23): " + [ v.value0.constructor.name ]);
      };
      if (v instanceof PureScript_CST_Types.TokRightArrow) {
          if (v.value0 instanceof PureScript_CST_Types.ASCII) {
              return "'->'";
          };
          if (v.value0 instanceof PureScript_CST_Types.Unicode) {
              return "'\u2192'";
          };
          throw new Error("Failed pattern match at PureScript.CST.Errors (line 76, column 5 - line 78, column 23): " + [ v.value0.constructor.name ]);
      };
      if (v instanceof PureScript_CST_Types.TokRightFatArrow) {
          if (v.value0 instanceof PureScript_CST_Types.ASCII) {
              return "'=>'";
          };
          if (v.value0 instanceof PureScript_CST_Types.Unicode) {
              return "'\u21d2'";
          };
          throw new Error("Failed pattern match at PureScript.CST.Errors (line 80, column 5 - line 82, column 23): " + [ v.value0.constructor.name ]);
      };
      if (v instanceof PureScript_CST_Types.TokDoubleColon) {
          if (v.value0 instanceof PureScript_CST_Types.ASCII) {
              return "'::'";
          };
          if (v.value0 instanceof PureScript_CST_Types.Unicode) {
              return "'\u2237'";
          };
          throw new Error("Failed pattern match at PureScript.CST.Errors (line 84, column 5 - line 86, column 23): " + [ v.value0.constructor.name ]);
      };
      if (v instanceof PureScript_CST_Types.TokForall) {
          if (v.value0 instanceof PureScript_CST_Types.ASCII) {
              return "forall";
          };
          if (v.value0 instanceof PureScript_CST_Types.Unicode) {
              return "'\u2200'";
          };
          throw new Error("Failed pattern match at PureScript.CST.Errors (line 88, column 5 - line 90, column 23): " + [ v.value0.constructor.name ]);
      };
      if (v instanceof PureScript_CST_Types.TokEquals) {
          return "'='";
      };
      if (v instanceof PureScript_CST_Types.TokPipe) {
          return "'|'";
      };
      if (v instanceof PureScript_CST_Types.TokTick) {
          return "`";
      };
      if (v instanceof PureScript_CST_Types.TokDot) {
          return ".";
      };
      if (v instanceof PureScript_CST_Types.TokComma) {
          return "','";
      };
      if (v instanceof PureScript_CST_Types.TokUnderscore) {
          return "'_'";
      };
      if (v instanceof PureScript_CST_Types.TokBackslash) {
          return "'\\'";
      };
      if (v instanceof PureScript_CST_Types.TokAt) {
          return "'@'";
      };
      if (v instanceof PureScript_CST_Types.TokLowerName) {
          return "identifier " + PureScript_CST_Print.printQualified(v.value0)(v.value1);
      };
      if (v instanceof PureScript_CST_Types.TokUpperName) {
          return "proper identifier " + PureScript_CST_Print.printQualified(v.value0)(v.value1);
      };
      if (v instanceof PureScript_CST_Types.TokOperator) {
          return "operator " + PureScript_CST_Print.printQualified(v.value0)(v.value1);
      };
      if (v instanceof PureScript_CST_Types.TokSymbolName) {
          return "symbol " + PureScript_CST_Print.printQualified(v.value0)(v.value1);
      };
      if (v instanceof PureScript_CST_Types.TokSymbolArrow) {
          if (v.value0 instanceof PureScript_CST_Types.ASCII) {
              return "(->)";
          };
          if (v.value0 instanceof PureScript_CST_Types.Unicode) {
              return "(\u2192)";
          };
          throw new Error("Failed pattern match at PureScript.CST.Errors (line 116, column 5 - line 118, column 23): " + [ v.value0.constructor.name ]);
      };
      if (v instanceof PureScript_CST_Types.TokHole) {
          return "hole ?" + v.value0;
      };
      if (v instanceof PureScript_CST_Types.TokChar) {
          return "char literal '" + (v.value0 + "'");
      };
      if (v instanceof PureScript_CST_Types.TokString) {
          return "string literal";
      };
      if (v instanceof PureScript_CST_Types.TokRawString) {
          return "raw string literal";
      };
      if (v instanceof PureScript_CST_Types.TokInt) {
          return "int literal " + v.value0;
      };
      if (v instanceof PureScript_CST_Types.TokNumber) {
          return "number literal " + v.value0;
      };
      if (v instanceof PureScript_CST_Types.TokLayoutStart) {
          return "start of indented block";
      };
      if (v instanceof PureScript_CST_Types.TokLayoutSep) {
          return "new indented block item";
      };
      if (v instanceof PureScript_CST_Types.TokLayoutEnd) {
          return "end of indented block";
      };
      throw new Error("Failed pattern match at PureScript.CST.Errors (line 58, column 19 - line 136, column 28): " + [ v.constructor.name ]);
  };
  var printParseError = function (v) {
      if (v instanceof UnexpectedEof) {
          return "Unexpected end of file";
      };
      if (v instanceof ExpectedEof) {
          return "Expected end of file, saw " + printTokenError(v.value0);
      };
      if (v instanceof UnexpectedToken) {
          return "Unexpected " + printTokenError(v.value0);
      };
      if (v instanceof ExpectedToken) {
          return "Expected " + (printTokenError(v.value0) + (", saw " + printTokenError(v.value1)));
      };
      if (v instanceof ExpectedClass) {
          return "Expected " + (v.value0 + (", saw " + printTokenError(v.value1)));
      };
      if (v instanceof LexExpected) {
          return "Expected " + (v.value0 + (", saw " + v.value1));
      };
      if (v instanceof LexInvalidCharEscape) {
          return "Invalid character escape \\" + v.value0;
      };
      if (v instanceof LexCharEscapeOutOfRange) {
          return "Character escape out of range \\" + v.value0;
      };
      if (v instanceof LexHexOutOfRange) {
          return "Hex integer out of range 0x" + v.value0;
      };
      if (v instanceof LexIntOutOfRange) {
          return "Int out of range " + v.value0;
      };
      if (v instanceof LexNumberOutOfRange) {
          return "Number out of range " + v.value0;
      };
      throw new Error("Failed pattern match at PureScript.CST.Errors (line 33, column 19 - line 55, column 34): " + [ v.constructor.name ]);
  };
  exports["UnexpectedEof"] = UnexpectedEof;
  exports["ExpectedEof"] = ExpectedEof;
  exports["UnexpectedToken"] = UnexpectedToken;
  exports["LexExpected"] = LexExpected;
  exports["LexInvalidCharEscape"] = LexInvalidCharEscape;
  exports["LexCharEscapeOutOfRange"] = LexCharEscapeOutOfRange;
  exports["LexIntOutOfRange"] = LexIntOutOfRange;
  exports["LexNumberOutOfRange"] = LexNumberOutOfRange;
  exports["printParseError"] = printParseError;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["PureScript.CST.Layout"] = $PS["PureScript.CST.Layout"] || {};
  var exports = $PS["PureScript.CST.Layout"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];                
  var LytRoot = (function () {
      function LytRoot() {

      };
      LytRoot.value = new LytRoot();
      return LytRoot;
  })();
  var LytTopDecl = (function () {
      function LytTopDecl() {

      };
      LytTopDecl.value = new LytTopDecl();
      return LytTopDecl;
  })();
  var LytTopDeclHead = (function () {
      function LytTopDeclHead() {

      };
      LytTopDeclHead.value = new LytTopDeclHead();
      return LytTopDeclHead;
  })();
  var LytDeclGuard = (function () {
      function LytDeclGuard() {

      };
      LytDeclGuard.value = new LytDeclGuard();
      return LytDeclGuard;
  })();
  var LytCase = (function () {
      function LytCase() {

      };
      LytCase.value = new LytCase();
      return LytCase;
  })();
  var LytCaseBinders = (function () {
      function LytCaseBinders() {

      };
      LytCaseBinders.value = new LytCaseBinders();
      return LytCaseBinders;
  })();
  var LytCaseGuard = (function () {
      function LytCaseGuard() {

      };
      LytCaseGuard.value = new LytCaseGuard();
      return LytCaseGuard;
  })();
  var LytLambdaBinders = (function () {
      function LytLambdaBinders() {

      };
      LytLambdaBinders.value = new LytLambdaBinders();
      return LytLambdaBinders;
  })();
  var LytParen = (function () {
      function LytParen() {

      };
      LytParen.value = new LytParen();
      return LytParen;
  })();
  var LytBrace = (function () {
      function LytBrace() {

      };
      LytBrace.value = new LytBrace();
      return LytBrace;
  })();
  var LytSquare = (function () {
      function LytSquare() {

      };
      LytSquare.value = new LytSquare();
      return LytSquare;
  })();
  var LytIf = (function () {
      function LytIf() {

      };
      LytIf.value = new LytIf();
      return LytIf;
  })();
  var LytThen = (function () {
      function LytThen() {

      };
      LytThen.value = new LytThen();
      return LytThen;
  })();
  var LytProperty = (function () {
      function LytProperty() {

      };
      LytProperty.value = new LytProperty();
      return LytProperty;
  })();
  var LytForall = (function () {
      function LytForall() {

      };
      LytForall.value = new LytForall();
      return LytForall;
  })();
  var LytTick = (function () {
      function LytTick() {

      };
      LytTick.value = new LytTick();
      return LytTick;
  })();
  var LytLet = (function () {
      function LytLet() {

      };
      LytLet.value = new LytLet();
      return LytLet;
  })();
  var LytLetStmt = (function () {
      function LytLetStmt() {

      };
      LytLetStmt.value = new LytLetStmt();
      return LytLetStmt;
  })();
  var LytWhere = (function () {
      function LytWhere() {

      };
      LytWhere.value = new LytWhere();
      return LytWhere;
  })();
  var LytOf = (function () {
      function LytOf() {

      };
      LytOf.value = new LytOf();
      return LytOf;
  })();
  var LytDo = (function () {
      function LytDo() {

      };
      LytDo.value = new LytDo();
      return LytDo;
  })();
  var LytAdo = (function () {
      function LytAdo() {

      };
      LytAdo.value = new LytAdo();
      return LytAdo;
  })();
  var lytToken = function (pos) {
      return function (value) {
          return {
              range: {
                  start: pos,
                  end: pos
              },
              leadingComments: [  ],
              trailingComments: [  ],
              value: value
          };
      };
  };
  var isTopDecl = function (tokPos) {
      return function (v) {
          if (v instanceof Data_List_Types.Cons && (v.value0.value1 instanceof LytWhere && (v.value1 instanceof Data_List_Types.Cons && (v.value1.value0.value1 instanceof LytRoot && (v.value1.value1 instanceof Data_List_Types.Nil && tokPos.column === v.value0.value0.column))))) {
              return true;
          };
          return false;
      };
  };
  var isIndented = function (v) {
      if (v instanceof LytLet) {
          return true;
      };
      if (v instanceof LytLetStmt) {
          return true;
      };
      if (v instanceof LytWhere) {
          return true;
      };
      if (v instanceof LytOf) {
          return true;
      };
      if (v instanceof LytDo) {
          return true;
      };
      if (v instanceof LytAdo) {
          return true;
      };
      return false;
  };
  var eqLayoutDelim = {
      eq: function (x) {
          return function (y) {
              if (x instanceof LytRoot && y instanceof LytRoot) {
                  return true;
              };
              if (x instanceof LytTopDecl && y instanceof LytTopDecl) {
                  return true;
              };
              if (x instanceof LytTopDeclHead && y instanceof LytTopDeclHead) {
                  return true;
              };
              if (x instanceof LytDeclGuard && y instanceof LytDeclGuard) {
                  return true;
              };
              if (x instanceof LytCase && y instanceof LytCase) {
                  return true;
              };
              if (x instanceof LytCaseBinders && y instanceof LytCaseBinders) {
                  return true;
              };
              if (x instanceof LytCaseGuard && y instanceof LytCaseGuard) {
                  return true;
              };
              if (x instanceof LytLambdaBinders && y instanceof LytLambdaBinders) {
                  return true;
              };
              if (x instanceof LytParen && y instanceof LytParen) {
                  return true;
              };
              if (x instanceof LytBrace && y instanceof LytBrace) {
                  return true;
              };
              if (x instanceof LytSquare && y instanceof LytSquare) {
                  return true;
              };
              if (x instanceof LytIf && y instanceof LytIf) {
                  return true;
              };
              if (x instanceof LytThen && y instanceof LytThen) {
                  return true;
              };
              if (x instanceof LytProperty && y instanceof LytProperty) {
                  return true;
              };
              if (x instanceof LytForall && y instanceof LytForall) {
                  return true;
              };
              if (x instanceof LytTick && y instanceof LytTick) {
                  return true;
              };
              if (x instanceof LytLet && y instanceof LytLet) {
                  return true;
              };
              if (x instanceof LytLetStmt && y instanceof LytLetStmt) {
                  return true;
              };
              if (x instanceof LytWhere && y instanceof LytWhere) {
                  return true;
              };
              if (x instanceof LytOf && y instanceof LytOf) {
                  return true;
              };
              if (x instanceof LytDo && y instanceof LytDo) {
                  return true;
              };
              if (x instanceof LytAdo && y instanceof LytAdo) {
                  return true;
              };
              return false;
          };
      }
  };
  var insertLayout = function (v) {
      return function (nextPos) {
          return function (stack) {
              var sepP = function (lytPos) {
                  return v.range.start.column === lytPos.column && v.range.start.line !== lytPos.line;
              };
              var pushStack = function (lytPos) {
                  return function (lyt) {
                      return function (v1) {
                          return new Data_Tuple.Tuple(new Data_List_Types.Cons(new Data_Tuple.Tuple(lytPos, lyt), v1.value0), v1.value1);
                      };
                  };
              };
              var popStack = function (v1) {
                  return function (v2) {
                      if (v2.value0 instanceof Data_List_Types.Cons && v1(v2.value0.value0.value1)) {
                          return new Data_Tuple.Tuple(v2.value0.value1, v2.value1);
                      };
                      return v2;
                  };
              };
              var offsideP = function (lytPos) {
                  return function (lyt) {
                      return isIndented(lyt) && v.range.start.column < lytPos.column;
                  };
              };
              var offsideEndP = function (lytPos) {
                  return function (lyt) {
                      return isIndented(lyt) && v.range.start.column <= lytPos.column;
                  };
              };
              var insertToken = function (token) {
                  return function (v1) {
                      return new Data_Tuple.Tuple(v1.value0, Data_Array.snoc(v1.value1)(new Data_Tuple.Tuple(token, v1.value0)));
                  };
              };
              var insertStart = function (lyt) {
                  return function (v1) {
                      var v2 = Data_Foldable.find(Data_List_Types.foldableList)(function ($298) {
                          return isIndented(Data_Tuple.snd($298));
                      })(v1.value0);
                      if (v2 instanceof Data_Maybe.Just && nextPos.column <= v2.value0.value0.column) {
                          return v1;
                      };
                      return insertToken(lytToken(nextPos)(new PureScript_CST_Types.TokLayoutStart(nextPos.column)))(pushStack(nextPos)(lyt)(v1));
                  };
              };
              var insertEnd = function (indent) {
                  return insertToken(lytToken(v.range.start)(new PureScript_CST_Types.TokLayoutEnd(indent)));
              };
              var indentedP = Data_Function["const"](isIndented);
              var indentSepP = function (lytPos) {
                  return function (lyt) {
                      return isIndented(lyt) && sepP(lytPos);
                  };
              };
              var insertSep = function (v1) {
                  var sepTok = lytToken(v.range.start)(new PureScript_CST_Types.TokLayoutSep(v.range.start.column));
                  if (v1.value0 instanceof Data_List_Types.Cons && (v1.value0.value0.value1 instanceof LytTopDecl && sepP(v1.value0.value0.value0))) {
                      return insertToken(sepTok)(new Data_Tuple.Tuple(v1.value0.value1, v1.value1));
                  };
                  if (v1.value0 instanceof Data_List_Types.Cons && (v1.value0.value0.value1 instanceof LytTopDeclHead && sepP(v1.value0.value0.value0))) {
                      return insertToken(sepTok)(new Data_Tuple.Tuple(v1.value0.value1, v1.value1));
                  };
                  if (v1.value0 instanceof Data_List_Types.Cons && indentSepP(v1.value0.value0.value0)(v1.value0.value0.value1)) {
                      if (v1.value0.value0.value1 instanceof LytOf) {
                          return pushStack(v.range.start)(LytCaseBinders.value)(insertToken(sepTok)(v1));
                      };
                      return insertToken(sepTok)(v1);
                  };
                  return v1;
              };
              var collapse = function (p) {
                  var go = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Data_List_Types.Cons && p(v1.value0.value0)(v1.value0.value1)) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = (function () {
                                      var $111 = isIndented(v1.value0.value1);
                                      if ($111) {
                                          return Data_Array.snoc(acc)(new Data_Tuple.Tuple(lytToken(v.range.start)(new PureScript_CST_Types.TokLayoutEnd(v1.value0.value0.column)), v1.value1));
                                      };
                                      return acc;
                                  })();
                                  return;
                              };
                              $tco_done = true;
                              return new Data_Tuple.Tuple(v1, acc);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  return Data_Tuple.uncurry(go);
              };
              var insertDefault = function (state) {
                  return insertToken(v)(insertSep(collapse(offsideP)(state)));
              };
              var insertKwProperty = function (k) {
                  return function (state) {
                      var v1 = insertDefault(state);
                      if (v1.value0 instanceof Data_List_Types.Cons && v1.value0.value0.value1 instanceof LytProperty) {
                          return new Data_Tuple.Tuple(v1.value0.value1, v1.value1);
                      };
                      return k(v1);
                  };
              };
              var insert = function (v1) {
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "data")) {
                      var v2 = insertDefault(v1);
                      if (isTopDecl(v.range.start)(v2.value0)) {
                          return pushStack(v.range.start)(LytTopDecl.value)(v2);
                      };
                      return popStack(function (v3) {
                          return Data_Eq.eq(eqLayoutDelim)(v3)(LytProperty.value);
                      })(v2);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "class")) {
                      var v2 = insertDefault(v1);
                      if (isTopDecl(v.range.start)(v2.value0)) {
                          return pushStack(v.range.start)(LytTopDeclHead.value)(v2);
                      };
                      return popStack(function (v3) {
                          return Data_Eq.eq(eqLayoutDelim)(v3)(LytProperty.value);
                      })(v2);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "where")) {
                      var whereP = function (v2) {
                          return function (v3) {
                              if (v3 instanceof LytDo) {
                                  return true;
                              };
                              return offsideEndP(v2)(v3);
                          };
                      };
                      if (v1.value0 instanceof Data_List_Types.Cons && v1.value0.value0.value1 instanceof LytTopDeclHead) {
                          return insertStart(LytWhere.value)(insertToken(v)(new Data_Tuple.Tuple(v1.value0.value1, v1.value1)));
                      };
                      if (v1.value0 instanceof Data_List_Types.Cons && v1.value0.value0.value1 instanceof LytProperty) {
                          return insertToken(v)(new Data_Tuple.Tuple(v1.value0.value1, v1.value1));
                      };
                      return insertStart(LytWhere.value)(insertToken(v)(collapse(whereP)(v1)));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "in")) {
                      var inP = function (v2) {
                          return function (v3) {
                              if (v3 instanceof LytLet) {
                                  return false;
                              };
                              if (v3 instanceof LytAdo) {
                                  return false;
                              };
                              return isIndented(v3);
                          };
                      };
                      var v2 = collapse(inP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && (v2.value0.value0.value1 instanceof LytLetStmt && (v2.value0.value1 instanceof Data_List_Types.Cons && v2.value0.value1.value0.value1 instanceof LytAdo))) {
                          return insertToken(v)(insertEnd(v2.value0.value1.value0.value0.column)(insertEnd(v2.value0.value0.value0.column)(new Data_Tuple.Tuple(v2.value0.value1.value1, v2.value1))));
                      };
                      if (v2.value0 instanceof Data_List_Types.Cons && isIndented(v2.value0.value0.value1)) {
                          return insertToken(v)(insertEnd(v2.value0.value0.value0.column)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1)));
                      };
                      return popStack(function (v3) {
                          return Data_Eq.eq(eqLayoutDelim)(v3)(LytProperty.value);
                      })(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "let")) {
                      var next = function (v2) {
                          if (v2.value0 instanceof Data_List_Types.Cons && (v2.value0.value0.value1 instanceof LytDo && v2.value0.value0.value0.column === v.range.start.column)) {
                              return insertStart(LytLetStmt.value)(v2);
                          };
                          if (v2.value0 instanceof Data_List_Types.Cons && (v2.value0.value0.value1 instanceof LytAdo && v2.value0.value0.value0.column === v.range.start.column)) {
                              return insertStart(LytLetStmt.value)(v2);
                          };
                          return insertStart(LytLet.value)(v2);
                      };
                      return insertKwProperty(next)(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && v.value.value1 === "do") {
                      return insertKwProperty(insertStart(LytDo.value))(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && v.value.value1 === "ado") {
                      return insertKwProperty(insertStart(LytAdo.value))(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "case")) {
                      return insertKwProperty(pushStack(v.range.start)(LytCase.value))(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "of")) {
                      var v2 = collapse(indentedP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytCase) {
                          return pushStack(nextPos)(LytCaseBinders.value)(insertStart(LytOf.value)(insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1))));
                      };
                      return popStack(function (v3) {
                          return Data_Eq.eq(eqLayoutDelim)(v3)(LytProperty.value);
                      })(insertDefault(v2));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "if")) {
                      return insertKwProperty(pushStack(v.range.start)(LytIf.value))(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "then")) {
                      var v2 = collapse(indentedP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytIf) {
                          return pushStack(v.range.start)(LytThen.value)(insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1)));
                      };
                      return popStack(function (v3) {
                          return Data_Eq.eq(eqLayoutDelim)(v3)(LytProperty.value);
                      })(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "else")) {
                      var v2 = collapse(indentedP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytThen) {
                          return insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1));
                      };
                      var v3 = collapse(offsideP)(v1);
                      if (isTopDecl(v.range.start)(v3.value0)) {
                          return insertToken(v)(v3);
                      };
                      return popStack(function (v4) {
                          return Data_Eq.eq(eqLayoutDelim)(v4)(LytProperty.value);
                      })(insertToken(v)(insertSep(v3)));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokForall) {
                      return insertKwProperty(pushStack(v.range.start)(LytForall.value))(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokBackslash) {
                      return pushStack(v.range.start)(LytLambdaBinders.value)(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokRightArrow) {
                      var guardP = function (v2) {
                          if (v2 instanceof LytCaseBinders) {
                              return true;
                          };
                          if (v2 instanceof LytCaseGuard) {
                              return true;
                          };
                          if (v2 instanceof LytLambdaBinders) {
                              return true;
                          };
                          return false;
                      };
                      var arrowP = function (v2) {
                          return function (v3) {
                              if (v3 instanceof LytDo) {
                                  return true;
                              };
                              if (v3 instanceof LytOf) {
                                  return false;
                              };
                              return offsideEndP(v2)(v3);
                          };
                      };
                      return insertToken(v)(popStack(guardP)(collapse(arrowP)(v1)));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokEquals) {
                      var equalsP = function (v2) {
                          return function (v3) {
                              if (v3 instanceof LytWhere) {
                                  return true;
                              };
                              if (v3 instanceof LytLet) {
                                  return true;
                              };
                              if (v3 instanceof LytLetStmt) {
                                  return true;
                              };
                              return false;
                          };
                      };
                      var v2 = collapse(equalsP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytDeclGuard) {
                          return insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1));
                      };
                      return insertDefault(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokPipe) {
                      var v2 = collapse(offsideEndP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytOf) {
                          return insertToken(v)(pushStack(v.range.start)(LytCaseGuard.value)(v2));
                      };
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytLet) {
                          return insertToken(v)(pushStack(v.range.start)(LytDeclGuard.value)(v2));
                      };
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytLetStmt) {
                          return insertToken(v)(pushStack(v.range.start)(LytDeclGuard.value)(v2));
                      };
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytWhere) {
                          return insertToken(v)(pushStack(v.range.start)(LytDeclGuard.value)(v2));
                      };
                      return insertDefault(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokTick) {
                      var v2 = collapse(indentedP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytTick) {
                          return insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1));
                      };
                      return pushStack(v.range.start)(LytTick.value)(insertToken(v)(insertSep(collapse(offsideEndP)(v1))));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokComma) {
                      var v2 = collapse(indentedP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytBrace) {
                          return pushStack(v.range.start)(LytProperty.value)(insertToken(v)(v2));
                      };
                      return insertToken(v)(v2);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokDot) {
                      var v2 = insertDefault(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytForall) {
                          return new Data_Tuple.Tuple(v2.value0.value1, v2.value1);
                      };
                      return pushStack(v.range.start)(LytProperty.value)(v2);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLeftParen) {
                      return pushStack(v.range.start)(LytParen.value)(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLeftBrace) {
                      return pushStack(v.range.start)(LytProperty.value)(pushStack(v.range.start)(LytBrace.value)(insertDefault(v1)));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLeftSquare) {
                      return pushStack(v.range.start)(LytSquare.value)(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokRightParen) {
                      return insertToken(v)(popStack(function (v2) {
                          return Data_Eq.eq(eqLayoutDelim)(v2)(LytParen.value);
                      })(collapse(indentedP)(v1)));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokRightBrace) {
                      return insertToken(v)(popStack(function (v2) {
                          return Data_Eq.eq(eqLayoutDelim)(v2)(LytBrace.value);
                      })(popStack(function (v2) {
                          return Data_Eq.eq(eqLayoutDelim)(v2)(LytProperty.value);
                      })(collapse(indentedP)(v1))));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokRightSquare) {
                      return insertToken(v)(popStack(function (v2) {
                          return Data_Eq.eq(eqLayoutDelim)(v2)(LytSquare.value);
                      })(collapse(indentedP)(v1)));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokString) {
                      return popStack(function (v2) {
                          return Data_Eq.eq(eqLayoutDelim)(v2)(LytProperty.value);
                      })(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && v.value.value0 instanceof Data_Maybe.Nothing) {
                      return popStack(function (v2) {
                          return Data_Eq.eq(eqLayoutDelim)(v2)(LytProperty.value);
                      })(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokOperator) {
                      return insertToken(v)(insertSep(collapse(offsideEndP)(v1)));
                  };
                  return insertDefault(v1);
              };
              return insert(new Data_Tuple.Tuple(stack, [  ]));
          };
      };
  };
  var currentIndent = (function () {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Types.Cons) {
                  if (isIndented(v.value0.value1)) {
                      $tco_done = true;
                      return new Data_Maybe.Just(v.value0.value0);
                  };
                  if (Data_Boolean.otherwise) {
                      $copy_v = v.value1;
                      return;
                  };
              };
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return go;
  })();
  exports["LytRoot"] = LytRoot;
  exports["currentIndent"] = currentIndent;
  exports["isIndented"] = isIndented;
  exports["insertLayout"] = insertLayout;
  exports["lytToken"] = lytToken;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["PureScript.CST.TokenStream"] = $PS["PureScript.CST.TokenStream"] || {};
  var exports = $PS["PureScript.CST.TokenStream"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];
  var PureScript_CST_Layout = $PS["PureScript.CST.Layout"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];                
  var TokenEOF = (function () {
      function TokenEOF(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokenEOF.create = function (value0) {
          return function (value1) {
              return new TokenEOF(value0, value1);
          };
      };
      return TokenEOF;
  })();
  var TokenError = (function () {
      function TokenError(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      TokenError.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new TokenError(value0, value1, value2, value3);
                  };
              };
          };
      };
      return TokenError;
  })();
  var TokenCons = (function () {
      function TokenCons(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      TokenCons.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new TokenCons(value0, value1, value2, value3);
                  };
              };
          };
      };
      return TokenCons;
  })();
  var TokenStream = function (x) {
      return x;
  };
  var step = (function () {
      var $29 = Data_Newtype.unwrap();
      return function ($30) {
          return Data_Lazy.force($29($30));
      };
  })();
  var unwindLayout = function (pos) {
      return function (eof) {
          var go = function (stk) {
              return TokenStream(Data_Lazy.defer(function (v) {
                  if (stk instanceof Data_List_Types.Nil) {
                      return step(eof);
                  };
                  if (stk instanceof Data_List_Types.Cons) {
                      if (stk.value0.value1 instanceof PureScript_CST_Layout.LytRoot) {
                          return step(eof);
                      };
                      if (PureScript_CST_Layout.isIndented(stk.value0.value1)) {
                          return new TokenCons(PureScript_CST_Layout.lytToken(pos)(new PureScript_CST_Types.TokLayoutEnd(stk.value0.value0.column)), pos, go(stk.value1), stk.value1);
                      };
                      if (Data_Boolean.otherwise) {
                          return step(go(stk.value1));
                      };
                      throw new Error("Failed pattern match at PureScript.CST.TokenStream (line 59, column 7 - line 66, column 27): " + [ stk.value0.value1.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.TokenStream (line 56, column 43 - line 66, column 27): " + [ stk.constructor.name ]);
              }));
          };
          return go;
      };
  };
  var layoutStack = function (stream) {
      var v = step(stream);
      if (v instanceof TokenEOF) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof TokenError) {
          return v.value3;
      };
      if (v instanceof TokenCons) {
          return v.value3;
      };
      throw new Error("Failed pattern match at PureScript.CST.TokenStream (line 48, column 22 - line 51, column 29): " + [ v.constructor.name ]);
  };
  var consTokens = function (dictFoldable) {
      var go = function (v) {
          return function (v1) {
              return Data_Tuple.Tuple.create(v.value0.range.start)(TokenStream(Data_Lazy.defer(function (v2) {
                  return new TokenCons(v.value0, v1.value0, v1.value1, v.value1);
              })));
          };
      };
      return Data_Function.flip(Data_Foldable.foldr(dictFoldable)(go));
  };
  exports["TokenStream"] = TokenStream;
  exports["TokenEOF"] = TokenEOF;
  exports["TokenError"] = TokenError;
  exports["TokenCons"] = TokenCons;
  exports["step"] = step;
  exports["consTokens"] = consTokens;
  exports["layoutStack"] = layoutStack;
  exports["unwindLayout"] = unwindLayout;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["PureScript.CST.Lexer"] = $PS["PureScript.CST.Lexer"] || {};
  var exports = $PS["PureScript.CST.Lexer"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Char = $PS["Data.Char"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Number = $PS["Data.Number"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Data_String_Regex_Unsafe = $PS["Data.String.Regex.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var PureScript_CST_Errors = $PS["PureScript.CST.Errors"];
  var PureScript_CST_Layout = $PS["PureScript.CST.Layout"];
  var PureScript_CST_TokenStream = $PS["PureScript.CST.TokenStream"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];                
  var LexFail = (function () {
      function LexFail(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      LexFail.create = function (value0) {
          return function (value1) {
              return new LexFail(value0, value1);
          };
      };
      return LexFail;
  })();
  var LexSucc = (function () {
      function LexSucc(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      LexSucc.create = function (value0) {
          return function (value1) {
              return new LexSucc(value0, value1);
          };
      };
      return LexSucc;
  })();
  var Lex = function (x) {
      return x;
  };
  var $$try = function (v) {
      return function (str) {
          var v1 = v(str);
          if (v1 instanceof LexFail) {
              return new LexFail(v1.value0, str);
          };
          if (v1 instanceof LexSucc) {
              return new LexSucc(v1.value0, v1.value1);
          };
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 83, column 3 - line 85, column 31): " + [ v1.constructor.name ]);
      };
  };
  var toModuleName = function (v) {
      if (v.length === 0) {
          return Data_Maybe.Nothing.value;
      };
      return Data_Maybe.Just.create(PureScript_CST_Types.ModuleName(Data_String_Common.joinWith(".")(v)));
  };
  var qualLength = Data_Maybe.maybe(0)((function () {
      var $248 = Data_Semiring.add(Data_Semiring.semiringInt)(1);
      var $249 = Data_Newtype.unwrap();
      return function ($250) {
          return $248(Data_String_CodePoints.length($249($250)));
      };
  })());
  var optional = function (v) {
      return function (str) {
          var v1 = v(str);
          if (v1 instanceof LexFail) {
              if (Data_String_CodeUnits.length(str) === Data_String_CodeUnits.length(v1.value1)) {
                  return new LexSucc(Data_Maybe.Nothing.value, str);
              };
              if (Data_Boolean.otherwise) {
                  return new LexFail(v1.value0, v1.value1);
              };
          };
          if (v1 instanceof LexSucc) {
              return new LexSucc(new Data_Maybe.Just(v1.value0), v1.value1);
          };
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 132, column 3 - line 139, column 25): " + [ v1.constructor.name ]);
      };
  };
  var mkUnexpected = function (str) {
      var start = Data_String_CodePoints.take(6)(str);
      var len = Data_String_CodePoints.length(start);
      var $87 = len === 0;
      if ($87) {
          return "end of file";
      };
      var $88 = len < 6;
      if ($88) {
          return start;
      };
      return start + "...";
  };
  var regex = function (mkErr) {
      return function (regexStr) {
          var matchRegex = Data_String_Regex_Unsafe.unsafeRegex("^(?:" + (regexStr + ")"))(Data_String_Regex_Flags.unicode);
          return function (str) {
              var v = Data_String_Regex.match(matchRegex)(str);
              var v1 = function (v2) {
                  return new LexFail(function (v3) {
                      return mkErr(mkUnexpected(str));
                  }, str);
              };
              if (v instanceof Data_Maybe.Just) {
                  var $90 = Data_Array_NonEmpty.head(v.value0);
                  if ($90 instanceof Data_Maybe.Just) {
                      return new LexSucc($90.value0, Data_String_CodeUnits.drop(Data_String_CodeUnits.length($90.value0))(str));
                  };
                  return v1(true);
              };
              return v1(true);
          };
      };
  };
  var satisfy = function (mkErr) {
      return function (p) {
          return function (str) {
              var v = Data_String_CodeUnits.charAt(0)(str);
              if (v instanceof Data_Maybe.Just && p(v.value0)) {
                  return new LexSucc(v.value0, Data_String_CodeUnits.drop(1)(str));
              };
              return new LexFail(function (v1) {
                  return mkErr(mkUnexpected(str));
              }, str);
          };
      };
  };
  var string = function (mkErr) {
      return function (match) {
          return function (str) {
              var $95 = Data_String_CodeUnits.take(Data_String_CodeUnits.length(match))(str) === match;
              if ($95) {
                  return new LexSucc(match, Data_String_CodeUnits.drop(Data_String_CodeUnits.length(match))(str));
              };
              return new LexFail(function (v) {
                  return mkErr(mkUnexpected(str));
              }, str);
          };
      };
  };
  var many = function (v) {
      return function (str) {
          var go = function ($copy_acc) {
              return function ($copy_str$prime) {
                  var $tco_var_acc = $copy_acc;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(acc, str$prime) {
                      var v1 = v(str$prime);
                      if (v1 instanceof LexFail) {
                          if (Data_String_CodeUnits.length(str$prime) === Data_String_CodeUnits.length(v1.value1)) {
                              $tco_done = true;
                              return new LexSucc(acc, str$prime);
                          };
                          if (Data_Boolean.otherwise) {
                              $tco_done = true;
                              return new LexFail(v1.value0, v1.value1);
                          };
                      };
                      if (v1 instanceof LexSucc) {
                          $tco_var_acc = Data_Array.snoc(acc)(v1.value0);
                          $copy_str$prime = v1.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at PureScript.CST.Lexer (line 153, column 7 - line 160, column 38): " + [ v1.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_acc, $copy_str$prime);
                  };
                  return $tco_result;
              };
          };
          return go([  ])(str);
      };
  };
  var functorLex = {
      map: function (f) {
          return function (v) {
              return function (str) {
                  var v1 = v(str);
                  if (v1 instanceof LexFail) {
                      return new LexFail(v1.value0, v1.value1);
                  };
                  if (v1 instanceof LexSucc) {
                      return new LexSucc(f(v1.value0), v1.value1);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Lexer (line 45, column 5 - line 47, column 37): " + [ v1.constructor.name ]);
              };
          };
      }
  };
  var spaceComment = Data_Functor.map(functorLex)(Data_String_CodeUnits.length)(regex(PureScript_CST_Errors.LexExpected.create("spaces"))(" +"));
  var fail = function ($251) {
      return Lex(LexFail.create(Data_Function["const"]($251)));
  };
  var char$prime = function (mkErr) {
      return function (res) {
          return function (match) {
              return function (str) {
                  var $109 = Data_String_CodeUnits.singleton(match) === Data_String_CodeUnits.take(1)(str);
                  if ($109) {
                      return new LexSucc(res, Data_String_CodeUnits.drop(1)(str));
                  };
                  return new LexFail(function (v) {
                      return mkErr(mkUnexpected(str));
                  }, str);
              };
          };
      };
  };
  var $$char = function (mkErr) {
      return function (match) {
          return function (str) {
              var $110 = Data_String_CodeUnits.singleton(match) === Data_String_CodeUnits.take(1)(str);
              if ($110) {
                  return new LexSucc(match, Data_String_CodeUnits.drop(1)(str));
              };
              return new LexFail(function (v) {
                  return mkErr(mkUnexpected(str));
              }, str);
          };
      };
  };
  var bumpText = function (v) {
      return function (colOffset) {
          return function (str) {
              var go = function ($copy_n) {
                  return function ($copy_ix) {
                      var $tco_var_n = $copy_n;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(n, ix) {
                          var v1 = Data_String_CodeUnits["indexOf'"]("\x0a")(ix)(str);
                          if (v1 instanceof Data_Maybe.Just) {
                              $tco_var_n = n + 1 | 0;
                              $copy_ix = v1.value0 + 1 | 0;
                              return;
                          };
                          if (v1 instanceof Data_Maybe.Nothing) {
                              if (n === 0) {
                                  $tco_done = true;
                                  return {
                                      line: v.line,
                                      column: (v.column + Data_String_CodePoints.length(str) | 0) + (colOffset * 2 | 0) | 0
                                  };
                              };
                              if (Data_Boolean.otherwise) {
                                  $tco_done = true;
                                  return {
                                      line: v.line + n | 0,
                                      column: Data_String_CodePoints.length(Data_String_CodeUnits.drop(ix)(str)) + colOffset | 0
                                  };
                              };
                          };
                          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 308, column 13 - line 317, column 12): " + [ v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_n, $copy_ix);
                      };
                      return $tco_result;
                  };
              };
              return go(0)(0);
          };
      };
  };
  var bumpToken = function (v) {
      return function (v1) {
          if (v1 instanceof PureScript_CST_Types.TokLeftParen) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightParen) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokLeftBrace) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightBrace) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokLeftSquare) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightSquare) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokLeftArrow && v1.value0 instanceof PureScript_CST_Types.ASCII) {
              return {
                  line: v.line,
                  column: v.column + 2 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokLeftArrow && v1.value0 instanceof PureScript_CST_Types.Unicode) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightArrow && v1.value0 instanceof PureScript_CST_Types.ASCII) {
              return {
                  line: v.line,
                  column: v.column + 2 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightArrow && v1.value0 instanceof PureScript_CST_Types.Unicode) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightFatArrow && v1.value0 instanceof PureScript_CST_Types.ASCII) {
              return {
                  line: v.line,
                  column: v.column + 2 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightFatArrow && v1.value0 instanceof PureScript_CST_Types.Unicode) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokDoubleColon && v1.value0 instanceof PureScript_CST_Types.ASCII) {
              return {
                  line: v.line,
                  column: v.column + 2 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokDoubleColon && v1.value0 instanceof PureScript_CST_Types.Unicode) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokForall && v1.value0 instanceof PureScript_CST_Types.ASCII) {
              return {
                  line: v.line,
                  column: v.column + 6 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokForall && v1.value0 instanceof PureScript_CST_Types.Unicode) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokEquals) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokPipe) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokTick) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokDot) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokComma) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokUnderscore) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokBackslash) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokAt) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokLowerName) {
              return {
                  line: v.line,
                  column: (v.column + qualLength(v1.value0) | 0) + Data_String_CodePoints.length(v1.value1) | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokUpperName) {
              return {
                  line: v.line,
                  column: (v.column + qualLength(v1.value0) | 0) + Data_String_CodePoints.length(v1.value1) | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokOperator) {
              return {
                  line: v.line,
                  column: (v.column + qualLength(v1.value0) | 0) + Data_String_CodePoints.length(v1.value1) | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokSymbolName) {
              return {
                  line: v.line,
                  column: (v.column + qualLength(v1.value0) | 0) + Data_String_CodePoints.length(v1.value1) | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokSymbolArrow && v1.value0 instanceof PureScript_CST_Types.Unicode) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokSymbolArrow && v1.value0 instanceof PureScript_CST_Types.ASCII) {
              return {
                  line: v.line,
                  column: v.column + 4 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokHole) {
              return {
                  line: v.line,
                  column: (v.column + Data_String_CodePoints.length(v1.value0) | 0) + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokChar) {
              return {
                  line: v.line,
                  column: (v.column + Data_String_CodePoints.length(v1.value0) | 0) + 2 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokInt) {
              return {
                  line: v.line,
                  column: v.column + Data_String_CodePoints.length(v1.value0) | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokNumber) {
              return {
                  line: v.line,
                  column: v.column + Data_String_CodePoints.length(v1.value0) | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokString) {
              return bumpText(v)(1)(v1.value0);
          };
          if (v1 instanceof PureScript_CST_Types.TokRawString) {
              return bumpText(v)(3)(v1.value0);
          };
          if (v1 instanceof PureScript_CST_Types.TokLayoutStart) {
              return v;
          };
          if (v1 instanceof PureScript_CST_Types.TokLayoutSep) {
              return v;
          };
          if (v1 instanceof PureScript_CST_Types.TokLayoutEnd) {
              return v;
          };
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 225, column 34 - line 303, column 8): " + [ v1.constructor.name ]);
      };
  };
  var bumpComment = function (v) {
      return function (v1) {
          if (v1 instanceof PureScript_CST_Types.Comment) {
              return bumpText(v)(0)(v1.value0);
          };
          if (v1 instanceof PureScript_CST_Types.Space) {
              return {
                  line: v.line,
                  column: v.column + v1.value0 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.Line) {
              return {
                  line: v.line + v1.value1 | 0,
                  column: 0
              };
          };
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 320, column 36 - line 326, column 34): " + [ v1.constructor.name ]);
      };
  };
  var applyLex = {
      apply: function (v) {
          return function (v1) {
              return function (str) {
                  var v2 = v(str);
                  if (v2 instanceof LexFail) {
                      return new LexFail(v2.value0, v2.value1);
                  };
                  if (v2 instanceof LexSucc) {
                      var v3 = v1(v2.value1);
                      if (v3 instanceof LexFail) {
                          return new LexFail(v3.value0, v3.value1);
                      };
                      if (v3 instanceof LexSucc) {
                          return new LexSucc(v2.value0(v3.value0), v3.value1);
                      };
                      throw new Error("Failed pattern match at PureScript.CST.Lexer (line 54, column 9 - line 57, column 32): " + [ v3.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Lexer (line 51, column 5 - line 57, column 32): " + [ v2.constructor.name ]);
              };
          };
      },
      Functor0: function () {
          return functorLex;
      }
  };
  var bindLex = {
      bind: function (v) {
          return function (k) {
              return function (str) {
                  var v1 = v(str);
                  if (v1 instanceof LexFail) {
                      return new LexFail(v1.value0, v1.value1);
                  };
                  if (v1 instanceof LexSucc) {
                      var v2 = k(v1.value0);
                      return v2(v1.value1);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Lexer (line 64, column 5 - line 68, column 16): " + [ v1.constructor.name ]);
              };
          };
      },
      Apply0: function () {
          return applyLex;
      }
  };
  var applicativeLex = {
      pure: function ($252) {
          return Lex(LexSucc.create($252));
      },
      Apply0: function () {
          return applyLex;
      }
  };
  var altLex = {
      alt: function (v) {
          return function (v1) {
              return function (str) {
                  var v2 = v(str);
                  if (v2 instanceof LexFail) {
                      if (Data_String_CodeUnits.length(str) === Data_String_CodeUnits.length(v2.value1)) {
                          return v1(str);
                      };
                      if (Data_Boolean.otherwise) {
                          return new LexFail(v2.value0, v2.value1);
                      };
                  };
                  if (v2 instanceof LexSucc) {
                      return new LexSucc(v2.value0, v2.value1);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Lexer (line 72, column 5 - line 79, column 20): " + [ v2.constructor.name ]);
              };
          };
      },
      Functor0: function () {
          return functorLex;
      }
  };
  var comment = Control_Alt.alt(altLex)(regex(PureScript_CST_Errors.LexExpected.create("block comment"))("\\{-(-(?!\\})|[^-]+)*(-\\}|$)"))(regex(PureScript_CST_Errors.LexExpected.create("line comment"))("--[^\\r\\n]*"));
  var lineComment = Control_Alt.alt(altLex)(Data_Functor.map(functorLex)((function () {
      var $253 = PureScript_CST_Types.Line.create(PureScript_CST_Types.LF.value);
      return function ($254) {
          return $253(Data_String_CodePoints.length($254));
      };
  })())(regex(PureScript_CST_Errors.LexExpected.create("newline"))("\x0a+")))(Data_Functor.map(functorLex)((function () {
      var $255 = PureScript_CST_Types.Line.create(PureScript_CST_Types.CRLF.value);
      return function ($256) {
          return $255((function (v) {
              return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v)(2);
          })(Data_String_CodePoints.length($256)));
      };
  })())(regex(PureScript_CST_Errors.LexExpected.create("newline"))("(?:\x0d\x0a)+")));
  var leadingComments = many(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Data_Functor.map(functorLex)(PureScript_CST_Types.Comment.create)(comment))(Data_Functor.map(functorLex)(PureScript_CST_Types.Space.create)(spaceComment)))(lineComment));
  var token = (function () {
      var tokenTick = char$prime(PureScript_CST_Errors.LexExpected.create("backtick"))(PureScript_CST_Types.TokTick.value)("`");
      var tokenRightSquare = char$prime(PureScript_CST_Errors.LexExpected.create("right square"))(PureScript_CST_Types.TokRightSquare.value)("]");
      var tokenRightParen = char$prime(PureScript_CST_Errors.LexExpected.create("right paren"))(PureScript_CST_Types.TokRightParen.value)(")");
      var tokenRightBrace = char$prime(PureScript_CST_Errors.LexExpected.create("right brace"))(PureScript_CST_Types.TokRightBrace.value)("}");
      var tokenLeftSquare = char$prime(PureScript_CST_Errors.LexExpected.create("left square"))(PureScript_CST_Types.TokLeftSquare.value)("[");
      var tokenLeftParen = char$prime(PureScript_CST_Errors.LexExpected.create("left paren"))(PureScript_CST_Types.TokLeftParen.value)("(");
      var tokenLeftBrace = char$prime(PureScript_CST_Errors.LexExpected.create("left brace"))(PureScript_CST_Types.TokLeftBrace.value)("{");
      var tokenComma = char$prime(PureScript_CST_Errors.LexExpected.create("comma"))(PureScript_CST_Types.TokComma.value)(",");
      var stripUnderscores = Data_String_Common.replaceAll("_")("");
      var stringSpaceEscapeRegex = regex(PureScript_CST_Errors.LexExpected.create("whitespace escape"))("\\\\[ \\r\\n]+\\\\");
      var stringCharsRegex = regex(PureScript_CST_Errors.LexExpected.create("string characters"))("[^\"\\\\]+");
      var rawStringCharsRegex = regex(PureScript_CST_Errors.LexExpected.create("raw string characters"))("\"\"\"\"{0,2}([^\"]+\"{1,2})*[^\"]*\"\"\"");
      var parseSymbolIdent = regex(PureScript_CST_Errors.LexExpected.create("symbol"))("(?:[:!#$%&*+./<=>?@\\\\^|~-]|(?!\\p{P})\\p{S})+");
      var parseSymbol = Data_Functor.map(functorLex)(function (v) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  if (v === "->") {
                      return new PureScript_CST_Types.TokSymbolArrow(PureScript_CST_Types.ASCII.value);
                  };
                  if (v === "\u2192") {
                      return new PureScript_CST_Types.TokSymbolArrow(PureScript_CST_Types.Unicode.value);
                  };
                  return new PureScript_CST_Types.TokSymbolName(Data_Maybe.Nothing.value, v);
              };
              return new PureScript_CST_Types.TokSymbolName(v1, v);
          };
      })($$try(Control_Apply.applyFirst(applyLex)(Control_Apply.applySecond(applyLex)(tokenLeftParen)(parseSymbolIdent))(tokenRightParen)));
      var parseStringSpaceEscape = Data_Functor.map(functorLex)(function (v) {
          return {
              raw: v,
              string: ""
          };
      })(stringSpaceEscapeRegex);
      var parseStringChars = Data_Functor.map(functorLex)(function (v) {
          return {
              raw: v,
              string: v
          };
      })(stringCharsRegex);
      var parseRawString = Data_Functor.map(functorLex)(function (v) {
          return PureScript_CST_Types.TokRawString.create(Data_String_CodeUnits.dropRight(3)(Data_String_CodeUnits.drop(3)(v)));
      })(rawStringCharsRegex);
      var parseProper = regex(PureScript_CST_Errors.LexExpected.create("proper name"))("\\p{Lu}[\\p{L}0-9_']*");
      var parseUpper = Data_Functor.map(functorLex)(Data_Function.flip(PureScript_CST_Types.TokUpperName.create))(parseProper);
      var parseOperator = Data_Functor.map(functorLex)(function (v) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  if (v === "<-") {
                      return new PureScript_CST_Types.TokLeftArrow(PureScript_CST_Types.ASCII.value);
                  };
                  if (v === "\u2190") {
                      return new PureScript_CST_Types.TokLeftArrow(PureScript_CST_Types.Unicode.value);
                  };
                  if (v === "->") {
                      return new PureScript_CST_Types.TokRightArrow(PureScript_CST_Types.ASCII.value);
                  };
                  if (v === "\u2192") {
                      return new PureScript_CST_Types.TokRightArrow(PureScript_CST_Types.Unicode.value);
                  };
                  if (v === "=>") {
                      return new PureScript_CST_Types.TokRightFatArrow(PureScript_CST_Types.ASCII.value);
                  };
                  if (v === "\u21d2") {
                      return new PureScript_CST_Types.TokRightFatArrow(PureScript_CST_Types.Unicode.value);
                  };
                  if (v === "::") {
                      return new PureScript_CST_Types.TokDoubleColon(PureScript_CST_Types.ASCII.value);
                  };
                  if (v === "\u2237") {
                      return new PureScript_CST_Types.TokDoubleColon(PureScript_CST_Types.Unicode.value);
                  };
                  if (v === "\u2200") {
                      return new PureScript_CST_Types.TokForall(PureScript_CST_Types.Unicode.value);
                  };
                  if (v === "=") {
                      return PureScript_CST_Types.TokEquals.value;
                  };
                  if (v === ".") {
                      return PureScript_CST_Types.TokDot.value;
                  };
                  if (v === "\\") {
                      return PureScript_CST_Types.TokBackslash.value;
                  };
                  if (v === "|") {
                      return PureScript_CST_Types.TokPipe.value;
                  };
                  if (v === "@") {
                      return PureScript_CST_Types.TokAt.value;
                  };
                  if (v === "`") {
                      return PureScript_CST_Types.TokTick.value;
                  };
                  return new PureScript_CST_Types.TokOperator(Data_Maybe.Nothing.value, v);
              };
              return new PureScript_CST_Types.TokOperator(v1, v);
          };
      })(parseSymbolIdent);
      var parseIdent = regex(PureScript_CST_Errors.LexExpected.create("ident"))("[\\p{Ll}_][\\p{L}0-9_']*");
      var parseLower = Data_Functor.map(functorLex)(function (v) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  if (v === "forall") {
                      return new PureScript_CST_Types.TokForall(PureScript_CST_Types.ASCII.value);
                  };
                  if (v === "_") {
                      return PureScript_CST_Types.TokUnderscore.value;
                  };
                  return new PureScript_CST_Types.TokLowerName(Data_Maybe.Nothing.value, v);
              };
              return new PureScript_CST_Types.TokLowerName(v1, v);
          };
      })(parseIdent);
      var parseName = Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(parseLower)(parseUpper))(parseOperator))(parseSymbol);
      var parseExponentSign = Control_Alt.alt(altLex)(string(PureScript_CST_Errors.LexExpected.create("negative"))("-"))(string(PureScript_CST_Errors.LexExpected.create("positive"))("+"));
      var intPartRegex = regex(PureScript_CST_Errors.LexExpected.create("int part"))("(0|[1-9][0-9_]*)");
      var parseExponentPart = Control_Apply.apply(applyLex)(Data_Functor.map(functorLex)(function (v) {
          return function (v1) {
              return {
                  sign: v,
                  exponent: v1
              };
          };
      })(optional(parseExponentSign)))(intPartRegex);
      var hexIntRegex = regex(PureScript_CST_Errors.LexExpected.create("hex int"))("[a-fA-F0-9]+");
      var hexIntPrefix = string(PureScript_CST_Errors.LexExpected.create("hex int prefix"))("0x");
      var parseHexInt = Control_Bind.bind(bindLex)(Control_Apply.applySecond(applyLex)(hexIntPrefix)(hexIntRegex))(function (raw) {
          var v = Data_Int.fromStringAs(Data_Int.hexadecimal)(raw);
          if (v instanceof Data_Maybe.Just) {
              return Control_Applicative.pure(applicativeLex)(new PureScript_CST_Types.TokInt("0x" + raw, new PureScript_CST_Types.SmallInt(v.value0)));
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(applicativeLex)(new PureScript_CST_Types.TokInt("0x" + raw, new PureScript_CST_Types.BigHex(raw)));
          };
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 561, column 5 - line 565, column 49): " + [ v.constructor.name ]);
      });
      var hexEscapeRegex = regex(PureScript_CST_Errors.LexExpected.create("hex"))("[a-fA-F0-9]{1,6}");
      var parseHexEscape = Control_Bind.bind(bindLex)(hexEscapeRegex)(function (esc) {
          var v = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Char.fromCharCode)(Data_Int.fromStringAs(Data_Int.hexadecimal)(esc));
          if (v instanceof Data_Maybe.Just) {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\x" + esc,
                  "char": v.value0
              });
          };
          if (v instanceof Data_Maybe.Nothing) {
              return fail(new PureScript_CST_Errors.LexCharEscapeOutOfRange(esc));
          };
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 509, column 5 - line 513, column 43): " + [ v.constructor.name ]);
      });
      var fractionPartRegex = regex(PureScript_CST_Errors.LexExpected.create("fraction part"))("[0-9_]+");
      var charSingleQuote = $$char(PureScript_CST_Errors.LexExpected.create("single quote"))("'");
      var charQuote = $$char(PureScript_CST_Errors.LexExpected.create("quote"))("\"");
      var charQuestionMark = $$char(PureScript_CST_Errors.LexExpected.create("question mark"))("?");
      var parseHole = Data_Functor.map(functorLex)(function (v) {
          return new PureScript_CST_Types.TokHole(v);
      })($$try(Control_Apply.applySecond(applyLex)(charQuestionMark)(Control_Alt.alt(altLex)(parseIdent)(parseProper))));
      var charExponent = $$char(PureScript_CST_Errors.LexExpected.create("exponent"))("e");
      var charDot = $$char(PureScript_CST_Errors.LexExpected.create("dot"))(".");
      var parseModuleName = Control_Apply.apply(applyLex)(Data_Functor.map(functorLex)(function (v) {
          return function (v1) {
              return v1(toModuleName(v));
          };
      })(many($$try(Control_Apply.applyFirst(applyLex)(parseProper)(charDot)))))(parseName);
      var parseNumber = Control_Bind.bind(bindLex)(intPartRegex)(function (intPart) {
          return Control_Bind.bind(bindLex)(optional($$try(Control_Apply.applySecond(applyLex)(charDot)(fractionPartRegex))))(function (fractionPart) {
              return Control_Bind.bind(bindLex)(optional(Control_Apply.applySecond(applyLex)(charExponent)(parseExponentPart)))(function (exponentPart) {
                  var $211 = Data_Maybe.isNothing(fractionPart) && Data_Maybe.isNothing(exponentPart);
                  if ($211) {
                      var intVal = stripUnderscores(intPart);
                      var v = Data_Int.fromString(intVal);
                      if (v instanceof Data_Maybe.Just) {
                          return Control_Applicative.pure(applicativeLex)(new PureScript_CST_Types.TokInt(intPart, new PureScript_CST_Types.SmallInt(v.value0)));
                      };
                      if (v instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(applicativeLex)(new PureScript_CST_Types.TokInt(intPart, new PureScript_CST_Types.BigInt(intVal)));
                      };
                      throw new Error("Failed pattern match at PureScript.CST.Lexer (line 573, column 7 - line 577, column 48): " + [ v.constructor.name ]);
                  };
                  var raw = intPart + (Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (fr) {
                      return "." + fr;
                  })(fractionPart) + Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (ex) {
                      return "e" + (Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(ex.sign) + ex.exponent);
                  })(exponentPart));
                  var v = Data_Number.fromString(stripUnderscores(raw));
                  if (v instanceof Data_Maybe.Just) {
                      return Control_Applicative.pure(applicativeLex)(new PureScript_CST_Types.TokNumber(raw, v.value0));
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return fail(new PureScript_CST_Errors.LexNumberOutOfRange(raw));
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Lexer (line 584, column 7 - line 588, column 41): " + [ v.constructor.name ]);
              });
          });
      });
      var parseNumericLiteral = Control_Alt.alt(altLex)(parseHexInt)(parseNumber);
      var charBackslash = $$char(PureScript_CST_Errors.LexExpected.create("backslash"))("\\");
      var charAny = satisfy(PureScript_CST_Errors.LexExpected.create("char"))(Data_Function["const"](true));
      var parseEscape = Control_Bind.bind(bindLex)(charAny)(function (ch) {
          if (ch === "t") {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\t",
                  "char": "\x09"
              });
          };
          if (ch === "r") {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\r",
                  "char": "\x0d"
              });
          };
          if (ch === "n") {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\n",
                  "char": "\x0a"
              });
          };
          if (ch === "\"") {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\\"",
                  "char": "\""
              });
          };
          if (ch === "'") {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\'",
                  "char": "'"
              });
          };
          if (ch === "\\") {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\\\",
                  "char": "\\"
              });
          };
          if (ch === "x") {
              return parseHexEscape;
          };
          return fail(PureScript_CST_Errors.LexInvalidCharEscape.create(Data_String_CodeUnits.singleton(ch)));
      });
      var parseChar = Control_Bind.bind(bindLex)(charAny)(function (ch) {
          if (ch === "\\") {
              return parseEscape;
          };
          if (ch === "'") {
              return fail(new PureScript_CST_Errors.LexExpected("character", "empty character literal"));
          };
          return Control_Applicative.pure(applicativeLex)({
              raw: Data_String_CodeUnits.singleton(ch),
              "char": ch
          });
      });
      var parseCharLiteral = Data_Functor.map(functorLex)(function (v) {
          return new PureScript_CST_Types.TokChar(v.raw, v["char"]);
      })(Control_Apply.applyFirst(applyLex)(Control_Apply.applySecond(applyLex)(charSingleQuote)(parseChar))(charSingleQuote));
      var parseStringEscape = Data_Functor.map(functorLex)(function (v) {
          return {
              raw: v.raw,
              string: Data_String_CodeUnits.singleton(v["char"])
          };
      })(Control_Apply.applySecond(applyLex)(charBackslash)(parseEscape));
      var parseStringPart = Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(parseStringChars)(parseStringSpaceEscape))(parseStringEscape);
      var parseString = Data_Functor.map(functorLex)(function (v) {
          var v1 = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordCons({
              reflectSymbol: function () {
                  return "raw";
              }
          })(Data_Monoid.monoidString)()(Data_Monoid.monoidRecordCons({
              reflectSymbol: function () {
                  return "string";
              }
          })(Data_Monoid.monoidString)()(Data_Monoid.monoidRecordNil))))(v);
          return new PureScript_CST_Types.TokString(v1.raw, v1.string);
      })(Control_Apply.applyFirst(applyLex)(Control_Apply.applySecond(applyLex)(charQuote)(many(parseStringPart)))(charQuote));
      var parseStringLiteral = Control_Alt.alt(altLex)(parseRawString)(parseString);
      return Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(parseHole)(parseModuleName))(parseCharLiteral))(parseStringLiteral))(parseNumericLiteral))(tokenLeftParen))(tokenRightParen))(tokenLeftBrace))(tokenRightBrace))(tokenLeftSquare))(tokenRightSquare))(tokenTick))(tokenComma);
  })();
  var trailingComments = many(Control_Alt.alt(altLex)(Data_Functor.map(functorLex)(PureScript_CST_Types.Comment.create)(comment))(Data_Functor.map(functorLex)(PureScript_CST_Types.Space.create)(spaceComment)));
  var lexWithState = (function () {
      var token$prime = Control_Apply.apply(applyLex)(Control_Apply.apply(applyLex)(Data_Functor.map(functorLex)(function (v) {
          return function (v1) {
              return function (v2) {
                  return {
                      token: v,
                      trailing: v1,
                      nextLeading: v2
                  };
              };
          };
      })(token))(trailingComments))(leadingComments);
      var go = function (stack) {
          return function (startPos) {
              return function (leading) {
                  return function (str) {
                      return PureScript_CST_TokenStream.TokenStream(Data_Lazy.defer(function (v) {
                          var $232 = str === "";
                          if ($232) {
                              return PureScript_CST_TokenStream.step(PureScript_CST_TokenStream.unwindLayout(startPos)(PureScript_CST_TokenStream.TokenStream(Data_Lazy.defer(function (v1) {
                                  return new PureScript_CST_TokenStream.TokenEOF(startPos, leading);
                              })))(stack));
                          };
                          var v1 = token$prime(str);
                          if (v1 instanceof LexFail) {
                              var errPos = bumpText(startPos)(0)(Data_String_CodeUnits.take(Data_String_CodeUnits.length(str) - Data_String_CodeUnits.length(v1.value1) | 0)(str));
                              return new PureScript_CST_TokenStream.TokenError(errPos, v1.value0(Data_Unit.unit), Data_Maybe.Nothing.value, stack);
                          };
                          if (v1 instanceof LexSucc) {
                              var endPos = bumpToken(startPos)(v1.value0.token);
                              var nextStart = Data_Foldable.foldl(Data_Foldable.foldableArray)(bumpComment)(Data_Foldable.foldl(Data_Foldable.foldableArray)(bumpComment)(endPos)(v1.value0.trailing))(v1.value0.nextLeading);
                              var posToken = {
                                  range: {
                                      start: startPos,
                                      end: endPos
                                  },
                                  leadingComments: leading,
                                  trailingComments: v1.value0.trailing,
                                  value: v1.value0.token
                              };
                              var v2 = PureScript_CST_Layout.insertLayout(posToken)(nextStart)(stack);
                              return PureScript_CST_TokenStream.step(Data_Tuple.snd(PureScript_CST_TokenStream.consTokens(Data_Foldable.foldableArray)(v2.value1)(Data_Tuple.Tuple.create(nextStart)(go(v2.value0)(nextStart)(v1.value0.nextLeading)(v1.value1)))));
                          };
                          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 188, column 7 - line 207, column 63): " + [ v1.constructor.name ]);
                      }));
                  };
              };
          };
      };
      var init = function (initStack) {
          return function (initPos) {
              return function (str) {
                  return PureScript_CST_TokenStream.TokenStream(Data_Lazy.defer(function (v) {
                      var v1 = leadingComments(str);
                      if (v1 instanceof LexFail) {
                          return Partial_Unsafe.unsafeCrashWith("Leading comments can't fail.");
                      };
                      if (v1 instanceof LexSucc) {
                          var nextPos = Data_Foldable.foldl(Data_Foldable.foldableArray)(bumpComment)(initPos)(v1.value0);
                          return PureScript_CST_TokenStream.step(go(initStack)(nextPos)(v1.value0)(v1.value1));
                      };
                      throw new Error("Failed pattern match at PureScript.CST.Lexer (line 175, column 5 - line 180, column 51): " + [ v1.constructor.name ]);
                  }));
              };
          };
      };
      return init;
  })();
  var lex = lexWithState(new Data_List_Types.Cons(new Data_Tuple.Tuple({
      line: 0,
      column: 0
  }, PureScript_CST_Layout.LytRoot.value), Data_List_Types.Nil.value))({
      line: 0,
      column: 0
  });
  exports["lex"] = lex;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Set"] = $PS["Data.Set"] || {};
  var exports = $PS["Data.Set"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Unit = $PS["Data.Unit"];
  var member = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.member(dictOrd)(a)(v);
          };
      };
  };
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.insert(dictOrd)(a)(Data_Unit.unit)(v);
          };
      };
  };
  var empty = Data_Map_Internal.empty;
  var fromFoldable = function (dictFoldable) {
      return function (dictOrd) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (a) {
                  return insert(dictOrd)(a)(m);
              };
          })(empty);
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["member"] = member;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.ST.Global"] = $PS["Control.Monad.ST.Global"] || {};
  var exports = $PS["Control.Monad.ST.Global"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var toEffect = Unsafe_Coerce.unsafeCoerce;
  exports["toEffect"] = toEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.ST.Class"] = $PS["Control.Monad.ST.Class"] || {};
  var exports = $PS["Control.Monad.ST.Class"];
  var Control_Monad_ST_Global = $PS["Control.Monad.ST.Global"];
  var monadSTEffect = {
      liftST: Control_Monad_ST_Global.toEffect
  };
  var liftST = function (dict) {
      return dict.liftST;
  };
  exports["liftST"] = liftST;
  exports["monadSTEffect"] = monadSTEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["PureScript.CST.Parser.Monad"] = $PS["PureScript.CST.Parser.Monad"] || {};
  var exports = $PS["PureScript.CST.Parser.Monad"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_ST_Class = $PS["Control.Monad.ST.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var PureScript_CST_Errors = $PS["PureScript.CST.Errors"];
  var PureScript_CST_TokenStream = $PS["PureScript.CST.TokenStream"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var Recovery = (function () {
      function Recovery(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Recovery.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Recovery(value0, value1, value2);
              };
          };
      };
      return Recovery;
  })();
  var Leaf = (function () {
      function Leaf(value0) {
          this.value0 = value0;
      };
      Leaf.create = function (value0) {
          return new Leaf(value0);
      };
      return Leaf;
  })();
  var Node = (function () {
      function Node(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Node.create = function (value0) {
          return function (value1) {
              return new Node(value0, value1);
          };
      };
      return Node;
  })();
  var UnconsDone = (function () {
      function UnconsDone(value0) {
          this.value0 = value0;
      };
      UnconsDone.create = function (value0) {
          return new UnconsDone(value0);
      };
      return UnconsDone;
  })();
  var UnconsMore = (function () {
      function UnconsMore(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      UnconsMore.create = function (value0) {
          return function (value1) {
              return new UnconsMore(value0, value1);
          };
      };
      return UnconsMore;
  })();
  var ParseFail = (function () {
      function ParseFail(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      ParseFail.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new ParseFail(value0, value1, value2, value3);
                  };
              };
          };
      };
      return ParseFail;
  })();
  var ParseSucc = (function () {
      function ParseSucc(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ParseSucc.create = function (value0) {
          return function (value1) {
              return new ParseSucc(value0, value1);
          };
      };
      return ParseSucc;
  })();
  var Take = (function () {
      function Take(value0) {
          this.value0 = value0;
      };
      Take.create = function (value0) {
          return new Take(value0);
      };
      return Take;
  })();
  var Eof = (function () {
      function Eof(value0) {
          this.value0 = value0;
      };
      Eof.create = function (value0) {
          return new Eof(value0);
      };
      return Eof;
  })();
  var Fail = (function () {
      function Fail(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Fail.create = function (value0) {
          return function (value1) {
              return new Fail(value0, value1);
          };
      };
      return Fail;
  })();
  var Alt = (function () {
      function Alt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Alt.create = function (value0) {
          return function (value1) {
              return new Alt(value0, value1);
          };
      };
      return Alt;
  })();
  var Try = (function () {
      function Try(value0) {
          this.value0 = value0;
      };
      Try.create = function (value0) {
          return new Try(value0);
      };
      return Try;
  })();
  var LookAhead = (function () {
      function LookAhead(value0) {
          this.value0 = value0;
      };
      LookAhead.create = function (value0) {
          return new LookAhead(value0);
      };
      return LookAhead;
  })();
  var Defer = (function () {
      function Defer(value0) {
          this.value0 = value0;
      };
      Defer.create = function (value0) {
          return new Defer(value0);
      };
      return Defer;
  })();
  var Recover = (function () {
      function Recover(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Recover.create = function (value0) {
          return function (value1) {
              return new Recover(value0, value1);
          };
      };
      return Recover;
  })();
  var Iter = (function () {
      function Iter(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Iter.create = function (value0) {
          return function (value1) {
              return new Iter(value0, value1);
          };
      };
      return Iter;
  })();
  var Pure = (function () {
      function Pure(value0) {
          this.value0 = value0;
      };
      Pure.create = function (value0) {
          return new Pure(value0);
      };
      return Pure;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var StkNil = (function () {
      function StkNil() {

      };
      StkNil.value = new StkNil();
      return StkNil;
  })();
  var StkAlt = (function () {
      function StkAlt(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      StkAlt.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new StkAlt(value0, value1, value2);
              };
          };
      };
      return StkAlt;
  })();
  var StkTry = (function () {
      function StkTry(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      StkTry.create = function (value0) {
          return function (value1) {
              return new StkTry(value0, value1);
          };
      };
      return StkTry;
  })();
  var StkLookAhead = (function () {
      function StkLookAhead(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      StkLookAhead.create = function (value0) {
          return function (value1) {
              return new StkLookAhead(value0, value1);
          };
      };
      return StkLookAhead;
  })();
  var StkBinds = (function () {
      function StkBinds(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      StkBinds.create = function (value0) {
          return function (value1) {
              return new StkBinds(value0, value1);
          };
      };
      return StkBinds;
  })();
  var StkRecover = (function () {
      function StkRecover(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      StkRecover.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new StkRecover(value0, value1, value2);
              };
          };
      };
      return StkRecover;
  })();
  var SuccStop = (function () {
      function SuccStop(value0) {
          this.value0 = value0;
      };
      SuccStop.create = function (value0) {
          return new SuccStop(value0);
      };
      return SuccStop;
  })();
  var SuccBinds = (function () {
      function SuccBinds(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SuccBinds.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SuccBinds(value0, value1, value2);
              };
          };
      };
      return SuccBinds;
  })();
  var FailStop = (function () {
      function FailStop(value0) {
          this.value0 = value0;
      };
      FailStop.create = function (value0) {
          return new FailStop(value0);
      };
      return FailStop;
  })();
  var FailAlt = (function () {
      function FailAlt(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FailAlt.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FailAlt(value0, value1, value2);
              };
          };
      };
      return FailAlt;
  })();
  var FailRecover = (function () {
      function FailRecover(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FailRecover.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FailRecover(value0, value1, value2);
              };
          };
      };
      return FailRecover;
  })();
  var uncons$prime = function ($copy_cons) {
      return function ($copy_l) {
          return function ($copy_r) {
              var $tco_var_cons = $copy_cons;
              var $tco_var_l = $copy_l;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(cons, l, r) {
                  if (l instanceof Leaf) {
                      $tco_done = true;
                      return cons(l.value0)(r);
                  };
                  if (l instanceof Node) {
                      $tco_var_cons = cons;
                      $tco_var_l = l.value0;
                      $copy_r = new Node(l.value1, r);
                      return;
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 74, column 20 - line 76, column 74): " + [ l.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_cons, $tco_var_l, $copy_r);
              };
              return $tco_result;
          };
      };
  };
  var uncons = function (done) {
      return function (more) {
          return function (v) {
              if (v instanceof Leaf) {
                  return done(v.value0);
              };
              if (v instanceof Node) {
                  return uncons$prime(more)(v.value0)(v.value1);
              };
              throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 64, column 20 - line 66, column 31): " + [ v.constructor.name ]);
          };
      };
  };
  var unconsView = uncons(UnconsDone.create)(UnconsMore.create);
  var unFold = Unsafe_Coerce.unsafeCoerce;
  var $$try = Try.create;
  var take = Take.create;
  var runParser$prime = (function () {
      var unwindSucc = function ($copy_a) {
          return function ($copy_state) {
              return function ($copy_v) {
                  var $tco_var_a = $copy_a;
                  var $tco_var_state = $copy_state;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(a, state, v) {
                      if (v instanceof StkNil) {
                          $tco_done = true;
                          return new SuccStop(new ParseSucc(a, state));
                      };
                      if (v instanceof StkAlt) {
                          $tco_var_a = a;
                          $tco_var_state = state;
                          $copy_v = v.value0;
                          return;
                      };
                      if (v instanceof StkTry) {
                          $tco_var_a = a;
                          $tco_var_state = state;
                          $copy_v = v.value0;
                          return;
                      };
                      if (v instanceof StkRecover) {
                          $tco_var_a = a;
                          $tco_var_state = {
                              consumed: state.consumed || v.value1.consumed,
                              errors: state.errors,
                              position: state.position,
                              stream: state.stream
                          };
                          $copy_v = v.value0;
                          return;
                      };
                      if (v instanceof StkLookAhead) {
                          $tco_var_a = a;
                          $tco_var_state = v.value1;
                          $copy_v = v.value0;
                          return;
                      };
                      if (v instanceof StkBinds) {
                          $tco_done = true;
                          return new SuccBinds(v.value0, state, v.value1);
                      };
                      throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 338, column 24 - line 350, column 38): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_a, $tco_var_state, $copy_v);
                  };
                  return $tco_result;
              };
          };
      };
      var unwindFail = function ($copy_error) {
          return function ($copy_position) {
              return function ($copy_v) {
                  return function ($copy_v1) {
                      var $tco_var_error = $copy_error;
                      var $tco_var_position = $copy_position;
                      var $tco_var_v = $copy_v;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(error, position, v, v1) {
                          if (v1 instanceof StkNil) {
                              $tco_done1 = true;
                              return new FailStop(new ParseFail(error, position, v, new Data_Maybe.Just(v.stream)));
                          };
                          if (v1 instanceof StkAlt) {
                              if (v.consumed) {
                                  $tco_var_error = error;
                                  $tco_var_position = position;
                                  $tco_var_v = v;
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_done1 = true;
                              return new FailAlt(v1.value0, v1.value1, v1.value2);
                          };
                          if (v1 instanceof StkTry) {
                              $tco_var_error = error;
                              $tco_var_position = position;
                              $tco_var_v = {
                                  consumed: v1.value1.consumed,
                                  errors: v.errors,
                                  position: v.position,
                                  stream: v.stream
                              };
                              $copy_v1 = v1.value0;
                              return;
                          };
                          if (v1 instanceof StkRecover) {
                              if (v.consumed) {
                                  var posError = {
                                      error: error,
                                      position: position
                                  };
                                  var nextErrors = Data_Array.snoc(v.errors)(posError);
                                  var v2 = v1.value2(posError)(v1.value1.stream);
                                  $tco_done1 = true;
                                  return new FailRecover(v1.value0, {
                                      consumed: true,
                                      errors: nextErrors,
                                      position: v2.value1,
                                      stream: v2.value2
                                  }, v2.value0);
                              };
                              $tco_var_error = error;
                              $tco_var_position = position;
                              $tco_var_v = {
                                  consumed: v.consumed || v1.value1.consumed,
                                  errors: v.errors,
                                  position: v.position,
                                  stream: v.stream
                              };
                              $copy_v1 = v1.value0;
                              return;
                          };
                          if (v1 instanceof StkLookAhead) {
                              $tco_var_error = error;
                              $tco_var_position = position;
                              $tco_var_v = v1.value1;
                              $copy_v1 = v1.value0;
                              return;
                          };
                          if (v1 instanceof StkBinds) {
                              $tco_var_error = error;
                              $tco_var_position = position;
                              $tco_var_v = v;
                              $copy_v1 = v1.value0;
                              return;
                          };
                          throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 308, column 48 - line 335, column 48): " + [ v1.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_error, $tco_var_position, $tco_var_v, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
          };
      };
      var go = function ($copy_stack) {
          return function ($copy_v) {
              return function ($copy_v1) {
                  var $tco_var_stack = $copy_stack;
                  var $tco_var_v = $copy_v;
                  var $tco_done2 = false;
                  var $tco_result;
                  function $tco_loop(stack, v, v1) {
                      if (v1 instanceof Alt) {
                          $tco_var_stack = new StkAlt(stack, v, v1.value1);
                          $tco_var_v = {
                              consumed: false,
                              errors: v.errors,
                              position: v.position,
                              stream: v.stream
                          };
                          $copy_v1 = v1.value0;
                          return;
                      };
                      if (v1 instanceof Try) {
                          $tco_var_stack = new StkTry(stack, v);
                          $tco_var_v = v;
                          $copy_v1 = v1.value0;
                          return;
                      };
                      if (v1 instanceof LookAhead) {
                          $tco_var_stack = new StkLookAhead(stack, v);
                          $tco_var_v = v;
                          $copy_v1 = v1.value0;
                          return;
                      };
                      if (v1 instanceof Bind) {
                          $tco_var_stack = new StkBinds(stack, v1.value1);
                          $tco_var_v = v;
                          $copy_v1 = v1.value0;
                          return;
                      };
                      if (v1 instanceof Pure) {
                          var v2 = unwindSucc(v1.value0)(v)(stack);
                          if (v2 instanceof SuccBinds) {
                              var v3 = unconsView(v2.value2);
                              if (v3 instanceof UnconsDone) {
                                  $tco_var_stack = v2.value0;
                                  $tco_var_v = v2.value1;
                                  $copy_v1 = v3.value0(v1.value0);
                                  return;
                              };
                              if (v3 instanceof UnconsMore) {
                                  $tco_var_stack = new StkBinds(v2.value0, v3.value1);
                                  $tco_var_v = v2.value1;
                                  $copy_v1 = v3.value0(v1.value0);
                                  return;
                              };
                              throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 253, column 11 - line 257, column 64): " + [ v3.constructor.name ]);
                          };
                          if (v2 instanceof SuccStop) {
                              $tco_done2 = true;
                              return v2.value0;
                          };
                          throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 251, column 7 - line 259, column 14): " + [ v2.constructor.name ]);
                      };
                      if (v1 instanceof Fail) {
                          var v2 = unwindFail(v1.value1)(v1.value0)(v)(stack);
                          if (v2 instanceof FailAlt) {
                              $tco_var_stack = v2.value0;
                              $tco_var_v = v2.value1;
                              $copy_v1 = v2.value2;
                              return;
                          };
                          if (v2 instanceof FailRecover) {
                              $tco_var_stack = v2.value0;
                              $tco_var_v = v2.value1;
                              $copy_v1 = new Pure(v2.value2);
                              return;
                          };
                          if (v2 instanceof FailStop) {
                              $tco_done2 = true;
                              return v2.value0;
                          };
                          throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 261, column 7 - line 267, column 14): " + [ v2.constructor.name ]);
                      };
                      if (v1 instanceof Take) {
                          var v2 = PureScript_CST_TokenStream.step(v.stream);
                          if (v2 instanceof PureScript_CST_TokenStream.TokenError) {
                              $tco_done2 = true;
                              return new ParseFail(v2.value1, v2.value0, v, v2.value2);
                          };
                          if (v2 instanceof PureScript_CST_TokenStream.TokenEOF) {
                              $tco_var_stack = stack;
                              $tco_var_v = v;
                              $copy_v1 = new Fail(v2.value0, PureScript_CST_Errors.UnexpectedEof.value);
                              return;
                          };
                          if (v2 instanceof PureScript_CST_TokenStream.TokenCons) {
                              var v3 = v1.value0(v2.value0);
                              if (v3 instanceof Data_Either.Left) {
                                  $tco_var_stack = stack;
                                  $tco_var_v = v;
                                  $copy_v1 = new Fail(v2.value0.range.start, v3.value0);
                                  return;
                              };
                              if (v3 instanceof Data_Either.Right) {
                                  $tco_var_stack = stack;
                                  $tco_var_v = {
                                      consumed: true,
                                      errors: v.errors,
                                      position: v2.value1,
                                      stream: v2.value2
                                  };
                                  $copy_v1 = new Pure(v3.value0);
                                  return;
                              };
                              throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 275, column 11 - line 279, column 98): " + [ v3.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 269, column 7 - line 279, column 98): " + [ v2.constructor.name ]);
                      };
                      if (v1 instanceof Eof) {
                          var v2 = PureScript_CST_TokenStream.step(v.stream);
                          if (v2 instanceof PureScript_CST_TokenStream.TokenError) {
                              $tco_done2 = true;
                              return new ParseFail(v2.value1, v2.value0, v, v2.value2);
                          };
                          if (v2 instanceof PureScript_CST_TokenStream.TokenEOF) {
                              $tco_var_stack = stack;
                              $tco_var_v = {
                                  consumed: true,
                                  errors: v.errors,
                                  position: v2.value0,
                                  stream: v.stream
                              };
                              $copy_v1 = new Pure(v1.value0(new Data_Tuple.Tuple(v2.value0, v2.value1)));
                              return;
                          };
                          if (v2 instanceof PureScript_CST_TokenStream.TokenCons) {
                              $tco_var_stack = stack;
                              $tco_var_v = v;
                              $copy_v1 = new Fail(v2.value0.range.start, new PureScript_CST_Errors.ExpectedEof(v2.value0.value));
                              return;
                          };
                          throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 281, column 7 - line 287, column 72): " + [ v2.constructor.name ]);
                      };
                      if (v1 instanceof Iter) {
                          var v2 = unFold(function (v3) {
                              var iter1 = function ($copy_acc) {
                                  return function ($copy_state$prime) {
                                      var $tco_var_acc = $copy_acc;
                                      var $tco_done3 = false;
                                      var $tco_result;
                                      function $tco_loop(acc, state$prime) {
                                          var v4 = runParser$prime({
                                              consumed: false,
                                              errors: state$prime.errors,
                                              position: state$prime.position,
                                              stream: state$prime.stream
                                          })(v1.value1);
                                          if (v4 instanceof ParseSucc) {
                                              $tco_var_acc = v3.step(acc)(v4.value0);
                                              $copy_state$prime = v4.value1;
                                              return;
                                          };
                                          if (v4 instanceof ParseFail) {
                                              if (v4.value2.consumed) {
                                                  $tco_done3 = true;
                                                  return new Data_Tuple.Tuple(v4.value2, new Fail(v4.value1, v4.value0));
                                              };
                                              if (Data_Boolean.otherwise) {
                                                  $tco_done3 = true;
                                                  return new Data_Tuple.Tuple(state$prime, new Pure(v3.done(acc)));
                                              };
                                          };
                                          throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 292, column 31 - line 299, column 51): " + [ v4.constructor.name ]);
                                      };
                                      while (!$tco_done3) {
                                          $tco_result = $tco_loop($tco_var_acc, $copy_state$prime);
                                      };
                                      return $tco_result;
                                  };
                              };
                              return iter1(v3.init(Data_Unit.unit))(v);
                          })(v1.value0);
                          $tco_var_stack = stack;
                          $tco_var_v = v2.value0;
                          $copy_v1 = v2.value1;
                          return;
                      };
                      if (v1 instanceof Defer) {
                          $tco_var_stack = stack;
                          $tco_var_v = v;
                          $copy_v1 = Data_Lazy.force(v1.value0);
                          return;
                      };
                      if (v1 instanceof Recover) {
                          $tco_var_stack = new StkRecover(stack, v, v1.value0);
                          $tco_var_v = {
                              consumed: false,
                              errors: v.errors,
                              position: v.position,
                              stream: v.stream
                          };
                          $copy_v1 = v1.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 241, column 31 - line 305, column 67): " + [ v1.constructor.name ]);
                  };
                  while (!$tco_done2) {
                      $tco_result = $tco_loop($tco_var_stack, $tco_var_v, $copy_v1);
                  };
                  return $tco_result;
              };
          };
      };
      return function (state) {
          return function (parser) {
              return go(StkNil.value)(state)(parser);
          };
      };
  })();
  var recover = Recover.create;
  var qsingleton = Leaf.create;
  var qappend = Node.create;
  var mkFold = Unsafe_Coerce.unsafeCoerce;
  var lookAhead = LookAhead.create;
  var lazyParser = {
      defer: function ($169) {
          return Defer.create(Data_Lazy.defer($169));
      }
  };
  var iter = function (a) {
      return function (b) {
          return new Iter(a, b);
      };
  };
  var initialParserState = function (stream) {
      return {
          consumed: false,
          errors: [  ],
          position: {
              line: 0,
              column: 0
          },
          stream: stream
      };
  };
  var functorRecovery = {
      map: function (f) {
          return function (m) {
              return new Recovery(f(m.value0), m.value1, m.value2);
          };
      }
  };
  var functorParser = {
      map: function (f) {
          return function (v) {
              if (v instanceof Bind) {
                  return new Bind(v.value0, qappend(v.value1)(qsingleton(function ($170) {
                      return Pure.create(f($170));
                  })));
              };
              return new Bind(v, qsingleton(function ($171) {
                  return Pure.create(f($171));
              }));
          };
      }
  };
  var fromParserResult = function (v) {
      if (v instanceof ParseFail) {
          return new Data_Either.Left({
              position: v.value1,
              error: v.value0
          });
      };
      if (v instanceof ParseSucc) {
          return new Data_Either.Right(new Data_Tuple.Tuple(v.value0, v.value1.errors));
      };
      throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 190, column 20 - line 194, column 29): " + [ v.constructor.name ]);
  };
  var runParser = function (stream) {
      var $172 = runParser$prime(initialParserState(stream));
      return function ($173) {
          return fromParserResult($172($173));
      };
  };
  var foldArray = mkFold({
      init: function (v) {
          return Effect_Unsafe.unsafePerformEffect(Control_Monad_ST_Class.liftST(Control_Monad_ST_Class.monadSTEffect)(Data_Array_ST["new"]));
      },
      step: function (arr) {
          return function (a) {
              return Effect_Unsafe.unsafePerformEffect(Control_Monad_ST_Class.liftST(Control_Monad_ST_Class.monadSTEffect)(function __do() {
                  Data_Array_ST.push(a)(arr)();
                  return arr;
              }));
          };
      },
      done: (function () {
          var $174 = Control_Monad_ST_Class.liftST(Control_Monad_ST_Class.monadSTEffect);
          return function ($175) {
              return Effect_Unsafe.unsafePerformEffect($174(Data_Array_ST.unsafeFreeze($175)));
          };
      })()
  });
  var many = iter(foldArray);
  var eof = new Eof(Control_Category.identity(Control_Category.categoryFn));
  var bindParser = {
      bind: function (p) {
          return function (k) {
              if (p instanceof Bind) {
                  return new Bind(p.value0, qappend(p.value1)(qsingleton(k)));
              };
              return new Bind(p, qsingleton(k));
          };
      },
      Apply0: function () {
          return applyParser;
      }
  };
  var applyParser = {
      apply: function (p1) {
          return function (p2) {
              return Control_Bind.bind(bindParser)(p1)(function (f) {
                  return Control_Bind.bind(bindParser)(p2)(function (a) {
                      return Control_Applicative.pure(applicativeParser)(f(a));
                  });
              });
          };
      },
      Functor0: function () {
          return functorParser;
      }
  };
  var applicativeParser = {
      pure: Pure.create,
      Apply0: function () {
          return applyParser;
      }
  };
  var altParser = {
      alt: Alt.create,
      Functor0: function () {
          return functorParser;
      }
  };
  var optional = function (p) {
      return Control_Alt.alt(altParser)(Data_Functor.map(functorParser)(Data_Maybe.Just.create)(p))(Control_Applicative.pure(applicativeParser)(Data_Maybe.Nothing.value));
  };
  exports["Recovery"] = Recovery;
  exports["runParser"] = runParser;
  exports["take"] = take;
  exports["try"] = $$try;
  exports["lookAhead"] = lookAhead;
  exports["many"] = many;
  exports["optional"] = optional;
  exports["eof"] = eof;
  exports["recover"] = recover;
  exports["functorRecovery"] = functorRecovery;
  exports["functorParser"] = functorParser;
  exports["applyParser"] = applyParser;
  exports["applicativeParser"] = applicativeParser;
  exports["bindParser"] = bindParser;
  exports["altParser"] = altParser;
  exports["lazyParser"] = lazyParser;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["PureScript.CST.Parser"] = $PS["PureScript.CST.Parser"] || {};
  var exports = $PS["PureScript.CST.Parser"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Set = $PS["Data.Set"];
  var Data_Tuple = $PS["Data.Tuple"];
  var PureScript_CST_Errors = $PS["PureScript.CST.Errors"];
  var PureScript_CST_Layout = $PS["PureScript.CST.Layout"];
  var PureScript_CST_Parser_Monad = $PS["PureScript.CST.Parser.Monad"];
  var PureScript_CST_TokenStream = $PS["PureScript.CST.TokenStream"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];                
  var wrapped = function (openTok) {
      return function (closeTok) {
          return function (valueParser) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(openTok)(function (open) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(valueParser)(function (value) {
                      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(closeTok)(function (close) {
                          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                              open: open,
                              value: value,
                              close: close
                          });
                      });
                  });
              });
          };
      };
  };
  var separated = function (sepParser) {
      return function (valueParser) {
          return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
              return function (v1) {
                  return {
                      head: v,
                      tail: v1
                  };
              };
          })(valueParser))(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(sepParser))(valueParser)));
      };
  };
  var reservedKeywords = Data_Set.fromFoldable(Data_Foldable.foldableArray)(Data_Ord.ordString)([ "ado", "case", "class", "data", "derive", "do", "else", "false", "foreign", "if", "import", "in", "infix", "infixl", "infixr", "instance", "let", "module", "newtype", "of", "then", "true", "type", "where" ]);
  var recoverTokensWhile = function (p) {
      return function (initStream) {
          var indent = Data_Maybe.maybe(0)(function (v) {
              return v.column;
          })(PureScript_CST_Layout.currentIndent(PureScript_CST_TokenStream.layoutStack(initStream)));
          var go = function ($copy_acc) {
              return function ($copy_stream) {
                  var $tco_var_acc = $copy_acc;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(acc, stream) {
                      var v = PureScript_CST_TokenStream.step(stream);
                      if (v instanceof PureScript_CST_TokenStream.TokenError) {
                          $tco_done = true;
                          return new PureScript_CST_Parser_Monad.Recovery(acc, v.value0, stream);
                      };
                      if (v instanceof PureScript_CST_TokenStream.TokenEOF) {
                          $tco_done = true;
                          return new PureScript_CST_Parser_Monad.Recovery(acc, v.value0, stream);
                      };
                      if (v instanceof PureScript_CST_TokenStream.TokenCons) {
                          var $114 = p(v.value0)(indent);
                          if ($114) {
                              $tco_var_acc = Data_Array.snoc(acc)(v.value0);
                              $copy_stream = v.value2;
                              return;
                          };
                          $tco_done = true;
                          return new PureScript_CST_Parser_Monad.Recovery(acc, v.value0.range.start, stream);
                      };
                      throw new Error("Failed pattern match at PureScript.CST.Parser (line 1163, column 19 - line 1172, column 44): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_acc, $copy_stream);
                  };
                  return $tco_result;
              };
          };
          return go([  ])(initStream);
      };
  };
  var recoverIndent = function (mkNode) {
      return PureScript_CST_Parser_Monad.recover(function (v) {
          var $304 = Data_Functor.map(PureScript_CST_Parser_Monad.functorRecovery)(function (tokens) {
              return mkNode({
                  position: v.position,
                  error: v.error,
                  tokens: tokens
              });
          });
          var $305 = recoverTokensWhile(function (tok) {
              return function (indent) {
                  if (tok.value instanceof PureScript_CST_Types.TokLayoutEnd) {
                      return tok.value.value0 > indent;
                  };
                  if (tok.value instanceof PureScript_CST_Types.TokLayoutSep) {
                      return tok.value.value0 > indent;
                  };
                  return true;
              };
          });
          return function ($306) {
              return $304($305($306));
          };
      });
  };
  var recoverLetBinding = recoverIndent(PureScript_CST_Types.LetBindingError.create);
  var recoverDoStatement = recoverIndent(PureScript_CST_Types.DoError.create);
  var recoverDecl = recoverIndent(PureScript_CST_Types.DeclError.create);
  var parseSmallInt = PureScript_CST_Parser_Monad.take(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokInt && v.value.value1 instanceof PureScript_CST_Types.SmallInt) {
          return Data_Either.Right.create(new Data_Tuple.Tuple(v, v.value.value1.value0));
      };
      if (v.value instanceof PureScript_CST_Types.TokInt) {
          return Data_Either.Left.create(new PureScript_CST_Errors.LexIntOutOfRange(v.value.value0));
      };
      return Data_Either.Left.create(new PureScript_CST_Errors.UnexpectedToken(v.value));
  });
  var many1 = function (parser) {
      return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Array_NonEmpty["cons'"])(parser))(PureScript_CST_Parser_Monad.many(parser));
  };
  var expectMap = function (k) {
      return PureScript_CST_Parser_Monad.take(function (tok) {
          var v = k(tok);
          if (v instanceof Data_Maybe.Just) {
              return new Data_Either.Right(v.value0);
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Either.Left.create(new PureScript_CST_Errors.UnexpectedToken(tok.value));
          };
          throw new Error("Failed pattern match at PureScript.CST.Parser (line 46, column 3 - line 50, column 39): " + [ v.constructor.name ]);
      });
  };
  var parseBoolean = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "true")) {
          return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, true));
      };
      if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "false")) {
          return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, false));
      };
      return Data_Maybe.Nothing.value;
  });
  var parseChar = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokChar) {
          return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, v.value.value1));
      };
      return Data_Maybe.Nothing.value;
  });
  var parseHole = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokHole) {
          return Data_Maybe.Just.create({
              token: v,
              name: v.value.value0
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseIdent = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && !Data_Set.member(Data_Ord.ordString)(v.value.value1)(reservedKeywords))) {
          return Data_Maybe.Just.create({
              token: v,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var $$parseInt = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokInt) {
          return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, v.value.value1));
      };
      return Data_Maybe.Nothing.value;
  });
  var parseLabel = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokString) {
          return Data_Maybe.Just.create({
              token: v,
              name: v.value.value1
          });
      };
      if (v.value instanceof PureScript_CST_Types.TokLowerName && v.value.value0 instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Just.create({
              token: v,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseModuleName = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokUpperName && v.value.value0 instanceof Data_Maybe.Just) {
          return Data_Maybe.Just.create({
              token: v,
              name: PureScript_CST_Types.ModuleName(v.value.value0.value0 + ("." + v.value.value1))
          });
      };
      if (v.value instanceof PureScript_CST_Types.TokUpperName && v.value.value0 instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Just.create({
              token: v,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseNumber = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokNumber) {
          return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, v.value.value1));
      };
      return Data_Maybe.Nothing.value;
  });
  var parseOperator = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokOperator && v.value.value0 instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Just.create({
              token: v,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseProper = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokUpperName && v.value.value0 instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Just.create({
              token: v,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseQualifiedIdent = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokLowerName && !Data_Set.member(Data_Ord.ordString)(v.value.value1)(reservedKeywords)) {
          return Data_Maybe.Just.create({
              token: v,
              module: v.value.value0,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseQualifiedIdentOrProper = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokLowerName) {
          return Data_Maybe.Just.create({
              token: v,
              module: v.value.value0,
              name: Data_Either.Left.create(v.value.value1)
          });
      };
      if (v.value instanceof PureScript_CST_Types.TokUpperName) {
          return Data_Maybe.Just.create({
              token: v,
              module: v.value.value0,
              name: Data_Either.Right.create(v.value.value1)
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseQualifiedOperator = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokOperator) {
          return Data_Maybe.Just.create({
              token: v,
              module: v.value.value0,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseQualifiedProper = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokUpperName) {
          return Data_Maybe.Just.create({
              token: v,
              module: v.value.value0,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseQualifiedSymbol = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokSymbolName) {
          return Data_Maybe.Just.create({
              token: v,
              module: v.value.value0,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var parseString = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokString) {
          return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, v.value.value1));
      };
      if (v.value instanceof PureScript_CST_Types.TokRawString) {
          return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, v.value.value0));
      };
      return Data_Maybe.Nothing.value;
  });
  var parseSymbol = expectMap(function (v) {
      if (v.value instanceof PureScript_CST_Types.TokSymbolName && v.value.value0 instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Just.create({
              token: v,
              name: v.value.value1
          });
      };
      return Data_Maybe.Nothing.value;
  });
  var expect = function (pred) {
      return expectMap(function (tok) {
          var $217 = pred(tok.value);
          if ($217) {
              return new Data_Maybe.Just(tok);
          };
          return Data_Maybe.Nothing.value;
      });
  };
  var tokAt = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokAt) {
          return true;
      };
      return false;
  });
  var tokBackslash = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokBackslash) {
          return true;
      };
      return false;
  });
  var tokComma = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokComma) {
          return true;
      };
      return false;
  });
  var tokDot = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokDot) {
          return true;
      };
      return false;
  });
  var parseRecordAccessor = function (expr) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDot)(function (dot) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(separated(tokDot)(parseLabel))(function (path) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprRecordAccessor({
                  expr: expr,
                  dot: dot,
                  path: path
              }));
          });
      });
  };
  var tokDoubleColon = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokDoubleColon) {
          return true;
      };
      return false;
  });
  var parseInstanceName = Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseIdent))(tokDoubleColon);
  var tokEquals = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokEquals) {
          return true;
      };
      return false;
  });
  var tokForall = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokForall) {
          return true;
      };
      return false;
  });
  var tokKeyOperator = function (sym) {
      return expect(function (v) {
          if (v instanceof PureScript_CST_Types.TokOperator && v.value0 instanceof Data_Maybe.Nothing) {
              return sym === v.value1;
          };
          return false;
      });
  };
  var parseBinderNegative = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyOperator("-"))(function (negative) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderInt.create(new Data_Maybe.Just(negative))))($$parseInt))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderNumber.create(new Data_Maybe.Just(negative))))(parseNumber));
  });
  var parseRecordLabeled = function (valueParser) {
      var parseRecordField = Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.RecordField.create))(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseLabel))(tokKeyOperator(":")))))(valueParser);
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRecordField)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.RecordPun.create)(parseIdent));
  };
  var tokKeySymbol = function (sym) {
      return expect(function (v) {
          if (v instanceof PureScript_CST_Types.TokSymbolName && v.value0 instanceof Data_Maybe.Nothing) {
              return sym === v.value1;
          };
          return false;
      });
  };
  var tokKeyword = function (kw) {
      return expect(function (v) {
          if (v instanceof PureScript_CST_Types.TokLowerName && v.value0 instanceof Data_Maybe.Nothing) {
              return kw === v.value1;
          };
          return false;
      });
  };
  var parseFixityKeyword = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Infix.value))(tokKeyword("infix")))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Infixl.value))(tokKeyword("infixl")))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Infixr.value))(tokKeyword("infixr"))));
  var parseFixityOp = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.FixityType.create)(tokKeyword("type")))(parseQualifiedProper))(tokKeyword("as")))(parseOperator))(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.FixityValue.create)(parseQualifiedIdentOrProper))(tokKeyword("as")))(parseOperator));
  var parseDeclFixity = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseFixityKeyword)(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseSmallInt)(function (prec) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseFixityOp)(function (operator) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclFixity({
                  keyword: keyword,
                  prec: prec,
                  operator: operator
              }));
          });
      });
  });
  var parseForeignKind = PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ForeignKind.create)(tokKeyword("kind")))(parseProper));
  var parseRole = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Representational.value))(tokKeyword("representational")))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Nominal.value))(tokKeyword("nominal")))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Phantom.value))(tokKeyword("phantom"))));
  var parseDeclRole = function (keyword1) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("role"))(function (keyword2) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (name) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(many1(parseRole))(function (roles) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclRole(keyword1, keyword2, name, roles));
              });
          });
      });
  };
  var tokLayoutEnd = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokLayoutEnd) {
          return true;
      };
      return false;
  });
  var tokLayoutSep = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokLayoutSep) {
          return true;
      };
      return false;
  });
  var parseInstanceChainSeparator = Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(tokKeyword("else"))(PureScript_CST_Parser_Monad.optional(tokLayoutSep));
  var tokLayoutStart = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokLayoutStart) {
          return true;
      };
      return false;
  });
  var layout = function (valueParser) {
      var tail = PureScript_CST_Parser_Monad.many(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutSep)(valueParser));
      var go = function (head) {
          return Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Array.cons(head))(tail);
      };
      var values = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Bind.bindFlipped(PureScript_CST_Parser_Monad.bindParser)(go)(valueParser))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)([  ]));
      return Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutStart)(values))(tokLayoutEnd);
  };
  var layoutNonEmpty = function (valueParser) {
      return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
          return function (v1) {
              return Data_Array_NonEmpty["cons'"](v)(v1);
          };
      })(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutStart)(valueParser)))(Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(PureScript_CST_Parser_Monad.many(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutSep)(valueParser)))(tokLayoutEnd));
  };
  var tokLeftArrow = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokLeftArrow) {
          return true;
      };
      return false;
  });
  var tokLeftBrace = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokLeftBrace) {
          return true;
      };
      return false;
  });
  var tokLeftFatArrow = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokOperator && v.value0 instanceof Data_Maybe.Nothing) {
          return v.value1 === "<=" || v.value1 === "\u21d0";
      };
      return false;
  });
  var tokLeftParen = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokLeftParen) {
          return true;
      };
      return false;
  });
  var tokLeftSquare = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokLeftSquare) {
          return true;
      };
      return false;
  });
  var tokPipe = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokPipe) {
          return true;
      };
      return false;
  });
  var tokQualifiedKeyword = function (kw) {
      return expect(function (v) {
          if (v instanceof PureScript_CST_Types.TokLowerName) {
              return kw === v.value1;
          };
          return false;
      });
  };
  var tokRightArrow = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokRightArrow) {
          return true;
      };
      return false;
  });
  var parseFundep = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.FundepDetermined.create)(tokRightArrow))(many1(parseIdent)))(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.FundepDetermines.create)(many1(parseIdent)))(tokRightArrow))(many1(parseIdent)));
  var tokRightBrace = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokRightBrace) {
          return true;
      };
      return false;
  });
  var tokRightFatArrow = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokRightFatArrow) {
          return true;
      };
      return false;
  });
  var tokRightParen = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokRightParen) {
          return true;
      };
      return false;
  });
  var parens = wrapped(tokLeftParen)(tokRightParen);
  var parseEmptyRow = function (open) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightParen)(function (close) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.TypeRow.create({
              open: open,
              value: {
                  labels: Data_Maybe.Nothing.value,
                  tail: Data_Maybe.Nothing.value
              },
              close: close
          }));
      });
  };
  var tokRightSquare = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokRightSquare) {
          return true;
      };
      return false;
  });
  var tokSymbolArrow = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokSymbolArrow) {
          return true;
      };
      return false;
  });
  var tokTick = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokTick) {
          return true;
      };
      return false;
  });
  var tokUnderscore = expect(function (v) {
      if (v instanceof PureScript_CST_Types.TokUnderscore) {
          return true;
      };
      return false;
  });
  var delimited = function (openTok) {
      return function (closeTok) {
          return function (sepTok) {
              return function (valueParser) {
                  var parseNonEmpty = function (open) {
                      return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
                          return function (v1) {
                              return {
                                  open: open,
                                  value: new Data_Maybe.Just(v),
                                  close: v1
                              };
                          };
                      })(separated(sepTok)(valueParser)))(closeTok);
                  };
                  var parseEmpty = function (open) {
                      return Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
                          return {
                              open: open,
                              value: Data_Maybe.Nothing.value,
                              close: v
                          };
                      })(closeTok);
                  };
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(openTok)(function (open) {
                      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseEmpty(open))(parseNonEmpty(open));
                  });
              };
          };
      };
  };
  var parseDataMembers = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.DataAll.create)(tokKeySymbol("..")))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.DataEnumerated.create)(delimited(tokLeftParen)(tokRightParen)(tokComma)(parseProper)));
  var parseExport = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportTypeOp.create)(tokKeyword("type")))(parseSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportClass.create)(tokKeyword("class")))(parseProper))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportModule.create)(tokKeyword("module")))(parseModuleName))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportKind.create)(tokKeyword("kind")))(parseProper)))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportOp.create)(parseSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportValue.create)(parseIdent))(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportType.create)(parseProper))(PureScript_CST_Parser_Monad.optional(parseDataMembers))))))));
  var parseImport = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportOp.create)(parseSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportType.create)(parseProper))(PureScript_CST_Parser_Monad.optional(parseDataMembers)))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportTypeOp.create)(tokKeyword("type")))(parseSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportClass.create)(tokKeyword("class")))(parseProper))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportKind.create)(tokKeyword("kind")))(parseProper))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportValue.create)(parseIdent))))));
  var parseImportDecl = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("import"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseModuleName)(function (module_) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(PureScript_CST_Parser_Monad.optional(tokKeyword("hiding"))))(parens(separated(tokComma)(parseImport)))))(function (names) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokKeyword("as")))(parseModuleName)))(function (qualified) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                      keyword: keyword,
                      module: module_,
                      names: names,
                      qualified: qualified
                  });
              });
          });
      });
  });
  var parseModuleImportDecls = PureScript_CST_Parser_Monad.many(Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(parseImportDecl)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(tokLayoutSep)(PureScript_CST_Parser_Monad.lookAhead(tokLayoutEnd))));
  var parseModuleHeader = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("module"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseModuleName)(function (name) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(parens(separated(tokComma)(parseExport))))(function (exports) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("where"))(function (where_) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutStart)(parseModuleImportDecls))(function (imports) {
                      return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                          keyword: keyword,
                          name: name,
                          exports: exports,
                          where: where_,
                          imports: imports
                      });
                  });
              });
          });
      });
  });
  var braces = wrapped(tokLeftBrace)(tokRightBrace);
  var parseTypeVarKinded = Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeVarKinded.create)(parens(Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                  label: label,
                  separator: separator,
                  value: value
              });
          });
      });
  })));
  var parseTypeVarBinding = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseTypeVarKinded)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeVarName.create)(parseIdent));
  });
  var parseTypeParens = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokLeftParen)(function (open) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRowParen(open))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRowTailParen(open))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseKindedVar(open))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseTypeParen(open))(parseEmptyRow(open)))));
  });
  var parseTypeParen = function (open) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightParen)(function (close) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.TypeParens.create({
                  open: open,
                  value: value,
                  close: close
              }));
          });
      });
  };
  var parseTypeAtom = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeVar.create)(parseIdent))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeConstructor.create)(parseQualifiedProper))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.TypeString.create))(parseString))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseTypeParens)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeRecord.create)(braces(parseRow)))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeOpName.create)(parseQualifiedSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeHole.create)(parseHole))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeWildcard.create)(tokUnderscore))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeArrowName.create)(tokSymbolArrow)))))))));
  });
  var parseType5 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseTypeAtom)(function (ty) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeAtom))(function (args) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                  var v1 = Data_Array_NonEmpty.fromArray(args);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return ty;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return new PureScript_CST_Types.TypeApp(ty, v1.value0);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Parser (line 436, column 8 - line 438, column 29): " + [ v1.constructor.name ]);
              })());
          });
      });
  });
  var parseType4 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeUnaryRow.create)(tokKeyOperator("#")))(parseType4))(parseType5);
  });
  var parseType3 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType4)(function (ty) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseQualifiedOperator))(parseType4)))(function (ops) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                  var v1 = Data_Array_NonEmpty.fromArray(ops);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return ty;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return new PureScript_CST_Types.TypeOp(ty, v1.value0);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Parser (line 423, column 8 - line 425, column 28): " + [ v1.constructor.name ]);
              })());
          });
      });
  });
  var parseType2 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType3)(function (ty) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeArrow.create(ty))(tokRightArrow))(parseType1))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeConstrained.create(ty))(tokRightFatArrow))(parseType1))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(ty)));
      });
  });
  var parseType1 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseForall)(parseType2);
  });
  var parseType = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType1)(function (ty) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeKinded.create(ty))(tokDoubleColon))(parseType))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(ty));
      });
  });
  var parseRowTailParen = function (open) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokPipe))(parseType))(function (tail) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightParen)(function (close) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.TypeRow.create({
                  open: open,
                  value: {
                      labels: Data_Maybe.Nothing.value,
                      tail: new Data_Maybe.Just(tail)
                  },
                  close: close
              }));
          });
      });
  };
  var parseRowParen = function (open) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseLabel))(tokDoubleColon)))(function (v) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokComma))(parseRowLabel)))(function (rest) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokPipe))(parseType)))(function (tail) {
                      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightParen)(function (close) {
                          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.TypeRow.create({
                              open: open,
                              value: {
                                  labels: Data_Maybe.Just.create({
                                      head: {
                                          label: v.value0,
                                          separator: v.value1,
                                          value: value
                                      },
                                      tail: rest
                                  }),
                                  tail: tail
                              },
                              close: close
                          }));
                      });
                  });
              });
          });
      });
  };
  var parseRowLabel = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseLabel)(function (label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                  label: label,
                  separator: separator,
                  value: value
              });
          });
      });
  });
  var parseRow = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(separated(tokComma)(parseRowLabel)))(function (labels) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokPipe))(parseType)))(function (tail) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                  labels: labels,
                  tail: tail
              });
          });
      });
  });
  var parseKindedVar = function (open) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parens(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeVar.create)(parseIdent))))(tokDoubleColon)))(function (v) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (kind) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightParen)(function (close) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.TypeParens.create({
                      open: open,
                      value: new PureScript_CST_Types.TypeKinded(new PureScript_CST_Types.TypeParens(v.value0), v.value1, kind),
                      close: close
                  }));
              });
          });
      });
  };
  var parseForall = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeForall.create)(tokForall))(many1(parseTypeVarBinding)))(tokDot))(parseType1);
  });
  var parseDataCtor = Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
      return function (v1) {
          return {
              name: v,
              fields: v1
          };
      };
  })(parseProper))(PureScript_CST_Parser_Monad.many(parseTypeAtom));
  var parseIdentBinder = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (ident) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderNamed.create(ident))(tokAt))(parseBinderAtom))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.BinderVar(ident)));
  });
  var parseBinderConstructor = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseQualifiedProper)(function (name) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseBinderAtom))(function (apps) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.BinderConstructor(name, apps));
          });
      });
  });
  var parseBinderAtom = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseIdentBinder)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(PureScript_CST_Types.BinderConstructor.create)([  ]))(parseQualifiedProper))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderWildcard.create)(tokUnderscore))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderString.create))(parseString))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderChar.create))(parseChar))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderBoolean.create))(parseBoolean))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderInt.create(Data_Maybe.Nothing.value)))($$parseInt))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderNumber.create(Data_Maybe.Nothing.value)))(parseNumber))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderArray.create)(delimited(tokLeftSquare)(tokRightSquare)(tokComma)(parseBinder)))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderRecord.create)(delimited(tokLeftBrace)(tokRightBrace)(tokComma)(parseRecordLabeled(parseBinder))))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderParens.create)(parens(parseBinder))))))))))));
  });
  var parseBinder2 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseBinderNegative)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseBinderConstructor)(parseBinderAtom));
  });
  var parseBinder1 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseBinder2)(function (binder) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseQualifiedOperator))(parseBinder2)))(function (ops) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                  var v1 = Data_Array_NonEmpty.fromArray(ops);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return binder;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return new PureScript_CST_Types.BinderOp(binder, v1.value0);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Parser (line 811, column 8 - line 813, column 34): " + [ v1.constructor.name ]);
              })());
          });
      });
  });
  var parseBinder = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseBinder1)(function (binder) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderTyped.create(binder))(tokDoubleColon))(parseType))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(binder));
      });
  });
  var parseClassConstraints = function (parseOneConstraint) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.Many.create)(parens(separated(tokComma)(parseType))))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.One.create)(parseOneConstraint));
  };
  var parseDeclDerive = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("derive"))(function (derive_) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(tokKeyword("newtype")))(function (newtype_) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("instance"))(function (keyword) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(parseInstanceName))(function (name) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseClassConstraints(parseType3)))(tokRightFatArrow))))(function (constraints) {
                      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseQualifiedProper)(function (className) {
                          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeAtom))(function (types) {
                              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclDerive(derive_, newtype_, {
                                  keyword: keyword,
                                  name: name,
                                  constraints: constraints,
                                  className: className,
                                  types: types
                              }));
                          });
                      });
                  });
              });
          });
      });
  });
  var parseClassMember = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                  label: label,
                  separator: separator,
                  value: value
              });
          });
      });
  });
  var parseDeclClassSignature = function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseProper))(tokDoubleColon)))(function (v) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.DeclKindSignature.create(keyword)({
                  label: v.value0,
                  separator: v.value1,
                  value: value
              }));
          });
      });
  };
  var parseDeclKindSignature = function (keyword) {
      return function (label) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.DeclKindSignature.create(keyword)({
                      label: label,
                      separator: separator,
                      value: value
                  }));
              });
          });
      };
  };
  var parseDeclSignature = function (label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.DeclSignature.create({
                  label: label,
                  separator: separator,
                  value: value
              }));
          });
      });
  };
  var parseForeignData = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("data"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (label) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.ForeignData.create(keyword)({
                      label: label,
                      separator: separator,
                      value: value
                  }));
              });
          });
      });
  });
  var parseForeignValue = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.ForeignValue.create({
                  label: label,
                  separator: separator,
                  value: value
              }));
          });
      });
  });
  var parseDeclForeign = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("foreign"))(function (keyword1) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("import"))(function (keyword2) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseForeignData)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseForeignKind)(parseForeignValue)))(function (foreign_) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclForeign(keyword1, keyword2, foreign_));
          });
      });
  });
  var parseInstanceBindingSignature = function (label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.InstanceBindingSignature.create({
                  label: label,
                  separator: separator,
                  value: value
              }));
          });
      });
  };
  var parseLetBindingSignature = function (label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function (separator) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (value) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.LetBindingSignature.create({
                  label: label,
                  separator: separator,
                  value: value
              }));
          });
      });
  };
  var parseWhere = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (expr) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokKeyword("where")))(layoutNonEmpty(recoverLetBinding(parseLetBinding)))))(function (bindings) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                  expr: expr,
                  bindings: bindings
              });
          });
      });
  });
  var parseTickExpr1 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr3)(function (expr) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseQualifiedOperator))(parseExpr3)))(function (ops) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                  var v1 = Data_Array_NonEmpty.fromArray(ops);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return expr;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return new PureScript_CST_Types.ExprOp(expr, v1.value0);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Parser (line 582, column 8 - line 584, column 30): " + [ v1.constructor.name ]);
              })());
          });
      });
  });
  var parseTickExpr = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokTick)(function (open) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseTickExpr1)(function (value) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokTick)(function (close) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                  open: open,
                  value: value,
                  close: close
              });
          });
      });
  });
  var parseRecordUpdates = function (expr) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad["try"](Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(tokLeftBrace)(PureScript_CST_Parser_Monad.lookAhead(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(parseLabel)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(tokEquals)(tokLeftBrace))))))(function (open) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(separated(tokComma)(parseRecordUpdate))(function (value) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightBrace)(function (close) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.ExprRecordUpdate.create(expr)({
                      open: open,
                      value: value,
                      close: close
                  }));
              });
          });
      });
  };
  var parseRecordUpdateLeaf = function (label) {
      return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.RecordUpdateLeaf.create(label))(tokEquals))(parseExpr);
  };
  var parseRecordUpdateBranch = function (label) {
      return Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.RecordUpdateBranch.create(label))(braces(separated(tokComma)(parseRecordUpdate)));
  };
  var parseRecordUpdate = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseLabel)(function (label) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRecordUpdateLeaf(label))(parseRecordUpdateBranch(label));
  });
  var parseLetIn = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("let"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(layoutNonEmpty(recoverLetBinding(parseLetBinding)))(function (bindings) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("in"))(function (in_) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (body) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprLet({
                      keyword: keyword,
                      bindings: bindings,
                      "in": in_,
                      body: body
                  }));
              });
          });
      });
  });
  var parseLetBindingName = function (name) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseBinderAtom))(function (binders) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseGuarded(tokEquals))(function (guarded) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.LetBindingName({
                  name: name,
                  binders: binders,
                  guarded: guarded
              }));
          });
      });
  };
  var parseLetBinding = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(PureScript_CST_Parser_Monad["try"](parseIdentBinding))(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.LetBindingPattern.create)(parseBinder1))(tokEquals))(parseWhere));
  });
  var parseLambda = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokBackslash)(function (symbol) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(many1(parseBinderAtom))(function (binders) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightArrow)(function (arrow) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (body) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprLambda({
                      symbol: symbol,
                      binders: binders,
                      arrow: arrow,
                      body: body
                  }));
              });
          });
      });
  });
  var parseIf = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("if"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (cond) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("then"))(function (then_) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (true_) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("else"))(function (else_) {
                      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (false_) {
                          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprIf({
                              keyword: keyword,
                              cond: cond,
                              then: then_,
                              "true": true_,
                              "else": else_,
                              "false": false_
                          }));
                      });
                  });
              });
          });
      });
  });
  var parseIdentBinding = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (ident) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseLetBindingSignature(ident))(parseLetBindingName(ident));
  });
  var parseGuarded = function (sepParser) {
      var parsePatternGuard = Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
          return function (v1) {
              return {
                  binder: v,
                  expr: v1
              };
          };
      })(PureScript_CST_Parser_Monad.optional(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseBinder))(tokLeftArrow)))))(parseExpr);
      var parseGuardedExpr = Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return {
                          bar: v,
                          patterns: v1,
                          separator: v2,
                          where: v3
                      };
                  };
              };
          };
      })(tokPipe))(separated(tokComma)(parsePatternGuard)))(sepParser))(parseWhere);
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.Unconditional.create)(sepParser))(parseWhere))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.Guarded.create)(many1(parseGuardedExpr)));
  };
  var parseExprAtom = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprIdent.create)(parseQualifiedIdent))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprConstructor.create)(parseQualifiedProper))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprOpName.create)(parseQualifiedSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprSection.create)(tokUnderscore))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprHole.create)(parseHole))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.ExprString.create))(parseString))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.ExprChar.create))(parseChar))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.ExprBoolean.create))(parseBoolean))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.ExprInt.create))($$parseInt))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.ExprNumber.create))(parseNumber))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprArray.create)(delimited(tokLeftSquare)(tokRightSquare)(tokComma)(parseExpr)))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprRecord.create)(delimited(tokLeftBrace)(tokRightBrace)(tokComma)(parseRecordLabeled(parseExpr))))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprParens.create)(parens(parseExpr))))))))))))));
  });
  var parseExpr7 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExprAtom)(function (expr) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRecordAccessor(expr))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(expr));
      });
  });
  var parseExpr6 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr7)(function (expr) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRecordUpdates(expr))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(expr));
      });
  });
  var parseExpr5 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseIf)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseLetIn)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseLambda)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseCase)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDo)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseAdo)(parseExpr6))))));
  });
  var parseExpr4 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr5)(function (expr) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseExpr5))(function (args) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                  var v1 = Data_Array_NonEmpty.fromArray(args);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return expr;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return new PureScript_CST_Types.ExprApp(expr, v1.value0);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Parser (line 595, column 8 - line 597, column 31): " + [ v1.constructor.name ]);
              })());
          });
      });
  });
  var parseExpr3 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprNegate.create)(tokKeyOperator("-")))(parseExpr3))(parseExpr4);
  });
  var parseExpr2 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr3)(function (expr) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseTickExpr))(parseExpr3)))(function (ops) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                  var v1 = Data_Array_NonEmpty.fromArray(ops);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return expr;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return new PureScript_CST_Types.ExprInfix(expr, v1.value0);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Parser (line 567, column 8 - line 569, column 33): " + [ v1.constructor.name ]);
              })());
          });
      });
  });
  var parseExpr1 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr2)(function (expr) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseQualifiedOperator))(parseExpr2)))(function (ops) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)((function () {
                  var v1 = Data_Array_NonEmpty.fromArray(ops);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return expr;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return new PureScript_CST_Types.ExprOp(expr, v1.value0);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Parser (line 559, column 8 - line 561, column 30): " + [ v1.constructor.name ]);
              })());
          });
      });
  });
  var parseExpr = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr1)(function (expr) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprTyped.create(expr))(tokDoubleColon))(parseType))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(expr));
      });
  });
  var parseDoStatement = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.DoLet.create)(tokKeyword("let")))(layoutNonEmpty(recoverLetBinding(parseLetBinding))))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.DoBind.create))(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseBinder))(tokLeftArrow))))(parseExpr))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.DoDiscard.create)(parseExpr)));
  });
  var parseDo = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokQualifiedKeyword("do"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(layoutNonEmpty(recoverDoStatement(parseDoStatement)))(function (statements) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprDo({
              keyword: keyword,
              statements: statements
          }));
      });
  });
  var parseCaseBranches = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function (v) {
      return layoutNonEmpty(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(separated(tokComma)(parseBinder1)))(parseGuarded(tokRightArrow)));
  });
  var parseCase = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("case"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(separated(tokComma)(parseExpr))(function (head) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("of"))(function (of_) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(PureScript_CST_Parser_Monad["try"](parseBadSingleCaseBranch))(parseCaseBranches))(function (branches) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprCase({
                      keyword: keyword,
                      head: head,
                      of: of_,
                      branches: branches
                  }));
              });
          });
      });
  });
  var parseBadSingleCaseWhere = function (binder) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightArrow)(function (arrow) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutEnd)(parseWhere))(function (body) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(Data_Array_NonEmpty.singleton(Data_Tuple.Tuple.create({
                  head: binder,
                  tail: [  ]
              })(new PureScript_CST_Types.Unconditional(arrow, body))));
          });
      });
  };
  var parseBadSingleCaseGuarded = function (binder) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutEnd)(parseGuarded(tokRightArrow)))(function (body) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(Data_Array_NonEmpty.singleton(new Data_Tuple.Tuple({
              head: binder,
              tail: [  ]
          }, body)));
      });
  };
  var parseBadSingleCaseBranch = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutStart)(parseBinder1))(function (binder) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseBadSingleCaseWhere(binder))(parseBadSingleCaseGuarded(binder));
  });
  var parseAdo = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokQualifiedKeyword("ado"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(layout(recoverDoStatement(parseDoStatement)))(function (statements) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("in"))(function (in_) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function (result) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprAdo({
                      keyword: keyword,
                      statements: statements,
                      "in": in_,
                      result: result
                  }));
              });
          });
      });
  });
  var parseDeclValue1 = function (name) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseBinderAtom))(function (binders) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseGuarded(tokEquals))(function (guarded) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclValue({
                  name: name,
                  binders: binders,
                  guarded: guarded
              }));
          });
      });
  };
  var parseDeclValue = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (ident) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclSignature(ident))(parseDeclValue1(ident));
  });
  var parseInstanceBindingName = function (name) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseBinderAtom))(function (binders) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseGuarded(tokEquals))(function (guarded) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.InstanceBindingName({
                  name: name,
                  binders: binders,
                  guarded: guarded
              }));
          });
      });
  };
  var parseInstanceBinding = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function (ident) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseInstanceBindingSignature(ident))(parseInstanceBindingName(ident));
  });
  var parseInstance = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("instance"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(parseInstanceName))(function (name) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseClassConstraints(parseType3)))(tokRightFatArrow))))(function (constraints) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseQualifiedProper)(function (className) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeAtom))(function (types) {
                      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokKeyword("where")))(layoutNonEmpty(parseInstanceBinding))))(function (body) {
                          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                              head: {
                                  keyword: keyword,
                                  name: name,
                                  constraints: constraints,
                                  className: className,
                                  types: types
                              },
                              body: body
                          });
                      });
                  });
              });
          });
      });
  });
  var parseDeclInstanceChain = Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.DeclInstanceChain.create)(separated(parseInstanceChainSeparator)(parseInstance));
  var parseDeclClass1 = function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseClassConstraints(parseType5)))(tokLeftFatArrow))))(function ($$super) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (name) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeVarBinding))(function (vars) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokPipe))(separated(tokComma)(parseFundep))))(function (fundeps) {
                      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokKeyword("where")))(layoutNonEmpty(parseClassMember))))(function (members) {
                          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclClass({
                              keyword: keyword,
                              "super": $$super,
                              name: name,
                              vars: vars,
                              fundeps: fundeps
                          }, members));
                      });
                  });
              });
          });
      });
  };
  var parseDeclClass = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("class"))(function (keyword) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclClassSignature(keyword))(parseDeclClass1(keyword));
  });
  var parseDeclData1 = function (keyword) {
      return function (name) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeVarBinding))(function (vars) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokEquals))(separated(tokPipe)(parseDataCtor))))(function (ctors) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclData({
                      keyword: keyword,
                      name: name,
                      vars: vars
                  }, ctors));
              });
          });
      };
  };
  var parseDeclData = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("data"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (name) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclKindSignature(keyword)(name))(parseDeclData1(keyword)(name));
      });
  });
  var parseDeclNewtype1 = function (keyword) {
      return function (name) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeVarBinding))(function (vars) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokEquals)(function (tok) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (wrapper) {
                      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseTypeAtom)(function (body) {
                          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclNewtype({
                              keyword: keyword,
                              name: name,
                              vars: vars
                          }, tok, wrapper, body));
                      });
                  });
              });
          });
      };
  };
  var parseDeclNewtype = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("newtype"))(function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (name) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclKindSignature(keyword)(name))(parseDeclNewtype1(keyword)(name));
      });
  });
  var parseDeclType2 = function (keyword) {
      return function (name) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeVarBinding))(function (vars) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokEquals)(function (tok) {
                  return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function (body) {
                      return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclType({
                          keyword: keyword,
                          name: name,
                          vars: vars
                      }, tok, body));
                  });
              });
          });
      };
  };
  var parseDeclType1 = function (keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function (name) {
          return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclKindSignature(keyword)(name))(parseDeclType2(keyword)(name));
      });
  };
  var parseDeclType = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("type"))(function (keyword) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclRole(keyword))(parseDeclType1(keyword));
  });
  var parseDecl = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclData)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclNewtype)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclType)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclClass)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclInstanceChain)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclDerive)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclValue)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclForeign)(parseDeclFixity))))))));
  var parseModuleDecls = PureScript_CST_Parser_Monad.many(Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(recoverDecl(parseDecl))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(tokLayoutSep)(PureScript_CST_Parser_Monad.lookAhead(tokLayoutEnd))));
  var parseModuleBody = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(parseModuleDecls)(tokLayoutEnd))(function (decls) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.eof)(function (v) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
              decls: decls,
              trailingComments: v.value1,
              end: v.value0
          });
      });
  });
  var parseModule = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseModuleHeader)(function (header) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseModuleBody)(function (body) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
              header: header,
              body: body
          });
      });
  });
  exports["parseModule"] = parseModule;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["PureScript.CST"] = $PS["PureScript.CST"] || {};
  var exports = $PS["PureScript.CST"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var PureScript_CST_Lexer = $PS["PureScript.CST.Lexer"];
  var PureScript_CST_Parser = $PS["PureScript.CST.Parser"];
  var PureScript_CST_Parser_Monad = $PS["PureScript.CST.Parser.Monad"];
  var ParseSucceeded = (function () {
      function ParseSucceeded(value0) {
          this.value0 = value0;
      };
      ParseSucceeded.create = function (value0) {
          return new ParseSucceeded(value0);
      };
      return ParseSucceeded;
  })();
  var ParseSucceededWithErrors = (function () {
      function ParseSucceededWithErrors(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ParseSucceededWithErrors.create = function (value0) {
          return function (value1) {
              return new ParseSucceededWithErrors(value0, value1);
          };
      };
      return ParseSucceededWithErrors;
  })();
  var ParseFailed = (function () {
      function ParseFailed(value0) {
          this.value0 = value0;
      };
      ParseFailed.create = function (value0) {
          return new ParseFailed(value0);
      };
      return ParseFailed;
  })();
  var toRecoveredParserResult = function (v) {
      var v1 = function (v2) {
          if (v instanceof Data_Either.Right && Data_Boolean.otherwise) {
              return new ParseSucceeded(v.value0.value0);
          };
          if (v instanceof Data_Either.Left) {
              return new ParseFailed(v.value0);
          };
          throw new Error("Failed pattern match at PureScript.CST (line 41, column 1 - line 44, column 29): " + [ v.constructor.name ]);
      };
      if (v instanceof Data_Either.Right) {
          var $12 = Data_Array_NonEmpty.fromArray(v.value0.value1);
          if ($12 instanceof Data_Maybe.Just) {
              return new ParseSucceededWithErrors(v.value0.value0, $12.value0);
          };
          return v1(true);
      };
      return v1(true);
  };                                           
  var runRecoveredParser = function (p) {
      var $24 = Data_Function.flip(PureScript_CST_Parser_Monad.runParser)(p);
      return function ($25) {
          return toRecoveredParserResult($24(PureScript_CST_Lexer.lex($25)));
      };
  };
  var parseModule = runRecoveredParser(PureScript_CST_Parser.parseModule);
  exports["ParseSucceeded"] = ParseSucceeded;
  exports["ParseSucceededWithErrors"] = ParseSucceededWithErrors;
  exports["ParseFailed"] = ParseFailed;
  exports["parseModule"] = parseModule;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Tidy.Operators"] = $PS["Tidy.Operators"] || {};
  var exports = $PS["Tidy.Operators"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var PureScript_CST_Lexer = $PS["PureScript.CST.Lexer"];
  var PureScript_CST_TokenStream = $PS["PureScript.CST.TokenStream"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];
  var Tidy_Precedence = $PS["Tidy.Precedence"];
  var parseOperatorPrec = (function () {
      var tokenStreamToArray = (function () {
          var go = function (acc) {
              return function ($76) {
                  return (function (v) {
                      if (v instanceof PureScript_CST_TokenStream.TokenEOF) {
                          return new Data_Either.Right(acc);
                      };
                      if (v instanceof PureScript_CST_TokenStream.TokenError) {
                          return new Data_Either.Left(v.value1);
                      };
                      if (v instanceof PureScript_CST_TokenStream.TokenCons) {
                          return go(Data_Array.snoc(acc)(v.value0.value))(v.value2);
                      };
                      throw new Error("Failed pattern match at Tidy.Operators (line 33, column 35 - line 39, column 43): " + [ v.constructor.name ]);
                  })(PureScript_CST_TokenStream.step($76));
              };
          };
          return go([  ]);
      })();
      return function ($77) {
          return (function (v) {
              if (v instanceof Data_Either.Right && (v.value0.length === 2 && (v["value0"][0] instanceof PureScript_CST_Types.TokSymbolName && (v["value0"][1] instanceof PureScript_CST_Types.TokInt && v["value0"][1].value1 instanceof PureScript_CST_Types.SmallInt)))) {
                  return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Tidy_Precedence.QualifiedOperator(v["value0"][0].value0, Tidy_Precedence.OperatorValue.value, v["value0"][0].value1), v["value0"][1].value1.value0));
              };
              if (v instanceof Data_Either.Right && (v.value0.length === 3 && (v["value0"][0] instanceof PureScript_CST_Types.TokSymbolName && (v["value0"][1] instanceof PureScript_CST_Types.TokLowerName && (v["value0"][1].value0 instanceof Data_Maybe.Nothing && (v["value0"][1].value1 === "type" && (v["value0"][2] instanceof PureScript_CST_Types.TokInt && v["value0"][2].value1 instanceof PureScript_CST_Types.SmallInt))))))) {
                  return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Tidy_Precedence.QualifiedOperator(v["value0"][0].value0, Tidy_Precedence.OperatorType.value, v["value0"][0].value1), v["value0"][2].value1.value0));
              };
              return Data_Maybe.Nothing.value;
          })(tokenStreamToArray(PureScript_CST_Lexer.lex($77)));
      };
  })();
  var parseOperatorTable = (function () {
      var $78 = Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(Tidy_Precedence.insertOperator))(Data_Map_Internal.empty);
      var $79 = Data_Array.mapMaybe(parseOperatorPrec);
      return function ($80) {
          return $78($79($80));
      };
  })();
  exports["parseOperatorTable"] = parseOperatorTable;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Bin.Worker"] = $PS["Bin.Worker"] || {};
  var exports = $PS["Bin.Worker"];
  var Bin_FormatOptions = $PS["Bin.FormatOptions"];
  var Bin_Timing = $PS["Bin.Timing"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Dodo = $PS["Dodo"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Aff = $PS["Node.FS.Aff"];
  var Node_WorkerBees = $PS["Node.WorkerBees"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var PureScript_CST = $PS["PureScript.CST"];
  var PureScript_CST_Errors = $PS["PureScript.CST.Errors"];
  var Tidy = $PS["Tidy"];
  var Tidy_Doc = $PS["Tidy.Doc"];
  var Tidy_Operators = $PS["Tidy.Operators"];
  var Tidy_Precedence = $PS["Tidy.Precedence"];                
  var toWorkerConfig = function (options) {
      return {
          importSort: Bin_FormatOptions.importSortToString(options.importSort),
          importWrap: Bin_FormatOptions.importWrapToString(options.importWrap),
          indent: options.indent,
          operatorsFile: Data_Maybe.fromMaybe(".tidyoperators.default")(options.operatorsFile),
          ribbon: options.ribbon,
          typeArrowPlacement: Bin_FormatOptions.typeArrowPlacementToString(options.typeArrowPlacement),
          unicode: Bin_FormatOptions.unicodeToString(options.unicode),
          width: Data_Maybe.fromMaybe(Data_Bounded.top(Data_Bounded.boundedInt))(options.width)
      };
  };
  var formatCommand = function (args) {
      return function (operators) {
          return function (contents) {
              var print = Dodo.print(Dodo.plainText)({
                  pageWidth: Data_Maybe.fromMaybe(Data_Bounded.top(Data_Bounded.boundedInt))(args.width),
                  ribbonRatio: args.ribbon,
                  indentWidth: args.indent,
                  indentUnit: Data_Monoid.power(Data_Monoid.monoidString)(" ")(args.indent)
              });
              var v = PureScript_CST.parseModule(contents);
              if (v instanceof PureScript_CST.ParseSucceeded) {
                  var opts = {
                      importSort: args.importSort,
                      importWrap: args.importWrap,
                      operators: Tidy_Precedence.remapOperators(operators)(v.value0),
                      typeArrowPlacement: args.typeArrowPlacement,
                      unicode: args.unicode,
                      formatError: (Tidy.defaultFormatOptions(Tidy.formatErrorVoid)).formatError
                  };
                  return Data_Either.Right.create(print(Tidy_Doc.toDoc(Tidy.formatModule(opts)(v.value0))));
              };
              if (v instanceof PureScript_CST.ParseSucceededWithErrors) {
                  return new Data_Either.Left((Data_Array_NonEmpty.head(v.value1)).error);
              };
              if (v instanceof PureScript_CST.ParseFailed) {
                  return new Data_Either.Left(v.value0.error);
              };
              throw new Error("Failed pattern match at Bin.Worker (line 83, column 3 - line 97, column 21): " + [ v.constructor.name ]);
          };
      };
  };
  var formatInPlaceCommand = function (shouldCheck) {
      return function (operators) {
          return function (v) {
              var formatOptions = {
                  importSort: Data_Either["fromRight'"](function (v1) {
                      return Partial_Unsafe.unsafeCrashWith("Unknown importSort value");
                  })(Bin_FormatOptions.importSortFromString(v.config.importSort)),
                  importWrap: Data_Either["fromRight'"](function (v1) {
                      return Partial_Unsafe.unsafeCrashWith("Unknown importWrap value");
                  })(Bin_FormatOptions.importWrapFromString(v.config.importWrap)),
                  indent: v.config.indent,
                  operatorsFile: Data_Maybe.Nothing.value,
                  ribbon: v.config.ribbon,
                  typeArrowPlacement: Data_Either["fromRight'"](function (v1) {
                      return Partial_Unsafe.unsafeCrashWith("Unknown typeArrowPlacement value");
                  })(Bin_FormatOptions.typeArrowPlacementFromString(v.config.typeArrowPlacement)),
                  unicode: Data_Either["fromRight'"](function (v1) {
                      return Partial_Unsafe.unsafeCrashWith("Unknown unicode value");
                  })(Bin_FormatOptions.unicodeFromString(v.config.unicode)),
                  width: new Data_Maybe.Just(v.config.width)
              };
              return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.readTextFile(Node_Encoding.UTF8.value)(v.filePath))(function (contents) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Bin_Timing.hrtime))(function (start) {
                      var v1 = formatCommand(formatOptions)(operators)(contents);
                      if (v1 instanceof Data_Either.Right) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)((function () {
                              var $33 = Data_Newtype.unwrap();
                              return function ($34) {
                                  return $33(Bin_Timing.toMilliseconds($34));
                              };
                          })())(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Bin_Timing.hrtimeDiff(start))))(function (timing) {
                              if (shouldCheck) {
                                  var alreadyFormatted = v1.value0 === contents;
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                                      filePath: v.filePath,
                                      error: "",
                                      alreadyFormatted: alreadyFormatted,
                                      timing: timing
                                  });
                              };
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Node_FS_Aff.writeTextFile(Node_Encoding.UTF8.value)(v.filePath)(v1.value0))(function () {
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                                      filePath: v.filePath,
                                      error: "",
                                      alreadyFormatted: false,
                                      timing: timing
                                  });
                              });
                          });
                      };
                      if (v1 instanceof Data_Either.Left) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                              filePath: v.filePath,
                              error: PureScript_CST_Errors.printParseError(v1.value0),
                              alreadyFormatted: false,
                              timing: 0
                          });
                      };
                      throw new Error("Failed pattern match at Bin.Worker (line 123, column 3 - line 133, column 91): " + [ v1.constructor.name ]);
                  });
              });
          };
      };
  };
  var main = Node_WorkerBees.makeAsMain()(function (v) {
      var parsedOperatorsByPath = Data_Functor.map(Foreign_Object.functorObject)(function (operators) {
          return Data_Lazy.defer(function (v1) {
              return Tidy_Operators.parseOperatorTable(operators);
          });
      })(v.workerData.operatorsByPath);
      return v.receive(function (v1) {
          var operators = Data_Maybe.maybe(Data_Map_Internal.empty)(Data_Lazy.force)(Foreign_Object.lookup(v1.config.operatorsFile)(parsedOperatorsByPath));
          return Effect_Aff.runAff_(Data_Either.either(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEffect))(v.reply))(formatInPlaceCommand(v.workerData.shouldCheck)(operators)(v1));
      });
  });
  exports["toWorkerConfig"] = toWorkerConfig;
  exports["formatCommand"] = formatCommand;
  exports["formatInPlaceCommand"] = formatInPlaceCommand;
  exports["main"] = main;
})(PS);
PS["Bin.Worker"].main();